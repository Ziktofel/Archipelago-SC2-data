include "TriggerLibs/NativeLib"

include "Lib15EF4C78_h"

//--------------------------------------------------------------------------------------------------
// Library: Archipelago Player Handlers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib15EF4C78_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib15EF4C78_InitVariables_completed = false;

void lib15EF4C78_InitVariables () {
    int init_i;
    int init_j;

    if (lib15EF4C78_InitVariables_completed) {
        return;
    }

    lib15EF4C78_InitVariables_completed = true;

    lib15EF4C78_gv_stukov_HordeGroup = UnitGroupEmpty();
    lib15EF4C78_gv_stukov_BunkerGroup = UnitGroupEmpty();
    lib15EF4C78_gv_kerriganPsiStrikeEnergyCost2 = libNtve_gf_CostOfAbility("AP_NovaPsiStrike", "Energy");
    for (init_i = 0; init_i <= lib15EF4C78_gv_nMC_HEROCOUNT; init_i += 1) {
        lib15EF4C78_gv_nM_HeroReviveCDLink[init_i] = "";
    }
    lib15EF4C78_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("AP_PsiStrikeBlink", "Energy");
    lib15EF4C78_gv_pM_ScreenMode = c_uiModeConsole;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib15EF4C78_gv_pM_SoACasterGroup[init_i] = UnitGroupEmpty();
    }
    lib15EF4C78_gv_pM_SoATargetingDirectionGroup = UnitGroupEmpty();
    lib15EF4C78_gv_soA_TargetingMode_Timer = TimerCreate();
    lib15EF4C78_gv_sOA_TimeFreezeUI = c_invalidDialogId;
    lib15EF4C78_gv_pU_GPCasterGroup = UnitGroupEmpty();
    lib15EF4C78_gv_pU_GPPanel = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPHolder = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPCutscene = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPEnergyBarScene = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPEnergyGlassScene = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPEnergyBar = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPEnergyLabel = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_GPRequestedVisible = true;
    lib15EF4C78_gv_pU_GPCmdPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib15EF4C78_gv_pU_GPCmdButtons[init_i] = c_invalidDialogControlId;
    }
    lib15EF4C78_gv_pU_GPBlackTooltipAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib15EF4C78_gv_pU_GPAbilityArrows[init_i] = c_invalidDialogControlId;
    }
    lib15EF4C78_gv_pU_TargetingOverlayDialog = c_invalidDialogId;
    lib15EF4C78_gv_pU_TargetingOverlayPortrait = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_TargetingAbilityDialog = c_invalidDialogId;
    lib15EF4C78_gv_pU_TargetingPanel = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_TargetingCancelButton = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_TargetingChargesPanel = c_invalidDialogControlId;
    lib15EF4C78_gv_pU_TargetingInstructionsLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lib15EF4C78_gv_pU_TargetingChargeSinglePanel[init_i] = c_invalidDialogControlId;
    }
    lib15EF4C78_gv_supplicantWarpTrainActualUnitCost = UnitTypeGetCost("AP_Supplicant", c_unitCostMinerals);
    lib15EF4C78_gv_supplicantWarpTrainActualCommand = AbilityCommand("AP_WarpGateTrainSupplicantTrue", 11);
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroReviveTimer[init_i][init_j] = 60.0;
        }
    }
    lib15EF4C78_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroShowLevel[init_i][init_j] = true;
        }
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_VoidHeroUIRevivable[init_i][init_j] = true;
        }
    }
    lib15EF4C78_gv_cU_HeroAutomaticIndex = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIType[init_i] = lib15EF4C78_ge_CampaignHeroes_None;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIPositionX[init_i] = 20;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIPositionY[init_i] = 30;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[init_i] = true;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[init_i] = true;
    }
    lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan = 60.0;
    lib15EF4C78_gv_zS_KerriganCheatXP = 1;
    lib15EF4C78_gv_zS_KerriganActualLevel = 1;
    lib15EF4C78_gv_zS_KerriganPing = c_invalidPingId;
    lib15EF4C78_gv_zS_KerriganLevelLabel = c_invalidDialogControlId;
    lib15EF4C78_gv_cM_Mengsk_WeaponPickups = UnitGroupEmpty();
    lib15EF4C78_gv_cM_Mengsk_WeaponPickerUppers = UnitGroupEmpty();
    lib15EF4C78_gv_armedShadowOpsNovaNuke = UnitGroupEmpty();
    lib15EF4C78_gv_armedShadowOpsMengskNuke = UnitGroupEmpty();
    lib15EF4C78_gv_cM_Mengsk_XPHungryUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib15EF4C78_gv_aP_Player_MERC_COOLDOWN_LINK_SIZE; init_i += 1) {
        lib15EF4C78_gv_aP_Player_MercCooldownLinks[init_i] = "";
    }
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: AP_Player_GalaxyIncludes
//--------------------------------------------------------------------------------------------------
include "AP_Player_PlayerBooleanFunction"
include "AP_Player_Action"
include "AP_Player_CinematicMode_h"
include "AP_Player_LotVShowHideCampaignTeachingHook_h"
include "AP_Player_CanAutoHarvest_h"
include "AP_Player_StickyProtossBuildButtons"

void lib15EF4C78_InitCustomScript () {
    initStickyBuildKeys();
}

// Presets
// Functions
void lib15EF4C78_gf_Stukov_NewBunkerUnitProcess (unit lp_newUnit) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = lp_newUnit;
    lv_player = UnitGetOwner(lp_newUnit);

    // Implementation
    if ((UnitHasBehavior2(lp_newUnit, "AP_SIBarracksTrainTimedLifeHasBeenApplied") == false)) {
        UnitBehaviorAdd(lv_unit, "AP_SIBarracksTrainTimedLifeHasBeenApplied", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AP_SIInfestedBunkerTrainTimedLife", lv_unit, 1);
    }

    UnitGroupAdd(lib15EF4C78_gv_stukov_HordeGroup, lp_newUnit);
    lib15EF4C78_gf_Stukov_SingleUnitGoToRally(lv_unit, true);
}

void lib15EF4C78_gf_Stukov_SingleUnitGoToRally (unit lp_rallyingUnit, bool lp_overrideExistingOrders) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_stukov_RallyPoint != null) && ((lp_overrideExistingOrders == true) || (UnitOrderCount(lp_rallyingUnit) == 0))) {
        UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), lib15EF4C78_gv_stukov_RallyPoint), c_orderQueueReplace);
    }

}

void lib15EF4C78_gf_Stukov_HordeGoToRally () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_stukov_RallyPoint != null)) {
        UnitGroupIssueOrder(lib15EF4C78_gv_stukov_HordeGroup, OrderTargetingPoint(AbilityCommand("move", 3), lib15EF4C78_gv_stukov_RallyPoint), c_orderQueueReplace);
    }

}

int lib15EF4C78_gf_AP_GetPlayerId () {
    // Variable Declarations
    int lv_player_index;

    // Automatic Variable Declarations
    playergroup autoE815632A_g;

    // Variable Initialization
    lv_player_index = -1;

    // Implementation
    autoE815632A_g = PlayerGroupAll();
    lv_player_index = -1;
    while (true) {
        lv_player_index = PlayerGroupNextPlayer(autoE815632A_g, lv_player_index);
        if (lv_player_index < 0) { break; }
        if ((PlayerType(lv_player_index) == c_playerTypeUser)) {
            return lv_player_index;
        }

    }
    return 1;
}

void lib15EF4C78_gf_AP_ApplyDetectionUpgrades () {
    // Variable Declarations
    int lv_human_player_id;
    int lv_player_index;

    // Automatic Variable Declarations
    const int autoAF3B14EE_ae = 15;
    const int autoAF3B14EE_ai = 1;

    // Variable Initialization
    lv_human_player_id = lib15EF4C78_gf_AP_GetPlayerId();

    // Implementation
    lv_player_index = 2;
    for ( ; ( (autoAF3B14EE_ai >= 0 && lv_player_index <= autoAF3B14EE_ae) || (autoAF3B14EE_ai < 0 && lv_player_index >= autoAF3B14EE_ae) ) ; lv_player_index += autoAF3B14EE_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(lv_human_player_id, lv_player_index, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(lv_human_player_id, lv_player_index, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player_index, "AP_DetectionEnemy", 1);
        }

    }
}

string lib15EF4C78_gf_AP_Player_findNovaWeapon (unit lp_sourceNovaUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponCanisterRifle") == true)) {
        return "AP_NovaWeaponCanisterRifle";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponHellfireShotgun") == true)) {
        return "AP_NovaWeaponHellfireShotgun";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponPlasmaRifle") == true)) {
        return "AP_NovaWeaponPlasmaRifle";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponPsiBlade") == true)) {
        return "AP_NovaWeaponPsiBlade";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponBlazefireBlade") == true)) {
        return "AP_NovaWeaponBlazefireBlade";
    }
    return null;
}

trigger auto_lib15EF4C78_gf_HandleHeroDeathNova_Trigger = null;
unit auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_heroUnit;
unit auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_reviveLocation;
fixed auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_reviveTime;

void lib15EF4C78_gf_HandleHeroDeathNova (unit lp_heroUnit, unit lp_reviveLocation, fixed lp_reviveTime) {
    auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_heroUnit = lp_heroUnit;
    auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_reviveLocation = lp_reviveLocation;
    auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_reviveTime = lp_reviveTime;

    if (auto_lib15EF4C78_gf_HandleHeroDeathNova_Trigger == null) {
        auto_lib15EF4C78_gf_HandleHeroDeathNova_Trigger = TriggerCreate("auto_lib15EF4C78_gf_HandleHeroDeathNova_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_HandleHeroDeathNova_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_HandleHeroDeathNova_TriggerFunc (bool testConds, bool runActions) {
    unit lp_heroUnit = auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_heroUnit;
    unit lp_reviveLocation = auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_reviveLocation;
    fixed lp_reviveTime = auto_lib15EF4C78_gf_HandleHeroDeathNova_lp_reviveTime;

    // Variable Declarations
    int lv_heroType;
    unit lv_actualReviveLocation;
    string lv_reviveUnitType;
    text lv_reviveMessage;
    text lv_reviveRebuildMessage;
    fixed lv_reviveCooldown;
    bool lv_updateRally;

    // Automatic Variable Declarations
    int autoD47D4B33_val;
    int autoD43BA88C_val;

    // Variable Initialization

    // Implementation
    if ((lp_reviveLocation != null) && (UnitIsAlive(lp_reviveLocation) == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_15EF4C78_D74BC47F"), false);
        return true;
    }

    lv_heroType = lib15EF4C78_gf_NM_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)] = UnitGetOwner(lp_heroUnit);
    lib15EF4C78_gv_nM_HeroRevivingUnit[(lv_heroType)] = lp_heroUnit;
    autoD47D4B33_val = lv_heroType;
    if (autoD47D4B33_val == lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova) {
        lv_reviveUnitType = "AP_NovaReviveCocoon";
        lib15EF4C78_gv_nM_HeroReviveCDLink[(lv_heroType)] = "Abil/AP_NovaRevive";
        lib15EF4C78_gv_nM_HeroReviveCommand[(lv_heroType)] = AbilityCommand("AP_NovaRevive", 0);
        if ((lp_reviveTime == -1.0)) {
            lv_reviveCooldown = lib15EF4C78_gv_nM_ReviveCooldownTimeNova;
        }
        else {
            lv_reviveCooldown = lp_reviveTime;
        }
        if ((lib15EF4C78_gv_nM_ReviveUseAltMessage == true)) {
            TextExpressionSetToken("Param/Expression/lib_15EF4C78_0B6D4AB4", "A", IntToText(FixedToInt(lv_reviveCooldown)));
            lv_reviveMessage = TextExpressionAssemble("Param/Expression/lib_15EF4C78_0B6D4AB4");
            lv_reviveRebuildMessage = StringExternal("Param/Value/lib_15EF4C78_D80C88E5");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_15EF4C78_1B326596", "A", IntToText(FixedToInt(lv_reviveCooldown)));
            lv_reviveMessage = TextExpressionAssemble("Param/Expression/lib_15EF4C78_1B326596");
            lv_reviveRebuildMessage = StringExternal("Param/Value/lib_15EF4C78_D005C2B7");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_15EF4C78_533C8428", "A", StringToText((UnitGetType(lp_heroUnit))));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_15EF4C78_533C8428"), false);
        return true;
    }
    lib15EF4C78_gv_nM_ReviveUseAltMessage = false;
    if ((lp_reviveLocation != null)) {
        lv_actualReviveLocation = lp_reviveLocation;
    }
    else {
        lv_actualReviveLocation = lib15EF4C78_gf_NM_FindPrimaryTownHall(lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)]);
    }
    if ((lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)] == 1)) {
        if (((lv_actualReviveLocation == null) || (UnitIsAlive(lv_actualReviveLocation) == false))) {
        }
        else {
            TriggerExecute(lib15EF4C78_gt_NM_HeroReviveVOReminder, true, false);
        }
    }

    Wait(2.0, c_timeGame);
    while (((lv_actualReviveLocation == null) || (UnitIsAlive(lv_actualReviveLocation) == false))) {
        Wait(1.0, c_timeGame);
        lv_actualReviveLocation = lib15EF4C78_gf_NM_FindPrimaryTownHall(lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)]);
    }
    if ((UnitIsAlive(lp_heroUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_reviveUnitType, 0, lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)], UnitGetPosition(lv_actualReviveLocation));
        lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)] = UnitLastCreated();
        if ((lv_updateRally == true)) {
            UnitCreateEffectUnit(lv_actualReviveLocation, "CopyHatcheryRally", lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)]);
            UnitIssueOrder(lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)], OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)]), c_orderQueueReplace);
        }

        libNtve_gf_PlayerRemoveCooldown(lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)], lib15EF4C78_gv_nM_HeroReviveCDLink[(lv_heroType)]);
        PlayerAddCooldown(lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)], lib15EF4C78_gv_nM_HeroReviveCDLink[(lv_heroType)], lv_reviveCooldown);
        autoD43BA88C_val = lv_heroType;
        if (autoD43BA88C_val == lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova) {
            TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait, true);
        }
        else {
        }
    }

    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(lp_heroUnit) == false)) {
        UnitSetPosition(lp_heroUnit, UnitGetPosition(lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)]), false);
    }

    return true;
}

void lib15EF4C78_gf_ReviveHeroInstantly2 (unit lp_heroUnit, bool lp_displayReviveMessage) {
    // Variable Declarations
    int lv_heroType;
    unit lv_reviveLocation;

    // Automatic Variable Declarations
    int auto908068AB_val;
    int autoAB432712_val;
    int auto2FD04D31_val;

    // Variable Initialization

    // Implementation
    lv_heroType = lib15EF4C78_gf_NM_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    auto908068AB_val = lv_heroType;
    if (auto908068AB_val == lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova) {
        TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait, false);
    }
    else {
    }
    libNtve_gf_PlayerRemoveCooldown(lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)], lib15EF4C78_gv_nM_HeroReviveCDLink[(lv_heroType)]);
    if ((UnitIsAlive(lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)]) == true)) {
        UnitIssueOrder(lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)], libNtve_gf_ReviveOrderWithNoTarget(lib15EF4C78_gv_nM_HeroReviveCommand[(lv_heroType)], lib15EF4C78_gv_nM_HeroRevivingUnit[(lv_heroType)]), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        UnitKill(lib15EF4C78_gv_nM_HeroReviverUnit[(lv_heroType)]);
    }
    else {
        lv_reviveLocation = lib15EF4C78_gf_NM_FindPrimaryTownHall(lib15EF4C78_gv_nM_HeroRevivePlayer[(lv_heroType)]);
        if ((lv_reviveLocation != null)) {
            UnitSetPosition(lp_heroUnit, UnitGetPosition(lv_reviveLocation), false);
        }

        UnitRevive(lib15EF4C78_gv_nM_HeroRevivingUnit[(lv_heroType)]);
        autoAB432712_val = lv_heroType;
        if (autoAB432712_val == lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova) {
            UnitSetPropertyFixed(lib15EF4C78_gv_nM_HeroRevivingUnit[(lv_heroType)], c_unitPropLife, UnitGetPropertyFixed(lib15EF4C78_gv_nM_HeroRevivingUnit[(lv_heroType)], c_unitPropLifeMax, c_unitPropCurrent));
        }
        else {
        }
    }
    if ((lp_displayReviveMessage == true)) {
        auto2FD04D31_val = lv_heroType;
        if (auto2FD04D31_val == lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova) {
        }
        else {
        }
    }

}

void lib15EF4C78_gf_EnableDisableHeroReviveSystem (bool lp_enableDisable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaWarpOut", 1);
        TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNova, true);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaWarpOut", 0);
        TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNova, false);
        TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait, false);
    }
}

void lib15EF4C78_gf_NM_HeroRevive (int lp_heroType) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    unitgroup autoC48CCAB6_g;
    int autoC48CCAB6_u;
    unit autoC48CCAB6_var;

    // Variable Initialization

    // Implementation
    lv_heroIndex = (lp_heroType);
    if ((libNtve_gf_UnitIsPaused(lib15EF4C78_gv_nM_HeroReviverUnit[lv_heroIndex]) == false) && (UnitOrderIsValid(lib15EF4C78_gv_nM_HeroReviverUnit[lv_heroIndex], libNtve_gf_ReviveOrderWithNoTarget(lib15EF4C78_gv_nM_HeroReviveCommand[lv_heroIndex], lib15EF4C78_gv_nM_HeroRevivingUnit[lv_heroIndex])) == true)) {
        UnitIssueOrder(lib15EF4C78_gv_nM_HeroReviverUnit[lv_heroIndex], libNtve_gf_ReviveOrderWithNoTarget(lib15EF4C78_gv_nM_HeroReviveCommand[lv_heroIndex], lib15EF4C78_gv_nM_HeroRevivingUnit[lv_heroIndex]), c_orderQueueReplace);
    }
    else {
        UnitRevive(lib15EF4C78_gv_nM_HeroRevivingUnit[lv_heroIndex]);
        UnitSetPropertyFixed(lib15EF4C78_gv_nM_HeroRevivingUnit[lv_heroIndex], c_unitPropLifePercent, 100.0);
    }
    Wait(0.125, c_timeGame);
    if ((lib15EF4C78_gv_nM_HeroRevivePlayer[lv_heroIndex] == 1)) {
        autoC48CCAB6_g = UnitGroupSelected(1);
        autoC48CCAB6_u = UnitGroupCount(autoC48CCAB6_g, c_unitCountAll);
        for (;; autoC48CCAB6_u -= 1) {
            autoC48CCAB6_var = UnitGroupUnitFromEnd(autoC48CCAB6_g, autoC48CCAB6_u);
            if (autoC48CCAB6_var == null) { break; }
            if ((autoC48CCAB6_var == lib15EF4C78_gv_nM_HeroReviverUnit[lv_heroIndex])) {
                UnitSelect(lib15EF4C78_gv_nM_HeroRevivingUnit[lv_heroIndex], lib15EF4C78_gv_nM_HeroRevivePlayer[lv_heroIndex], true);
            }

        }
    }

    UnitKill(lib15EF4C78_gv_nM_HeroReviverUnit[lv_heroIndex]);
}

int lib15EF4C78_gf_NM_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unitType == "AP_NovaHero"))) {
        return lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova;
    }
    return lib15EF4C78_ge_NM_HeroType_NM_HeroType_None;
}

unit lib15EF4C78_gf_NM_FindPrimaryTownHall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
}

void lib15EF4C78_gf_AP_Player_clearZerglingRespawnChargesFromPlayer (int lp_player) {
    // Variable Declarations
    unit lv_primaryStructure;

    // Automatic Variable Declarations
    const int autoC4A94191_n = 1000;
    int autoC4A94191_i;

    // Variable Initialization

    // Implementation
    lv_primaryStructure = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    UnitAbilityAdd(lv_primaryStructure, "AP_ZerglingRespawnCounterDeplete");
    for (autoC4A94191_i = 1; autoC4A94191_i <= autoC4A94191_n; autoC4A94191_i += 1) {
        UnitIssueOrder(lv_primaryStructure, Order(AbilityCommand("AP_ZerglingRespawnCounterDeplete", 0)), c_orderQueueAddToFront);
    }
    UnitAbilityRemove(lv_primaryStructure, "AP_ZerglingRespawnCounterDeplete");
}

void lib15EF4C78_gf_SetSpearofAdunEnergy (int lp_player, fixed lp_energy, int lp_type) {
    // Automatic Variable Declarations
    int auto3B104957_val;

    // Implementation
    auto3B104957_val = lp_type;
    if (auto3B104957_val == lib15EF4C78_ge_SpearofAdunEnergyType_Absolute) {
        UnitSetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitPropEnergy, lp_energy);
    }
    else if (auto3B104957_val == lib15EF4C78_ge_SpearofAdunEnergyType_Percent) {
        UnitSetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitPropEnergyPercent, lp_energy);
    }
    else if (auto3B104957_val == lib15EF4C78_ge_SpearofAdunEnergyType_Regeneration) {
        UnitSetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitPropEnergyRegen, lp_energy);
    }
    else {
    }
    if ((lib15EF4C78_gf_AP_Player_isPlayerInCinematicMode(lp_player) == true) && (lp_type != lib15EF4C78_ge_SpearofAdunEnergyType_Regeneration)) {
        lib15EF4C78_gv_pM_CinematicModeSoAEnergy[lp_player] = UnitGetPropertyFixed(lib15EF4C78_gv_sOA_CasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent);
    }

}

fixed lib15EF4C78_gf_SpearofAdunEnergy (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    int autoF2D84762_val;

    // Implementation
    autoF2D84762_val = lp_type;
    if (autoF2D84762_val == lib15EF4C78_ge_SpearofAdunEnergyType_Percent) {
        return UnitGetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent);
    }
    else if (autoF2D84762_val == lib15EF4C78_ge_SpearofAdunEnergyType_Absolute) {
        return UnitGetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent);
    }
    else if (autoF2D84762_val == lib15EF4C78_ge_SpearofAdunEnergyType_Regeneration) {
        return UnitGetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitPropEnergyRegen, c_unitPropCurrent);
    }
    else {
    }
    return 0.0;
}

void lib15EF4C78_gf_PauseUnpauseSpearofAdunCooldowns (int lp_player, bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pauseUnpause == true)) {
        lib15EF4C78_gv_pM_SoAPaused[lp_player] = true;
        if ((UnitHasBehavior2(lib15EF4C78_gv_pM_SoAUnit[lp_player], "SOAAbilityDisable") == false)) {
            UnitBehaviorAdd(lib15EF4C78_gv_pM_SoAUnit[lp_player], "AP_SOAAbilityDisable", lib15EF4C78_gv_pM_SoAUnit[lp_player], 1);
        }

    }
    else {
        lib15EF4C78_gv_pM_SoAPaused[lp_player] = false;
        UnitBehaviorRemove(lib15EF4C78_gv_pM_SoAUnit[lp_player], "AP_SOAAbilityDisable", 1);
    }
}

void lib15EF4C78_gf_PM_SoACreateUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_SoACaster", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    lib15EF4C78_gv_pM_SoAUnit[lp_player] = UnitLastCreated();
    UnitSetState(lib15EF4C78_gv_pM_SoAUnit[lp_player], c_unitStateSelectable, false);
    lib15EF4C78_gf_PU_GPSetUnit(lib15EF4C78_gv_pM_SoAUnit[lp_player]);
    lib15EF4C78_gf_PM_SoACasterUnitSet(lp_player, lib15EF4C78_gv_pM_SoAUnit[lp_player]);
    if ((lib15EF4C78_gv_pM_SoAPaused[lp_player] == true)) {
        UnitBehaviorAdd(lib15EF4C78_gv_pM_SoAUnit[lp_player], "AP_SOAAbilityDisable", lib15EF4C78_gv_pM_SoAUnit[lp_player], 1);
    }

    if ((lib15EF4C78_gf_AP_Player_isPlayerInCinematicMode(lp_player) == true)) {
        lib15EF4C78_gv_pM_CinematicModeSoAEnergy[lp_player] = lib15EF4C78_gf_SpearofAdunEnergy(lp_player, lib15EF4C78_ge_SpearofAdunEnergyType_Absolute);
    }

}

void lib15EF4C78_gf_AP_Player_CreateSoAUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gf_PM_SoACreateUnit(lp_player);
    lib15EF4C78_gv_pM_SoAEnabledForPlayer[lp_player] = true;
    lib15EF4C78_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    lib15EF4C78_gf_PU_GPVisibilityAutoUpdate(true, c_transitionDurationDefault);
    TriggerExecute(lib15EF4C78_gt_PM_SoAStatusWatch, true, false);
}

void lib15EF4C78_gf_AP_Player_CreateSoAAutonomousCasterUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_SoAAutonomousCaster", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    lib15EF4C78_gv_pM_SoAAutonomousCaster[lp_player] = UnitLastCreated();
    UnitSetState(lib15EF4C78_gv_pM_SoAAutonomousCaster[lp_player], c_unitStateSelectable, false);
    lib15EF4C78_gv_pM_SoAAutonomousCasterEnabledForPlayer[lp_player] = true;
    TriggerExecute(lib15EF4C78_gt_PM_SoAAutonomousStatusWatch, true, false);
}

bool lib15EF4C78_gf_AP_Player_isSoaEnabledForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_pM_SoAEnabledForPlayer[lp_player];
}

void lib15EF4C78_gf_SetScreenModeCampaign (int lp_mode, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_pM_ScreenMode == c_uiModeConsole) && (lp_mode != c_uiModeConsole)) {
        lib15EF4C78_gf_PU_GPVisibilityAutoUpdate(false, lp_duration);
    }
    else if ((lib15EF4C78_gv_pM_ScreenMode != c_uiModeConsole) && (lp_mode == c_uiModeConsole)) {
        lib15EF4C78_gf_PU_GPVisibilityAutoUpdate(true, lp_duration);
    }
    UISetMode(PlayerGroupAll(), lp_mode, lp_duration);
    lib15EF4C78_gv_pM_ScreenMode = lp_mode;
}

void lib15EF4C78_gf_CinematicModeCampaign (int lp_player, bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        lib15EF4C78_gv_pM_InCinematic = true;
    }
    else {
        lib15EF4C78_gv_pM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        lib15EF4C78_gf_PM_CinematicModeNoWait(lp_player, lp_onOff, lp_duration);
    }
    else {
        lib15EF4C78_gf_PM_CinematicModeInternal(lp_player, lp_onOff, lp_duration);
    }
}

trigger auto_lib15EF4C78_gf_PM_CinematicModeNoWait_Trigger = null;
int auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_player;
bool auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_onOff;
fixed auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_duration;

void lib15EF4C78_gf_PM_CinematicModeNoWait (int lp_player, bool lp_onOff, fixed lp_duration) {
    auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_player = lp_player;
    auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_lib15EF4C78_gf_PM_CinematicModeNoWait_Trigger == null) {
        auto_lib15EF4C78_gf_PM_CinematicModeNoWait_Trigger = TriggerCreate("auto_lib15EF4C78_gf_PM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_PM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_PM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_player;
    bool lp_onOff = auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_lib15EF4C78_gf_PM_CinematicModeNoWait_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gf_PM_CinematicModeInternal(lp_player, lp_onOff, lp_duration);
    return true;
}

void lib15EF4C78_gf_PM_CinematicModeInternal (int lp_player, bool lp_onOff, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        lib15EF4C78_gv_pM_CinematicModeSoAEnergy[lp_player] = lib15EF4C78_gf_SpearofAdunEnergy(lp_player, lib15EF4C78_ge_SpearofAdunEnergyType_Absolute);
        lib15EF4C78_gf_PU_GPVisibilityAutoUpdate(false, lp_duration);
        TriggerExecute(lib15EF4C78_gt_PM_SoATargetingForceOff, true, false);
        lib15EF4C78_gf_LotV_HideCampaignTeaching();
        if ((lp_duration != c_transitionDurationImmediate)) {
            UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        }

        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        lib15EF4C78_gf_PauseUnpauseSpearofAdunCooldowns(lp_player, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        libNtve_gf_GlobalCinematicSetting(true);
        lib15EF4C78_gv_pC_TimeMissionPaused = true;
    }
    else {
        lib15EF4C78_gf_PauseUnpauseSpearofAdunCooldowns(lp_player, false);
        lib15EF4C78_gf_SetSpearofAdunEnergy(lp_player, lib15EF4C78_gv_pM_CinematicModeSoAEnergy[lp_player], lib15EF4C78_ge_SpearofAdunEnergyType_Absolute);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        lib15EF4C78_gv_pC_TimeMissionPaused = false;
        lib15EF4C78_gf_PU_GPVisibilityAutoUpdate(true, c_transitionDurationDefault);
        lib15EF4C78_gf_LotV_ShowCampaignTeaching();
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void lib15EF4C78_gf_SpearofAdunTargetingModeExited (trigger t, int lp_exitType) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(lib15EF4C78_gv_pMC_SoATargetingEventExited, lib15EF4C78_gv_pMC_SoATargetingParamReason), (lp_exitType));
    TriggerAddEventGeneric(t, lib15EF4C78_gv_pMC_SoATargetingEventExited);
}

void lib15EF4C78_gf_PM_SoATargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    const int auto57B462D8_n = 16;
    int auto57B462D8_i;
    playergroup auto59BD2BF5_g;
    int auto59BD2BF5_var;
    playergroup autoE2FBFA84_g;
    int autoE2FBFA84_var;
    unitgroup auto98274F60_g;
    int auto98274F60_u;
    unit auto98274F60_var;

    // Variable Initialization

    // Implementation
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingCancel, true);
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingClearAll, true);
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingForceOff, true);
    while (!((lib15EF4C78_gv_pM_SoATargetingTransitioning == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((lib15EF4C78_gf_AP_Player_isPlayerInCinematicMode(lp_player) == true)) {
        return ;
    }

    lib15EF4C78_gv_pM_SoAExitInstantly = false;
    lib15EF4C78_gv_pM_SoAForceExit = false;
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    lib15EF4C78_gf_PU_TargetingSetCharges(lib15EF4C78_gv_pM_SoATargetingChargesTotal, lib15EF4C78_gv_pM_SoATargetingChargesTotal);
    if ((lib15EF4C78_gv_pM_SoATargetingOrder != null)) {
        UISetTargetingOrder(PlayerGroupSingle(lp_player), lib15EF4C78_gv_pU_GPCasterGroup, lib15EF4C78_gv_pM_SoATargetingOrder, false);
    }

    lib15EF4C78_gv_pM_SoATargetingCycling = false;
    lib15EF4C78_gv_pM_SoATargetingTransitioning = true;
    lib15EF4C78_gf_PU_TargetingUI_EnterTargetingMode(true, false);
    lib15EF4C78_gf_PU_TargetingSetInstructionText(lib15EF4C78_gf_PC_PerkTargetingText(lib15EF4C78_gv_pM_SoATargetingAbilityInstance, 1));
    lib15EF4C78_gf_PM_SetFogAlphaOverTime(lp_player, 100.0, 0.5);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupAll(), "AP_SOATargetingModeCamera");
    if ((lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true)) {
        libNtve_gf_PauseUnit(lib15EF4C78_gv_sOA_CasterUnit[lp_player], true);
        for (auto57B462D8_i = 1; auto57B462D8_i <= auto57B462D8_n; auto57B462D8_i += 1) {
            if ((lib15EF4C78_gv_pM_SoAForceExit == true)) {
                break;
            }

            auto59BD2BF5_g = PlayerGroupAll();
            auto59BD2BF5_var = -1;
            while (true) {
                auto59BD2BF5_var = PlayerGroupNextPlayer(auto59BD2BF5_g, auto59BD2BF5_var);
                if (auto59BD2BF5_var < 0) { break; }
                if ((TechTreeUpgradeCount(auto59BD2BF5_var, "AP_SOAUIFreezePrevent", c_techCountCompleteOnly) < 8)) {
                    TechTreeUpgradeAddLevel(auto59BD2BF5_var, "AP_SOAUIFreezePrevent", 1);
                }

            }
            GameSetGlobalTimeScale((GameGetGlobalTimeScale() * 0.8178));
            Wait(0.0625, c_timeGame);
        }
        autoE2FBFA84_g = PlayerGroupAll();
        autoE2FBFA84_var = -1;
        while (true) {
            autoE2FBFA84_var = PlayerGroupNextPlayer(autoE2FBFA84_g, autoE2FBFA84_var);
            if (autoE2FBFA84_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoE2FBFA84_var, "AP_SOAUIFreezePrevent", 8);
        }
        GameSetGlobalTimeScale(0.04);
        if ((lib15EF4C78_gv_pM_SoAForceExit == true)) {
            GameSetGlobalTimeScale(1.0);
            TriggerExecute(lib15EF4C78_gt_PM_SoATargetingForceOff, true, false);
            return ;
        }

        auto98274F60_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto98274F60_u = UnitGroupCount(auto98274F60_g, c_unitCountAll);
        for (;; auto98274F60_u -= 1) {
            auto98274F60_var = UnitGroupUnitFromEnd(auto98274F60_g, auto98274F60_u);
            if (auto98274F60_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto98274F60_var, "AnimSetPausedAll");
            libNtve_gf_SendActorMessageToUnit(auto98274F60_var, "Signal SOATargetingOn");
        }
        UnitPauseAll(true);
        lib15EF4C78_gf_PC_TimeMissionTemporarySet(true);
        lib15EF4C78_gf_PC_TimeAITemporarySet(true);
    }

    lib15EF4C78_gv_pM_SoATargetingTransitioning = false;
    lib15EF4C78_gv_soA_TargetingMode_TimesUsed += 1;
    TimerStart(lib15EF4C78_gv_soA_TargetingMode_Timer, c_timerDurationInfinite, false, c_timeReal);
}

void lib15EF4C78_gf_PM_SoATargetingModeExit (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto03B3AAB1_g;
    int auto03B3AAB1_u;
    unit auto03B3AAB1_var;
    const int auto2537729E_n = 8;
    int auto2537729E_i;
    playergroup auto28AFC8F8_g;
    int auto28AFC8F8_var;
    playergroup auto6DAE7815_g;
    int auto6DAE7815_var;
    unitgroup autoFA9B0798_g;
    int autoFA9B0798_u;
    unit autoFA9B0798_var;

    // Implementation
    if ((lib15EF4C78_gv_pM_SoAExitInstantly == false)) {
        while (!((lib15EF4C78_gv_pM_SoATargetingTransitioning == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    lib15EF4C78_gv_pM_SoATargetingTransitioning = true;
    UISetDragSelectEnabled(PlayerGroupAll(), true);
    if ((lib15EF4C78_gv_pM_SoAExitInstantly == false)) {
        lib15EF4C78_gf_PM_ResetFogAlphaOverTime(lp_player, 0.5);
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
        lib15EF4C78_gf_PU_TargetingUI_EnterTargetingMode(false, false);
    }
    else {
        VisResetFoWAlpha(lp_player);
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
        lib15EF4C78_gf_PU_TargetingUI_EnterTargetingMode(false, true);
    }
    CameraSetData(PlayerGroupAll(), "Dflt");
    libNtve_gf_RestoreUnitSelection(1);
    if ((lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true)) {
        auto03B3AAB1_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto03B3AAB1_u = UnitGroupCount(auto03B3AAB1_g, c_unitCountAll);
        for (;; auto03B3AAB1_u -= 1) {
            auto03B3AAB1_var = UnitGroupUnitFromEnd(auto03B3AAB1_g, auto03B3AAB1_u);
            if (auto03B3AAB1_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto03B3AAB1_var, "Signal SOATargetingOff");
            libNtve_gf_SendActorMessageToUnit(auto03B3AAB1_var, "AnimSetPausedAll 0");
        }
        UnitPauseAll(false);
        lib15EF4C78_gf_PC_TimeAITemporaryRestore();
        lib15EF4C78_gf_PC_TimeMissionTemporaryRestore();
        if ((lib15EF4C78_gv_pM_SoAExitInstantly == false)) {
            for (auto2537729E_i = 1; auto2537729E_i <= auto2537729E_n; auto2537729E_i += 1) {
                Wait(0.0625, c_timeGame);
                GameSetGlobalTimeScale((GameGetGlobalTimeScale() * 1.4953));
                auto28AFC8F8_g = PlayerGroupAll();
                auto28AFC8F8_var = -1;
                while (true) {
                    auto28AFC8F8_var = PlayerGroupNextPlayer(auto28AFC8F8_g, auto28AFC8F8_var);
                    if (auto28AFC8F8_var < 0) { break; }
                    if ((TechTreeUpgradeCount(auto28AFC8F8_var, "AP_SOAUIFreezePrevent", c_techCountCompleteOnly) > 0)) {
                        TechTreeUpgradeAddLevel(auto28AFC8F8_var, "AP_SOAUIFreezePrevent", -1);
                    }

                }
            }
        }

        GameSetGlobalTimeScale(1.0);
        auto6DAE7815_g = PlayerGroupAll();
        auto6DAE7815_var = -1;
        while (true) {
            auto6DAE7815_var = PlayerGroupNextPlayer(auto6DAE7815_g, auto6DAE7815_var);
            if (auto6DAE7815_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto6DAE7815_var, "AP_SOAUIFreezePrevent", 0);
        }
        autoFA9B0798_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFA9B0798_u = UnitGroupCount(autoFA9B0798_g, c_unitCountAll);
        for (;; autoFA9B0798_u -= 1) {
            autoFA9B0798_var = UnitGroupUnitFromEnd(autoFA9B0798_g, autoFA9B0798_u);
            if (autoFA9B0798_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoFA9B0798_var, "AnimSetPausedAll 0");
        }
    }

    lib15EF4C78_gv_pM_SoATargetingActivateAbility = null;
    lib15EF4C78_gv_pM_SoATargetingTransitioning = false;
    lib15EF4C78_gv_soA_TargetingMode_TimeSpent += FixedToInt(TimerGetElapsed(lib15EF4C78_gv_soA_TargetingMode_Timer));
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingForceOff, false);
}

void lib15EF4C78_gf_PM_SoATargetingCleanupActorsAndUnits () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto5109D469_ae = lib15EF4C78_gv_pMC_SOATARGETCOUNTMAX;
    const int auto5109D469_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto5109D469_ai >= 0 && lv_index <= auto5109D469_ae) || (auto5109D469_ai < 0 && lv_index >= auto5109D469_ae) ) ; lv_index += auto5109D469_ai ) {
        if ((lib15EF4C78_gv_pM_SoATargetingActors[lv_index] != null)) {
            ActorSend(lib15EF4C78_gv_pM_SoATargetingActors[lv_index], "Signal Destroy");
            lib15EF4C78_gv_pM_SoATargetingActors[lv_index] = null;
        }

        if ((lib15EF4C78_gv_pM_SoATargetingUnit[lv_index] != null)) {
            UnitRemove(lib15EF4C78_gv_pM_SoATargetingUnit[lv_index]);
            lib15EF4C78_gv_pM_SoATargetingUnit[lv_index] = null;
        }

    }
}

void lib15EF4C78_gf_PM_SoACasterUnitSet (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gv_sOA_CasterUnit[lp_player] = lp_unit;
    lib15EF4C78_gv_pM_SoACasterGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(lp_unit);
}

bool lib15EF4C78_gf_PM_SoATargetingPauseEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return true;
}

trigger auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_Trigger = null;
int auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_player;
fixed auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_targetAlpha;
fixed auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_duration;

void lib15EF4C78_gf_PM_SetFogAlphaOverTime (int lp_player, fixed lp_targetAlpha, fixed lp_duration) {
    auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_player = lp_player;
    auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_duration = lp_duration;

    if (auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_Trigger == null) {
        auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_Trigger = TriggerCreate("auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_player;
    fixed lp_targetAlpha = auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_lib15EF4C78_gf_PM_SetFogAlphaOverTime_lp_duration;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Automatic Variable Declarations
    int auto2D7B382E_n;
    int auto2D7B382E_i;

    // Variable Initialization

    // Implementation
    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(1);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    auto2D7B382E_n = lv_increments;
    for (auto2D7B382E_i = 1; auto2D7B382E_i <= auto2D7B382E_n; auto2D7B382E_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_Trigger = null;
int auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_lp_player;
fixed auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_lp_duration;

void lib15EF4C78_gf_PM_ResetFogAlphaOverTime (int lp_player, fixed lp_duration) {
    auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_lp_player = lp_player;
    auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_lp_duration = lp_duration;

    if (auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_Trigger == null) {
        auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_Trigger = TriggerCreate("auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_lp_player;
    fixed lp_duration = auto_lib15EF4C78_gf_PM_ResetFogAlphaOverTime_lp_duration;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Automatic Variable Declarations
    int auto5C07AF80_n;
    int auto5C07AF80_i;

    // Variable Initialization

    // Implementation
    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto5C07AF80_n = lv_increments;
    for (auto5C07AF80_i = 1; auto5C07AF80_i <= auto5C07AF80_n; auto5C07AF80_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

string lib15EF4C78_gf_SpearofAdunTargetingModeAbility () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_pM_SoATargetingAbilityInstance;
}

void lib15EF4C78_gf_CreateOrbitalStrikeTarget (int lp_targetIndex, point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_targetIndex > 5)) {
        return ;
    }

    lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lp_targetIndex] = lp_targetPoint;
    libNtve_gf_CreateActorAtPoint("AP_SOAOrbitalStrikeTargetModel", lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lp_targetIndex]);
    lib15EF4C78_gv_pM_SoAOrbitalStrike_Actors[lp_targetIndex] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("AP_SOATargetingModeConfirmationSound", lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lp_targetIndex]);
}

trigger auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_Trigger = null;
int auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_lp_player;
int auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_lp_targetIndex;

void lib15EF4C78_gf_FireOrbitalStrikeAtTarget (int lp_player, int lp_targetIndex) {
    auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_lp_player = lp_player;
    auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_lp_targetIndex = lp_targetIndex;

    if (auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_Trigger == null) {
        auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_Trigger = TriggerCreate("auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_lp_player;
    int lp_targetIndex = auto_lib15EF4C78_gf_FireOrbitalStrikeAtTarget_lp_targetIndex;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_targetIndex > 5) || (lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lp_targetIndex] == null))) {
        return true;
    }

    UnitCreateEffectPoint(lib15EF4C78_gv_sOA_CasterUnit[lp_player], "AP_SOAOrbitalStrikeCP", lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lp_targetIndex]);
    lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lp_targetIndex] = null;
    ActorSend(lib15EF4C78_gv_pM_SoAOrbitalStrike_Actors[lp_targetIndex], "Signal Destroy");
    return true;
}

void lib15EF4C78_gf_CleanUpOrbitalStrikeTargets () {
    // Variable Declarations
    int lv_indexActor;

    // Automatic Variable Declarations
    const int auto4652D7E3_ae = 5;
    const int auto4652D7E3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_indexActor = 1;
    for ( ; ( (auto4652D7E3_ai >= 0 && lv_indexActor <= auto4652D7E3_ae) || (auto4652D7E3_ai < 0 && lv_indexActor >= auto4652D7E3_ae) ) ; lv_indexActor += auto4652D7E3_ai ) {
        if ((lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lv_indexActor] != null)) {
            lib15EF4C78_gv_pM_SoAOrbitalStrike_Points[lv_indexActor] = null;
            ActorSend(lib15EF4C78_gv_pM_SoAOrbitalStrike_Actors[lv_indexActor], "Signal Destroy");
        }

    }
}

void lib15EF4C78_gf_EnterOrbitalStrikeTargetingMode (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lib15EF4C78_gv_sOA_CasterUnit[lp_player], Order(AbilityCommand("SOAOrbitalStrikeActivate", 0)), c_orderQueueReplace);
}

void lib15EF4C78_gf_CreateGravitonBombTarget (int lp_targetIndex, point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_targetIndex > 3)) {
        return ;
    }

    lib15EF4C78_gv_sOA_GravitonBomb_Points[lp_targetIndex] = lp_targetPoint;
    libNtve_gf_CreateActorAtPoint("AP_SOAGravitonBombTargetModel", lib15EF4C78_gv_sOA_GravitonBomb_Points[lp_targetIndex]);
    lib15EF4C78_gv_sOA_GravitonBomb_Actors[lp_targetIndex] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("AP_SOAGravitonBombTargetSound", lib15EF4C78_gv_sOA_GravitonBomb_Points[lp_targetIndex]);
}

trigger auto_lib15EF4C78_gf_FireGravitonBombAtTarget_Trigger = null;
int auto_lib15EF4C78_gf_FireGravitonBombAtTarget_lp_player;
int auto_lib15EF4C78_gf_FireGravitonBombAtTarget_lp_targetIndex;

void lib15EF4C78_gf_FireGravitonBombAtTarget (int lp_player, int lp_targetIndex) {
    auto_lib15EF4C78_gf_FireGravitonBombAtTarget_lp_player = lp_player;
    auto_lib15EF4C78_gf_FireGravitonBombAtTarget_lp_targetIndex = lp_targetIndex;

    if (auto_lib15EF4C78_gf_FireGravitonBombAtTarget_Trigger == null) {
        auto_lib15EF4C78_gf_FireGravitonBombAtTarget_Trigger = TriggerCreate("auto_lib15EF4C78_gf_FireGravitonBombAtTarget_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_FireGravitonBombAtTarget_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_FireGravitonBombAtTarget_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_FireGravitonBombAtTarget_lp_player;
    int lp_targetIndex = auto_lib15EF4C78_gf_FireGravitonBombAtTarget_lp_targetIndex;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_targetIndex > 3) || (lib15EF4C78_gv_sOA_GravitonBomb_Points[lp_targetIndex] == null))) {
        return true;
    }

    UnitCreateEffectPoint(lib15EF4C78_gv_sOA_CasterUnit[lp_player], "AP_SOAGravitonBombLM", lib15EF4C78_gv_sOA_GravitonBomb_Points[lp_targetIndex]);
    lib15EF4C78_gv_sOA_GravitonBomb_Points[lp_targetIndex] = null;
    Wait(0.125, c_timeGame);
    ActorSend(lib15EF4C78_gv_sOA_GravitonBomb_Actors[lp_targetIndex], "Signal Destroy");
    return true;
}

void lib15EF4C78_gf_EnterGravitonBombTargetingMode (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lib15EF4C78_gv_sOA_CasterUnit[lp_player], Order(AbilityCommand("SOAGravitonBombActivate", 0)), c_orderQueueReplace);
}

void lib15EF4C78_gf_FireSingleThermalLanceShot (int lp_player, point lp_originPoint, point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "AP_SOAThermalLanceTargeter", c_unitCreateIgnorePlacement, lp_player, lp_originPoint, lp_targetPoint);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("AP_SOAThermalLanceExecute", 0), lp_targetPoint), c_orderQueueReplace);
}

void lib15EF4C78_gf_SOA_TimeFreezeVisual (int lp_player, fixed lp_cameraPOSX, fixed lp_cameraPOSY) {
    // Automatic Variable Declarations
    // Implementation
    PlayerCreateEffectPoint(lp_player, "AP_SOATimeFreezeVisual", Point(lp_cameraPOSX, lp_cameraPOSY));
}

void lib15EF4C78_gf_PU_GPSetUnit (unit lp_casterUnit) {
    // Automatic Variable Declarations
    unitgroup autoBF0B8EC7_g;
    int autoBF0B8EC7_u;
    unit autoBF0B8EC7_var;

    // Implementation
    if ((lib15EF4C78_gv_pU_GPPanel == c_invalidDialogControlId)) {
        TriggerExecute(lib15EF4C78_gt_PU_GPInit, true, true);
    }

    lib15EF4C78_gv_pU_GPUnit = lp_casterUnit;
    autoBF0B8EC7_g = lib15EF4C78_gv_pU_GPCasterGroup;
    autoBF0B8EC7_u = UnitGroupCount(autoBF0B8EC7_g, c_unitCountAll);
    for (;; autoBF0B8EC7_u -= 1) {
        autoBF0B8EC7_var = UnitGroupUnitFromEnd(autoBF0B8EC7_g, autoBF0B8EC7_u);
        if (autoBF0B8EC7_var == null) { break; }
        UnitGroupRemove(lib15EF4C78_gv_pU_GPCasterGroup, autoBF0B8EC7_var);
    }
    UnitGroupAdd(lib15EF4C78_gv_pU_GPCasterGroup, lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(lib15EF4C78_gv_pU_GPCmdPanel, lib15EF4C78_gv_pU_GPCasterGroup, PlayerGroupAll());
    lib15EF4C78_gf_PU_GPVitalsUpdate();
}

void lib15EF4C78_gf_ShowSpearofAdunUI (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gv_pU_GPRequestedVisible = (lp_showHide == true);
    lib15EF4C78_gf_PU_GPVisibilitySet(lp_showHide, lp_duration);
}

void lib15EF4C78_gf_PU_GPVisibilityAutoUpdate (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lib15EF4C78_gv_pU_GPRequestedVisible == false) && (lp_showHide == true)))) {
        return ;
    }

    lib15EF4C78_gf_PU_GPVisibilitySet(lp_showHide, lp_duration);
}

void lib15EF4C78_gf_PU_GPVisibilitySet (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_pU_GPPanel == c_invalidDialogControlId)) {
        TriggerExecute(lib15EF4C78_gt_PU_GPInit, true, true);
    }

    if ((lp_showHide == true)) {
        lib15EF4C78_gv_pU_GPActuallyVisible = true;
        DialogControlSetVisible(lib15EF4C78_gv_pU_GPPanel, PlayerGroupAll(), lp_showHide);
        DialogControlSetVisible(lib15EF4C78_gv_pU_GPHolder, PlayerGroupAll(), lp_showHide);
        libNtve_gf_SetDialogItemCutscene(lib15EF4C78_gv_pU_GPCutscene, "Cutscenes\\AP\\ui_soamission.sc2cutscene", PlayerGroupAll());
        CutsceneSetTime(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyGlassScene), 0);
        CutsceneSetTime(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyBarScene), 0);
        CutsceneSetTime(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPCutscene), 0);
        CutscenePlay(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPCutscene));
        DialogControlSetVisible(lib15EF4C78_gv_pU_GPCutscene, PlayerGroupAll(), true);
        if ((lp_duration == c_transitionDurationImmediate)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPCutscene), "LoopStart");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyGlassScene), "LoopStart");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyBarScene), "LoopStart");
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPCmdPanel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPEnergyLabel, PlayerGroupAll(), lp_showHide);
        }
        else {
            lib15EF4C78_gv_pU_GPWaitingForBirth = true;
            TriggerEnable(lib15EF4C78_gt_PU_GPBirthFinished, true);
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPCmdPanel, PlayerGroupAll(), false);
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPEnergyLabel, PlayerGroupAll(), false);
        }
    }
    else {
        lib15EF4C78_gv_pU_GPActuallyVisible = false;
        if ((lp_duration == c_transitionDurationImmediate)) {
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPPanel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPHolder, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPCmdPanel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(lib15EF4C78_gv_pU_GPEnergyLabel, PlayerGroupAll(), lp_showHide);
        }
        else {
            TriggerEnable(lib15EF4C78_gt_PU_GPDeathRemove2D, true);
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPCutscene), "Death");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyBarScene), "Death");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyGlassScene), "Death");
        }
    }
}

void lib15EF4C78_gf_TurnSpearofAdunSlotHighlightOnOff (int lp_slot, bool lp_onOff) {
    // Variable Declarations
    string lv_indexPerkGroup;
    string lv_indexPerk;
    abilcmd lv_indexCommand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        DialogControlSetVisible(lib15EF4C78_gv_pU_GPAbilityArrows[lp_slot], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_pU_GPAbilityArrows[lp_slot], PlayerGroupAll(), false);
    }
}

void lib15EF4C78_gf_PU_GPVitalsUpdate () {
    // Variable Declarations
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(lib15EF4C78_gv_pU_GPUnit, c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == lib15EF4C78_gv_pU_GPLastEnergyUpdate)) {
        return ;
    }

    lib15EF4C78_gv_pU_GPLastEnergyUpdate = lv_energyFloored;
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_pU_GPEnergyLabel, IntToText(FixedToInt(lv_energyFloored)), PlayerGroupAll());
    DialogControlSendAnimationEvent(lib15EF4C78_gv_pU_GPEnergyBarScene, PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(lib15EF4C78_gv_pU_GPEnergyBarScene, PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(lib15EF4C78_gv_pU_GPUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(lib15EF4C78_gv_pU_GPEnergyBarScene, PlayerGroupAll(), "SetEnergyPause");
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_pU_GPUnit, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        lib15EF4C78_gf_PU_GPEnergyHighlight(true);
    }
    else {
        lib15EF4C78_gf_PU_GPEnergyHighlight(false);
    }
}

void lib15EF4C78_gf_PU_GPEnergyHighlight (bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        lib15EF4C78_gv_pU_GPEnergyHighlighting = true;
        if ((lib15EF4C78_gv_pU_GPWaitingForBirth == false) && (lib15EF4C78_gv_pU_GPActuallyVisible == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyGlassScene), "PowerUp");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyBarScene), "PowerUp");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPCutscene), "PowerUp");
        }

    }
    else {
        if ((lib15EF4C78_gv_pU_GPEnergyHighlighting == true)) {
            if ((lib15EF4C78_gv_pU_GPWaitingForBirth == false) && (lib15EF4C78_gv_pU_GPActuallyVisible == true)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyGlassScene), "PowerDown");
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPEnergyBarScene), "PowerDown");
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib15EF4C78_gv_pU_GPCutscene), "PowerDown");
            }

            lib15EF4C78_gv_pU_GPEnergyHighlighting = false;
        }

    }
}

trigger auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_Trigger = null;
string auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_lp_abilityIcon;
fixed auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_lp_duration;

void lib15EF4C78_gf_PU_SoAAbilityTimerCreate (string lp_abilityIcon, fixed lp_duration) {
    auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_lp_abilityIcon = lp_abilityIcon;
    auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_lp_duration = lp_duration;

    if (auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_Trigger == null) {
        auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_Trigger = TriggerCreate("auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_TriggerFunc (bool testConds, bool runActions) {
    string lp_abilityIcon = auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_lp_abilityIcon;
    fixed lp_duration = auto_lib15EF4C78_gf_PU_SoAAbilityTimerCreate_lp_duration;

    // Variable Declarations
    fixed lv_updatewidth;
    int lv_startwidth;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(260, 100, c_anchorCenter, 0, -450, true);
    lib15EF4C78_gv_sOA_TimeFreezeUI = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_startwidth = 150;
    lv_updatewidth = 150.0;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorLeft, 26, 3, StringToText(""), lp_abilityIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_startwidth, 47, c_anchorLeft, 79, 3, StringToText(""), "", c_triggerImageTypeNormal, false, ColorWithAlpha(0.00, 0.00, 62.75, 74.90), c_triggerBlendModeNormal);
    while ((DialogControlGetWidth(DialogControlLastCreated(), 1) > 0)) {
        Wait(0.0625, c_timeGame);
        lv_updatewidth -= ((lv_startwidth/lp_duration)*0.0625);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), FixedToInt(lv_updatewidth), 47);
    }
    DialogDestroy(lib15EF4C78_gv_sOA_TimeFreezeUI);
    return true;
}

void lib15EF4C78_gf_PU_TargetingUI_EnterTargetingMode (bool lp_showHide, bool lp_instant) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib15EF4C78_gf_PU_TargetingCreate();
    if ((lp_showHide == true)) {
        lib15EF4C78_gf_SetScreenModeCampaign(c_uiModeFullscreen, 0.35);
        DialogSetVisible(lib15EF4C78_gv_pU_TargetingOverlayDialog, PlayerGroupAll(), true);
        DialogSetVisible(lib15EF4C78_gv_pU_TargetingAbilityDialog, PlayerGroupAll(), true);
        libNtve_gf_PlayAnimation(ActorFromDialogControl(lib15EF4C78_gv_pU_TargetingOverlayPortrait), c_animNameDefault, "Birth", 0, 0.0);
        TriggerEnable(lib15EF4C78_gt_PU_TargetingCancelButtonUsed, true);
        lib15EF4C78_gv_pU_TargetingActive = true;
    }
    else {
        lib15EF4C78_gv_pU_TargetingCurrentCharges = 0;
        if ((lp_instant == false)) {
            lib15EF4C78_gf_SetScreenModeCampaign(c_uiModeConsole, 0.25);
        }

        TriggerEnable(lib15EF4C78_gt_PU_TargetingCancelButtonUsed, false);
        DialogSetVisible(lib15EF4C78_gv_pU_TargetingOverlayDialog, PlayerGroupAll(), false);
        DialogSetVisible(lib15EF4C78_gv_pU_TargetingAbilityDialog, PlayerGroupAll(), false);
        lib15EF4C78_gv_pU_TargetingActive = false;
    }
}

void lib15EF4C78_gf_PU_TargetingCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_pU_TargetingAbilityDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 150, c_anchorBottom, 3, 160, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    lib15EF4C78_gv_pU_TargetingAbilityDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AP_LotV_GameUI/SoATargetingUITemplate");
    lib15EF4C78_gv_pU_TargetingPanel = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingPanel, c_triggerControlTypeLabel, "Instructions");
    lib15EF4C78_gv_pU_TargetingInstructionsLabel = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingPanel, c_triggerControlTypeButton, "CancelButton");
    lib15EF4C78_gv_pU_TargetingCancelButton = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingPanel, c_triggerControlTypePanel, "ChargesContainer");
    lib15EF4C78_gv_pU_TargetingChargesPanel = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge1");
    lib15EF4C78_gv_pU_TargetingChargeSinglePanel[1] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge2");
    lib15EF4C78_gv_pU_TargetingChargeSinglePanel[2] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge3");
    lib15EF4C78_gv_pU_TargetingChargeSinglePanel[3] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge4");
    lib15EF4C78_gv_pU_TargetingChargeSinglePanel[4] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge5");
    lib15EF4C78_gv_pU_TargetingChargeSinglePanel[5] = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib15EF4C78_gv_pU_TargetingOverlayDialog = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePortrait, "AP_LotV_GameUI/SoAOverlayTemplate");
    PortraitUseTransition(PortraitGetTriggerControl(DialogControlLastCreated()), false);
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "AP_SOA_Calldown_UI", PlayerGroupAll());
    lib15EF4C78_gv_pU_TargetingOverlayPortrait = DialogControlLastCreated();
}

void lib15EF4C78_gf_PU_TargetingSetCharges (int lp_current, int lp_max) {
    // Variable Declarations
    int lv_indexCharge;

    // Automatic Variable Declarations
    int autoF213B88A_ae;
    const int autoF213B88A_ai = 1;
    int auto7B64BEED_ae;
    const int auto7B64BEED_ai = 1;
    const int auto62864147_ae = lib15EF4C78_gv_pMC_SOATARGETCOUNTMAX;
    const int auto62864147_ai = 1;

    // Variable Initialization

    // Implementation
    lib15EF4C78_gf_PU_TargetingCreate();
    autoF213B88A_ae = lp_current;
    lv_indexCharge = 1;
    for ( ; ( (autoF213B88A_ai >= 0 && lv_indexCharge <= autoF213B88A_ae) || (autoF213B88A_ai < 0 && lv_indexCharge >= autoF213B88A_ae) ) ; lv_indexCharge += autoF213B88A_ai ) {
        if ((lib15EF4C78_gv_pU_TargetingCurrentCharges < lv_indexCharge)) {
            DialogControlSetVisible(lib15EF4C78_gv_pU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)], PlayerGroupAll(), false);
            DialogControlSetVisible(lib15EF4C78_gv_pU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)], PlayerGroupAll(), true);
        }

    }
    auto7B64BEED_ae = lp_max;
    lv_indexCharge = (lp_current+1);
    for ( ; ( (auto7B64BEED_ai >= 0 && lv_indexCharge <= auto7B64BEED_ae) || (auto7B64BEED_ai < 0 && lv_indexCharge >= auto7B64BEED_ae) ) ; lv_indexCharge += auto7B64BEED_ai ) {
        if ((lv_indexCharge <= lib15EF4C78_gv_pU_TargetingCurrentCharges)) {
            DialogControlSendAnimationEvent(lib15EF4C78_gv_pU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)], PlayerGroupAll(), "Consume");
        }

    }
    lv_indexCharge = (lp_max+1);
    for ( ; ( (auto62864147_ai >= 0 && lv_indexCharge <= auto62864147_ae) || (auto62864147_ai < 0 && lv_indexCharge >= auto62864147_ae) ) ; lv_indexCharge += auto62864147_ai ) {
        DialogControlSetVisible(lib15EF4C78_gv_pU_TargetingChargeSinglePanel[lv_indexCharge], PlayerGroupAll(), false);
    }
    if ((lp_max == 3)) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_pU_TargetingChargesPanel, PlayerGroupAll(), "ThreeCharges");
    }
    else {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_pU_TargetingChargesPanel, PlayerGroupAll(), "FiveCharges");
    }
    lib15EF4C78_gv_pU_TargetingCurrentCharges = lp_current;
}

void lib15EF4C78_gf_PU_TargetingSetInstructionText (text lp_instructions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_pU_TargetingInstructionsLabel, lp_instructions, PlayerGroupAll());
}

void lib15EF4C78_gf_PU_TargetingCancel (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib15EF4C78_gv_pUC_TargetingEventCancel);
}

bool lib15EF4C78_gf_TargetingUIisActive () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_pU_TargetingActive;
}

void lib15EF4C78_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    AITimePause(lp_pauseUnpause);
    lib15EF4C78_gv_pC_TimeAIPaused = lp_pauseUnpause;
}

void lib15EF4C78_gf_PC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lib15EF4C78_gv_pC_TimeAIOverrideCount += 1;
    lv_originalPauseState = lib15EF4C78_gv_pC_TimeAIPaused;
    lib15EF4C78_gf_PauseAITimeCampaign(lp_pauseUnpause);
    lib15EF4C78_gv_pC_TimeAIPaused = lv_originalPauseState;
}

void lib15EF4C78_gf_PC_TimeAITemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gv_pC_TimeAIOverrideCount -= 1;
    if ((lib15EF4C78_gv_pC_TimeAIOverrideCount <= 0)) {
        lib15EF4C78_gf_PauseAITimeCampaign(lib15EF4C78_gv_pC_TimeAIPaused);
    }

}

void lib15EF4C78_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    lib15EF4C78_gv_pC_TimeMissionPaused = lp_pauseUnpause;
}

void lib15EF4C78_gf_PC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = lib15EF4C78_gv_pC_TimeMissionPaused;
    lib15EF4C78_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    lib15EF4C78_gv_pC_TimeMissionPaused = lv_originalPauseState;
}

void lib15EF4C78_gf_PC_TimeMissionTemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gf_PauseMissionTimeCampaign(lib15EF4C78_gv_pC_TimeMissionPaused);
}

text lib15EF4C78_gf_PC_PerkTargetingText (string lp_campaignPerk, int lp_stage) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("AP_CampaignPerk", lp_campaignPerk, "TargetInstructions", lp_stage);
}

int lib15EF4C78_gf_AP_Player_OnPrimaryTownHallDeath__getPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__player;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallDeath__getUnit () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__unit;
}

int lib15EF4C78_gf_AP_Player_OnPrimaryTownHallAfterDeathFound__getPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__player;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallAfterDeathFound__getUnit () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__unit;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallSet__getOldBuilding () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__oldBuilding;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallSet__getNewBuilding () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__newBuilding;
}

void lib15EF4C78_gf_AP_Player_findPrimaryTownHall (int lp_player) {
    // Variable Declarations
    unitgroup lv_candidateBuildings;
    unit lv_currentBuilding;

    // Automatic Variable Declarations
    unitgroup autoD7DE581B_g;
    int autoD7DE581B_u;
    unitgroup auto49757CBE_g;
    int auto49757CBE_u;

    // Variable Initialization
    lv_candidateBuildings = UnitGroupEmpty();

    // Implementation
    lv_candidateBuildings = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7DE581B_g = lv_candidateBuildings;
    autoD7DE581B_u = UnitGroupCount(autoD7DE581B_g, c_unitCountAll);
    for (;; autoD7DE581B_u -= 1) {
        lv_currentBuilding = UnitGroupUnitFromEnd(autoD7DE581B_g, autoD7DE581B_u);
        if (lv_currentBuilding == null) { break; }
        if ((UnitHasBehavior2(lv_currentBuilding, "AP_ZerglingRespawnPrimary") == true)) {
            lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player] = lv_currentBuilding;
            break;
        }

    }
    lv_candidateBuildings = UnitGroup("AP_CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("AP_OrbitalCommand", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("AP_PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("AP_Nexus", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("AP_Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("AP_Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("AP_Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("OrbitalCommand", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("Nexus", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_candidateBuildings, UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto49757CBE_g = lv_candidateBuildings;
    auto49757CBE_u = UnitGroupCount(auto49757CBE_g, c_unitCountAll);
    for (;; auto49757CBE_u -= 1) {
        lv_currentBuilding = UnitGroupUnitFromEnd(auto49757CBE_g, auto49757CBE_u);
        if (lv_currentBuilding == null) { break; }
        lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player] = lv_currentBuilding;
        break;
    }
}

unit lib15EF4C78_gf_AP_Player_getPrimaryTownHall (int lp_player) {
    // Variable Declarations
    unit lv_primaryBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player];
    if (((lv_primaryBuilding == null) || (UnitIsAlive(lv_primaryBuilding) == false))) {
        lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lp_player);
        lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player];
        if (((lv_primaryBuilding == null) || (UnitIsAlive(lv_primaryBuilding) == false))) {
            return null;
        }

    }

    return lv_primaryBuilding;
}

void lib15EF4C78_gf_ZerglingRespawnSetPrimaryHatchery (int lp_player, unit lp_building) {
    // Variable Declarations
    unit lv_oldPrimaryBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldPrimaryBuilding = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    UnitCreateEffectUnit(lp_building, "AP_ZerglingRespawnPrimaryRemoveOthers", lp_building);
    UnitBehaviorAdd(lp_building, "AP_ZerglingRespawnPrimary", lp_building, 1);
    lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player] = lp_building;
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__oldBuilding = lv_oldPrimaryBuilding;
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__newBuilding = lp_building;
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_SET_EVENT);
}

bool lib15EF4C78_gf_AP_Player_UnitIsMindControlled (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_unit, "AP_DarkArchonMindControl") == true) || (UnitHasBehavior2(lp_unit, "AP_MindControl") == true) || (UnitHasBehavior2(lp_unit, "AP_NovaDomination") == true) || (UnitHasBehavior2(lp_unit, "AP_NPSwarm") == true))) {
        return true;
    }
    else {
        return false;
    }
}

unit lib15EF4C78_gf_AP_Player_UnitMindControlledEventTarget () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_UnitMindControlledTarget;
}

void lib15EF4C78_gf_SetHeroPanelUnit2 (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index != 2)) {
        lib15EF4C78_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_15EF4C78_0F46D063"), false);
    }
}

void lib15EF4C78_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoD494CD2E_val;
    unit auto5129D7DB_val;
    int auto7793CC50_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    lib15EF4C78_gv_cU_HeroUnit[0][0] = lp_heroUnit;
    lib15EF4C78_gv_cU_HeroType[lp_index][0] = lib15EF4C78_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    autoD494CD2E_val = lib15EF4C78_gv_cU_HeroType[lp_index][0];
    if (autoD494CD2E_val == lib15EF4C78_ge_CampaignHeroes2_Hyperion) {
        lib15EF4C78_gv_cU_HeroShowLevel[lp_index][0] = false;
    }
    else if (autoD494CD2E_val == lib15EF4C78_ge_CampaignHeroes2_LaserDrill) {
        lib15EF4C78_gv_cU_HeroShowLevel[lp_index][0] = false;
    }
    else {
        lib15EF4C78_gv_cU_HeroShowLevel[lp_index][0] = true;
    }
    lib15EF4C78_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((PlayerRace(lp_player) == "Zerg")) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((PlayerRace(lp_player) == "Terr")) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((lib15EF4C78_gf_CU_ChampionHasShields2(lib15EF4C78_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit))) == true)) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    lib15EF4C78_gv_cU_HeroExists[lp_player][0] = true;
    if ((lib15EF4C78_gv_cU_HeroUnit[0][0] == null)) {
        lib15EF4C78_gv_cU_HeroExists[lp_player][0] = false;
    }
    else {
        TriggerEnable(lib15EF4C78_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(lib15EF4C78_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(lib15EF4C78_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(lib15EF4C78_gt_CU_HeroUnitVitalChange, true);
        auto5129D7DB_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        auto7793CC50_val = lp_index;
        if (auto7793CC50_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (auto7793CC50_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= lib15EF4C78_gv_cUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(lib15EF4C78_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_15EF4C78_931B4F03"), false);
        }
    }
}

void lib15EF4C78_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib15EF4C78_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void lib15EF4C78_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoC7DB28ED_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    lib15EF4C78_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    lib15EF4C78_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    lib15EF4C78_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    lib15EF4C78_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    lib15EF4C78_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    lib15EF4C78_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    lib15EF4C78_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    lib15EF4C78_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    autoC7DB28ED_val = lp_index;
    if (autoC7DB28ED_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (autoC7DB28ED_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    lib15EF4C78_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

int lib15EF4C78_gf_CU_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto80A8D158_val;

    // Implementation
    auto80A8D158_val = lp_unitType;
    if (auto80A8D158_val == "AP_K5Kerrigan") {
        return lib15EF4C78_ge_CampaignHeroes2_Kerrigan;
    }
    else if (auto80A8D158_val == "AP_K5KerriganBurrowed") {
        return lib15EF4C78_ge_CampaignHeroes2_Kerrigan;
    }
    else if (auto80A8D158_val == "AP_NovaHero") {
        return lib15EF4C78_ge_CampaignHeroes2_Nova;
    }
    else if (auto80A8D158_val == "AP_NovaReviveCocoon") {
        return lib15EF4C78_ge_CampaignHeroes2_NovaReviveBeacon;
    }
    else {
    }
    return lib15EF4C78_ge_CampaignHeroes2_None;
}

string lib15EF4C78_gf_CU_HeroIcon (int lp_heroType, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int autoA30E0AD1_val;

    // Implementation
    autoA30E0AD1_val = lp_heroType;
    if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Kerrigan) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        else {
            return "Assets\\Textures\\chrysalisportrait_static.dds";
        }
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_KerriganReviveCocoon) {
        return "Assets\\Textures\\chrysalisportrait_static.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Artanis) {
        return "Assets\\Textures\\ui-heroicon-artanis.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Alarak) {
        return "Assets\\Textures\\alarakex3_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_AlarakReviveBeacon) {
        return "Assets\\Textures\\alarakdeath_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Hyperion) {
        return "Assets\\Textures\\btn-unit-terran-hyperion.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_LaserDrill) {
        return "Assets\\Textures\\btn-tips-laserdrillcontrol.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Zagara) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_zagara.dds";
        }
        else {
            return "Assets\\Textures\\cocoonportrait_static.dds";
        }
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_ZagaraReviveCocoon) {
        return "Assets\\Textures\\cocoonportrait_static.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_NovaReviveBeacon) {
        return "Assets\\Textures\\btn-upgrade-nova-novarespawn.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Nova) {
        return "Assets\\Textures\\novaex3_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Selendis) {
        return "Assets\\Textures\\ui-heroicon-selendis.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Fenix) {
        return "Assets\\Textures\\btn-hero-fenix.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_FenixDragoon) {
        return "Assets\\Textures\\btn-hero-fenix-dragoon.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_FenixArbiter) {
        return "Assets\\Textures\\btn-hero-fenix-arbiter.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Dehaka) {
        return "Assets\\Textures\\btn-hero-dehaka.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_DehakasDen) {
        return "Assets\\Textures\\btn-hero-dehaka-death.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_ArtifactTruck) {
        return "Assets\\Textures\\btn-cradleofdeath-truck.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Zeratul) {
        return "Assets\\Textures\\zeratul_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_ZeratulReviveBeacon) {
        return "Assets\\Textures\\btn-building-protoss-zeratulbeacon.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Gary) {
        return "Assets\\Textures\\gary_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_SuperGary) {
        return "Assets\\Textures\\supergary_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_GaryReviveBeacon) {
        return "Assets\\Textures\\btn-building-stetmann-garysroom.dds";
    }
    else {
        return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
}

void lib15EF4C78_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;

    // Automatic Variable Declarations
    int autoA2804534_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((lib15EF4C78_gv_cU_HeroUnit[0][0] == null)) {
        if ((lib15EF4C78_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((lib15EF4C78_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        lib15EF4C78_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    autoA2804534_val = lp_index;
    if (autoA2804534_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_36D77694");
    }
    else if (autoA2804534_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_0733DA16");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_5E7F54C6", "A", UnitGetName(lib15EF4C78_gv_cU_HeroUnit[0][0]));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_5E7F54C6", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_5E7F54C6"), lv_updateGroup);
    libNtve_gf_SetDialogItemImage(lib15EF4C78_gv_cU_HeroDialogIconImage[lp_index], lib15EF4C78_gf_CU_HeroIcon(lib15EF4C78_gv_cU_HeroType[lp_index][0], lib15EF4C78_gv_cU_HeroUnit[0][0]), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_4BB6ED85", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_4BB6ED85", "MaxLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_4BB6ED85"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, lib15EF4C78_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_15EF4C78_41388CCA", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_15EF4C78_41388CCA", "MaxLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_41388CCA"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, lib15EF4C78_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, lib15EF4C78_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_425F4C66", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_425F4C66", "MaxEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_425F4C66"), lv_updateGroup);
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((lib15EF4C78_gf_CU_ChampionHasShields2(lib15EF4C78_gv_cU_HeroType[lp_index][0]) == true)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lib15EF4C78_gf_CU_ChampionHasShields(lib15EF4C78_gv_cU_HeroType[lp_index][0]) == true)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, lib15EF4C78_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lp_index][0] > 0.0)) {
        lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lp_index][0] -= lib15EF4C78_gv_cUC_HeroUpdateFrequency;
        if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lp_index][0] <= 0.0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(lib15EF4C78_gv_cU_HeroUnit[0][0]) == false)) {
        if ((lib15EF4C78_gv_cU_VoidHeroUIRevivable[lp_index][0] == true)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(lib15EF4C78_gv_cU_HeroDialogButton[lp_index], lib15EF4C78_gv_cU_HeroUnit[0][0], lv_updateGroup);
}

string lib15EF4C78_gf_CU_PresetToHeroGameLink (int lp_championPreset) {
    // Automatic Variable Declarations
    int autoB63D1C75_val;

    // Implementation
    autoB63D1C75_val = lp_championPreset;
    if (autoB63D1C75_val == lib15EF4C78_ge_CampaignHeroes2_Kerrigan) {
        return "Kerrigan";
    }
    else {
        return null;
    }
}

bool lib15EF4C78_gf_CU_ChampionHasShields (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == lib15EF4C78_ge_CampaignHeroes2_Kerrigan) || (lp_heroType == lib15EF4C78_ge_CampaignHeroes2_Fenix) || (lp_heroType == lib15EF4C78_ge_CampaignHeroes2_FenixArbiter) || (lp_heroType == lib15EF4C78_ge_CampaignHeroes2_FenixDragoon))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib15EF4C78_gf_CU_ChampionHasShields2 (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == lib15EF4C78_ge_CampaignHeroes2_Alarak))) {
        return true;
    }
    else {
        return false;
    }
}

void lib15EF4C78_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    unit autoA547AD8A_val;
    int auto2121B4A7_val;

    // Implementation
    lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] = lp_heroUnit;
    lib15EF4C78_gv_zS_SwarmHeroUIType[lp_index] = lib15EF4C78_ge_CampaignHeroes_None;
    if ((lp_heroUnit == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player))) {
        if ((TechTreeUpgradeCount(lp_player, "AP_KerriganInfestedCosmetic", c_techCountQueuedOrBetter) == 0)) {
            lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-kerriganghost.dds";
        }
        else {
            lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        lib15EF4C78_gv_zS_SwarmHeroUIType[lp_index] = lib15EF4C78_ge_CampaignHeroes_Kerrigan;
        lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[lp_index] = true;
    }
    else {
        lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[lp_index] = false;
        if ((UnitGetType(lp_heroUnit) == "AP_NovaHero")) {
            lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-commander-nova.dds";
        }

    }
    lib15EF4C78_gf_ZS_UpdateHeroPanel(lp_player, lp_index);
    if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == null)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[1] == null) && (lib15EF4C78_gv_zS_SwarmHeroUIUnit[2] == null)) {
            TriggerEnable(lib15EF4C78_gt_ZS_HeroPanelUpdate, false);
            TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, false);
        }

    }
    else {
        TriggerEnable(lib15EF4C78_gt_ZS_HeroPanelUpdate, true);
        TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, true);
        TriggerEnable(lib15EF4C78_gt_ZS_MouseHoverText, true);
        TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, true);
        autoA547AD8A_val = lp_heroUnit;
        if (autoA547AD8A_val == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)) {
            libNtve_gf_SetDialogItemAnimationDuration(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan, PlayerGroupAll());
        }
        else {
        }
        auto2121B4A7_val = lp_index;
        if (auto2121B4A7_val == 1) {
            libNtve_gf_SetDialogItemHotkey(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[1], c_hotkeyHeroSelect0, PlayerGroupAll());
        }
        else if (auto2121B4A7_val == 2) {
            libNtve_gf_SetDialogItemHotkey(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[2], c_hotkeyHeroSelect1, PlayerGroupAll());
        }
        else {
        }
    }
}

void lib15EF4C78_gf_ZS_ShowHideHeroPanel (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto08EB5976_ae = 2;
    const int auto08EB5976_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto08EB5976_ai >= 0 && lv_index <= auto08EB5976_ae) || (auto08EB5976_ai < 0 && lv_index >= auto08EB5976_ae) ) ; lv_index += auto08EB5976_ai ) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index], PlayerGroupAll(), lp_showHide);
        }

    }
}

void lib15EF4C78_gf_ZS_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoD5A72AA3_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryHeroUnitFrame");
    }
    lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), true);
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogNameLabel[lp_index] = DialogControlLastCreated();
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsoleUIContainer/HeroUnitFrameLevelUpPortrait");
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[lp_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "AP_KerriganLevelUpPortrait", PlayerGroupAll());
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), false);
    }

    autoD5A72AA3_val = lp_index;
    if (autoD5A72AA3_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/HeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (autoD5A72AA3_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], 510, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarBackground[lp_index], 510, PlayerGroupAll());
}

void lib15EF4C78_gf_ZS_UpdateHeroPanel (int lp_player, int lp_index) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    int autoB139472A_val;

    // Variable Initialization

    // Implementation
    if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == null)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], PlayerGroupAll(), false);
        }

        return ;
    }

    if ((lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index] == c_invalidDialogControlId)) {
        lib15EF4C78_gf_ZS_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], PlayerGroupAll(), true);
    autoB139472A_val = lp_index;
    if (autoB139472A_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_E11D6511");
    }
    else if (autoB139472A_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_2D5274FE");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_7DF39159", "A", UnitTypeGetName(UnitGetType(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index])));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_7DF39159", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_7DF39159"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lib15EF4C78_gv_zS_SwarmHeroUIDialogIconImage[lp_index], lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index], PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_DE0A8BC5", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_DE0A8BC5", "MaxLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_DE0A8BC5"), PlayerGroupAll());
    lv_life = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLifePercent, c_unitPropCurrent) * 2.24));
    if ((lv_life > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), lv_life, 22);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_1421E6C3", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_1421E6C3", "MaxEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_1421E6C3"), PlayerGroupAll());
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyPercent, c_unitPropCurrent) * 2.24));
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), lv_energy, 9);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[lp_index] == true)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player))) {
            libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], IntToText(lib15EF4C78_gv_zS_KerriganLevel[lp_player]), PlayerGroupAll());
        }

    }
    else {
        libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), false);
    }
    if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lp_index] > 0.0)) {
        lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lp_index] -= lib15EF4C78_gv_zS_SwarmHeroUIUpdateFrequency;
        if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lp_index] <= 0.0)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index], PlayerGroupAll(), false);
            DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index]) == false)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)) && (lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[lp_player] == true)) {
            libNtve_gf_SetDialogItemAnimationTime(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], (lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan - PlayerGetCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan)), PlayerGroupAll());
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if (true) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
        }
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
        }

    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    }
    if ((UnitIsAlive(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index]) == true)) {
        libNtve_gf_SetDialogItemUnit(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[lp_index], lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], PlayerGroupAll());
    }
    else {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)) && (UnitIsAlive(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]) == true)) {
            libNtve_gf_SetDialogItemUnit(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[lp_index], lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], PlayerGroupAll());
        }
    }
}

trigger auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger = null;

void lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect () {
    if (auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger == null) {
        auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger = TriggerCreate("auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lib15EF4C78_gv_zS_SwarmHeroUIUnit[1] == null) || (lib15EF4C78_gv_zS_SwarmHeroUIUnit[1] != lib15EF4C78_gv_zS_Kerrigan) || (lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1] == c_invalidDialogControlId))) {
        return true;
    }

    if ((lib15EF4C78_gv_zS_KerriganHeroPanelLevelUpEffectPlaying == true)) {
        return true;
    }

    lib15EF4C78_gv_zS_KerriganHeroPanelLevelUpEffectPlaying = true;
    libNtve_gf_ClearPortraitAnimation(PortraitGetTriggerControl(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1]), "TriggerPortraitAnim");
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), true);
    ActorSend(ActorFromPortrait(PortraitGetTriggerControl(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1])), "AnimBlendTimeApply 0.000000");
    libNtve_gf_PortraitSetAnim(PortraitGetTriggerControl(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1]), "Birth", "TriggerPortraitAnim", 0, 0.0);
    Wait(2.0, c_timeGame);
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), false);
    lib15EF4C78_gv_zS_KerriganHeroPanelLevelUpEffectPlaying = false;
    return true;
}

unit lib15EF4C78_gf_ZS_HeroReviveCocoon (int lp_player, int lp_heroType) {
    // Automatic Variable Declarations
    int autoA862168B_val;

    // Implementation
    autoA862168B_val = lp_heroType;
    if (autoA862168B_val == lib15EF4C78_ge_CampaignHeroes_Kerrigan) {
        return lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player];
    }
    else {
    }
    return null;
}

void lib15EF4C78_gf_SetHeroReviverCocoon (int lp_heroType, unit lp_cocoon, int lp_player) {
    // Automatic Variable Declarations
    int autoE7332B2B_val;

    // Implementation
    autoE7332B2B_val = lp_heroType;
    if (autoE7332B2B_val == lib15EF4C78_ge_CampaignHeroes_Kerrigan) {
        lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player] = lp_cocoon;
    }
    else {
    }
}

bool lib15EF4C78_gf_AP_Player_isKerriganRevivable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[lp_player];
}

void lib15EF4C78_gf_AP_Player_setKerriganRevivable (int lp_player, bool lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[lp_player] = lp_value;
}

bool lib15EF4C78_gf_AP_Player_isKerriganAlive (int lp_player) {
    // Variable Declarations
    unitgroup lv_unitsToQuery;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitsToQuery = UnitGroupEmpty();

    // Implementation
    lv_unitsToQuery = UnitGroup("AP_K5Kerrigan", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganPsiStrike", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return (UnitGroupCount(lv_unitsToQuery, c_unitCountAlive) >= 1);
}

unit lib15EF4C78_gf_AP_Player_getKerriganUnit (int lp_player) {
    // Variable Declarations
    unitgroup lv_unitsToQuery;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoF42F238C_g;
    int autoF42F238C_u;

    // Variable Initialization
    lv_unitsToQuery = UnitGroupEmpty();

    // Implementation
    lv_unitsToQuery = UnitGroup("AP_K5Kerrigan", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganPsiStrike", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoF42F238C_g = lv_unitsToQuery;
    autoF42F238C_u = UnitGroupCount(autoF42F238C_g, c_unitCountAll);
    for (;; autoF42F238C_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoF42F238C_g, autoF42F238C_u);
        if (lv_currentUnit == null) { break; }
        break;
    }
    if ((lv_currentUnit == null)) {
        return lib15EF4C78_gv_kerriganUnit[lp_player];
    }
    else {
        lib15EF4C78_gv_kerriganUnit[lp_player] = lv_currentUnit;
    }
    return lv_currentUnit;
}

trigger auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger = null;
int auto_lib15EF4C78_gf_StartKerriganReviveCooldown_lp_player;

void lib15EF4C78_gf_StartKerriganReviveCooldown (int lp_player) {
    auto_lib15EF4C78_gf_StartKerriganReviveCooldown_lp_player = lp_player;

    if (auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger == null) {
        auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger = TriggerCreate("auto_lib15EF4C78_gf_StartKerriganReviveCooldown_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_StartKerriganReviveCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_StartKerriganReviveCooldown_lp_player;

    // Variable Declarations
    unit lv_reviveSpot;
    text lv_tip;
    text lv_subtip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan);
    UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 0);
    UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 1);
    Wait(2.0, c_timeGame);
    lv_reviveSpot = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    while (((lv_reviveSpot == null) || (UnitIsAlive(lv_reviveSpot) == false))) {
        Wait(1.0, c_timeGame);
        lv_reviveSpot = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    }
    if ((lib15EF4C78_gf_AP_Player_isKerriganAlive(lp_player) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_KerriganReviveCocoon", 0, lp_player, UnitGetPosition(lv_reviveSpot));
        lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player] = UnitLastCreated();
        UnitCreateEffectUnit(lv_reviveSpot, "AP_CopyHatcheryRally", lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]);
        UnitIssueOrder(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]), c_orderQueueReplace);
        UnitSetState(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], c_unitStateTooltipable, true);
        lv_tip = UnitTypeGetName(UnitGetType(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]));
        libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan);
        PlayerAddCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan, lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan);
        lib15EF4C78_gv_zS_ReviveKerriganPlayerAsyncParam = lp_player;
        TriggerExecute(lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner, true, false);
        Wait(0.5, c_timeGame);
        Wait(6.5, c_timeGame);
        if ((lib15EF4C78_gf_AP_Player_isKerriganAlive(lp_player) == false)) {
            UnitSetPosition(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), UnitGetPosition(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]), false);
        }

    }

    return true;
}

trigger auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_Trigger = null;
int auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_lp_player;

void lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController (int lp_player) {
    auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_lp_player = lp_player;

    if (auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_Trigger == null) {
        auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_Trigger = TriggerCreate("auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController_lp_player;

    // Variable Declarations
    bool lv_skipExit;

    // Automatic Variable Declarations
    unitgroup auto63EC0E37_g;
    int auto63EC0E37_u;
    unit auto63EC0E37_var;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    while (true) {
        if ((lib15EF4C78_gv_zS_ReviveKerriganInterupt[lp_player] == true)) {
            lib15EF4C78_gv_zS_ReviveKerriganInterupt[lp_player] = false;
            lv_skipExit = true;
            break;
        }

        if ((PlayerGetCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan) == 0.0)) {
            break;
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    if ((lv_skipExit == true)) {
    }
    else {
        UnitIssueOrder(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("AP_KerriganRevive", 0), lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
        auto63EC0E37_g = UnitGroupSelected(lp_player);
        auto63EC0E37_u = UnitGroupCount(auto63EC0E37_g, c_unitCountAll);
        for (;; auto63EC0E37_u -= 1) {
            auto63EC0E37_var = UnitGroupUnitFromEnd(auto63EC0E37_g, auto63EC0E37_u);
            if (auto63EC0E37_var == null) { break; }
            if ((auto63EC0E37_var == lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player])) {
                UnitSelect(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), lp_player, true);
            }

        }
        UnitKill(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]);
        UnitIssueOrder(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), Order(AbilityCommand("AP_K5KerriganUnburrow", 0)), c_orderQueueReplace);
        UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 1);
        UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 0);
    }
    return true;
}

void lib15EF4C78_gf_ReviveHeroInstantly (int lp_player, int lp_type, bool lp_displayReviveMessage) {
    // Automatic Variable Declarations
    int auto7F63F5C4_val;

    // Implementation
    auto7F63F5C4_val = lp_type;
    if (auto7F63F5C4_val == lib15EF4C78_ge_HeroUnit_Kerrigan) {
        lib15EF4C78_gv_zS_ReviveKerriganInterupt[lp_player] = true;
        if ((UnitIsAlive(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]) == true)) {
            ActorSend(lib15EF4C78_gv_zS_KerriganActor, "Destroy");
            libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan);
            if ((libNtve_gf_UnitIsPaused(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]) == false) && (UnitOrderIsValid(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("AP_KerriganRevive", 0), lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player))) == true)) {
                UnitIssueOrder(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("AP_KerriganRevive", 0), lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)), c_orderQueueReplace);
            }
            else {
                UnitRevive(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player));
                UnitSetPropertyFixed(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), c_unitPropLifePercent, 100.0);
            }
            Wait(0.0625, c_timeGame);
            UnitKill(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]);
            UnitIssueOrder(lib15EF4C78_gv_zS_Kerrigan, Order(AbilityCommand("AP_K5KerriganUnburrow", 0)), c_orderQueueReplace);
            UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 1);
            UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 0);
        }

    }
    else {
    }
}

void lib15EF4C78_gf_ZS_KerriganCustomStatusBarUpdate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_zS_KerriganLevel[0] > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganStatusBarUpgrade", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganStatusBarUpgrade", 0);
    }
}

void lib15EF4C78_gf_ZS_LevelUpKerrigan () {
    // Variable Declarations
    int lv_originalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_originalXP = lib15EF4C78_gv_zS_KerriganLevel[0];
    lib15EF4C78_gf_ZS_RecalculateKerriganXP();
    if (((lib15EF4C78_gv_zS_KerriganLevel[0] <= lv_originalXP))) {
        return ;
    }

    lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect();
}

void lib15EF4C78_gf_ZS_RecalculateKerriganXP () {
    // Variable Declarations
    string lv_indexObjective;
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib15EF4C78_gv_zS_KerriganLevel[0] = 1;
    lib15EF4C78_gv_zS_KerriganActualLevel = 1;
    if ((lib15EF4C78_gf_ZS_KerriganLevelFromXP((lib15EF4C78_gv_zS_KerriganCheatXP + lib15EF4C78_gv_zS_KerriganLevel[0])) > lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL)) {
        lib15EF4C78_gv_zS_KerriganCheatXP = (lib15EF4C78_gf_ZS_KerriganXPFromLevel(lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL) - lib15EF4C78_gv_zS_KerriganLevel[0]);
    }

    lib15EF4C78_gv_zS_KerriganLevel[0] += lib15EF4C78_gv_zS_KerriganCheatXP;
    if ((lib15EF4C78_gv_zS_Kerrigan != null)) {
        UnitSetPropertyFixed(lib15EF4C78_gv_zS_Kerrigan, c_unitPropXP, IntToFixed(lib15EF4C78_gv_zS_KerriganLevel[0]));
    }

    lib15EF4C78_gf_ZS_KerriganCustomStatusBarUpdate(0);
    UserDataSetInt("StoryStates", "Kerrigan Current Level", "value", 1, lib15EF4C78_gv_zS_KerriganLevel[0]);
}

int lib15EF4C78_gf_ZS_KerriganLevelXPMax (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 1;
}

int lib15EF4C78_gf_ZS_KerriganLevelFromXP (int lp_xP) {
    // Automatic Variable Declarations
    // Implementation
    return lp_xP;
}

int lib15EF4C78_gf_ZS_KerriganXPFromLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return lp_level;
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusLife (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Life", 1);
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusEnergy (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Energy", 1);
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusArmor (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Armor", 1);
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusDamage (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Damage", 1);
}

void lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_life;
    int lv_energy;
    int lv_damage;
    int lv_armor;
    int lv_index;
    int lv_userDataIndex;

    // Automatic Variable Declarations
    int autoB4B245A4_ae;
    const int autoB4B245A4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_level > 0)) {
        autoB4B245A4_ae = lp_level;
        lv_index = 1;
        for ( ; ( (autoB4B245A4_ai >= 0 && lv_index <= autoB4B245A4_ae) || (autoB4B245A4_ai < 0 && lv_index >= autoB4B245A4_ae) ) ; lv_index += autoB4B245A4_ai ) {
            lv_userDataIndex = ModI(lv_index, lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL);
            if ((lv_userDataIndex == 0)) {
                lv_userDataIndex = lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL;
            }

            lv_life += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusLife(lv_userDataIndex);
            lv_energy += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusEnergy(lv_userDataIndex);
            lv_damage += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusDamage(lv_userDataIndex);
            lv_armor += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusArmor(lv_userDataIndex);
        }
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeEnergy", ModI(lv_energy, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeHealth", ModI(lv_life, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeEnergy100", (lv_energy / 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeHealth100", (ModI(lv_life, 10000) / 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeHealth10000", (lv_life / 10000));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeDamage", ModI(lv_damage, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeDamage100", (lv_damage / 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeArmor", ModI(lv_armor, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeArmor100", (lv_armor / 100));
    lib15EF4C78_gv_zS_KerriganLevel[lp_player] = lp_level;
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_929A180C", "level", IntToText(lp_level));
    UnitSetInfoText2(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), TextExpressionAssemble("Param/Expression/lib_15EF4C78_929A180C"));
}

int lib15EF4C78_gf_AP_Player_getKerriganLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_zS_KerriganLevel[lp_player];
}

void lib15EF4C78_gf_CM_Mengsk_ForceMorphTrooper (unit lp_trooper, unit lp_pickup, string lp_morphEffect, string lp_morphBehavior, string lp_actorSignal) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_trooper, lp_morphEffect, lp_trooper);
    UnitBehaviorAdd(lp_trooper, lp_morphBehavior, lp_trooper, 1);
    UnitKill(lp_pickup);
    UnitGroupRemove(lib15EF4C78_gv_cM_Mengsk_WeaponPickerUppers, lp_trooper);
    libNtve_gf_SendActorMessageToUnit(lp_trooper, "Signal ClearWeapon");
    libNtve_gf_SendActorMessageToUnit(lp_trooper, (("Signal " + lp_actorSignal)));
}

void lib15EF4C78_gf_AP_Player_updatePrideOfAugustgradWeapons (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitWeaponRemove(lp_unit, "AP_ATSLaserBatteryMengskL1Fake");
    UnitWeaponRemove(lp_unit, "AP_ATSLaserBatteryMengskL2Fake");
    UnitWeaponRemove(lp_unit, "AP_ATSLaserBatteryMengskL3Fake");
    UnitWeaponRemove(lp_unit, "AP_ATSLaserBatteryMengskL4Fake");
    UnitWeaponRemove(lp_unit, "AP_ATALaserBatteryMengskL1Fake");
    UnitWeaponRemove(lp_unit, "AP_ATALaserBatteryMengskL2Fake");
    UnitWeaponRemove(lp_unit, "AP_ATALaserBatteryMengskL3Fake");
    UnitWeaponRemove(lp_unit, "AP_ATALaserBatteryMengskL4Fake");
    UnitWeaponRemove(lp_unit, "AP_ATXLaserBatteryMengskL1Fake");
    UnitWeaponRemove(lp_unit, "AP_ATXLaserBatteryMengskL2Fake");
    UnitWeaponRemove(lp_unit, "AP_ATXLaserBatteryMengskL3Fake");
    UnitWeaponRemove(lp_unit, "AP_ATXLaserBatteryMengskL4Fake");
    if ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), "AP_AdvancedWeaponryBattlecruiser", c_techCountCompleteOnly) >= 1)) {
        if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATXLaserBatteryMengskL1Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATXLaserBatteryMengskL2Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATXLaserBatteryMengskL3Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATXLaserBatteryMengskL4Fake", null);
        }
        else if (true) {
            UnitWeaponAdd(lp_unit, "AP_ATXLaserBatteryMengskL1Fake", null);
        }
    }
    else {
        if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATALaserBatteryMengskL1Fake", null);
            UnitWeaponAdd(lp_unit, "AP_ATSLaserBatteryMengskL1Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATALaserBatteryMengskL2Fake", null);
            UnitWeaponAdd(lp_unit, "AP_ATSLaserBatteryMengskL2Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATALaserBatteryMengskL3Fake", null);
            UnitWeaponAdd(lp_unit, "AP_ATSLaserBatteryMengskL3Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_ATALaserBatteryMengskL4Fake", null);
            UnitWeaponAdd(lp_unit, "AP_ATSLaserBatteryMengskL4Fake", null);
        }
        else if (true) {
            UnitWeaponAdd(lp_unit, "AP_ATALaserBatteryMengskL1Fake", null);
            UnitWeaponAdd(lp_unit, "AP_ATSLaserBatteryMengskL1Fake", null);
        }
    }
}

void lib15EF4C78_gf_AP_Player_updateShockDivisionWeapons (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengsk");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskL2");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskL3");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskL4");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskSieged");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskSiegedL2");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskSiegedL3");
    UnitWeaponRemove(lp_unit, "AP_SiegeTankMengskSiegedL4");
    if ((UnitGetType(lp_unit) == "AP_SiegeTankMengsk")) {
        if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengsk", "AP_SiegeTankMengsk");
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskL2", "AP_SiegeTankMengsk");
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskL3", "AP_SiegeTankMengsk");
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskL4", "AP_SiegeTankMengsk");
        }
        else if (true) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengsk", "AP_SiegeTankMengsk");
        }
    }
    else {
        if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskSieged", "AP_SiegeTankMengskSieged");
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskSiegedL2", "AP_SiegeTankMengskSieged");
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskSiegedL3", "AP_SiegeTankMengskSieged");
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskSiegedL4", "AP_SiegeTankMengskSieged");
        }
        else if (true) {
            UnitWeaponAdd(lp_unit, "AP_SiegeTankMengskSieged", "AP_SiegeTankMengskSieged");
        }
    }
}

void lib15EF4C78_gf_AP_Player_updateBulwarkCompanyWeapons (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitWeaponRemove(lp_unit, "AP_GoliathMengskAL1Fake");
    UnitWeaponRemove(lp_unit, "AP_GoliathMengskAL2Fake");
    UnitWeaponRemove(lp_unit, "AP_GoliathMengskAL3Fake");
    UnitWeaponRemove(lp_unit, "AP_GoliathMengskAL4Fake");
    if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
        UnitWeaponAdd(lp_unit, "AP_GoliathMengskAL1Fake", null);
    }
    else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
        UnitWeaponAdd(lp_unit, "AP_GoliathMengskAL2Fake", null);
    }
    else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
        UnitWeaponAdd(lp_unit, "AP_GoliathMengskAL3Fake", null);
    }
    else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
        UnitWeaponAdd(lp_unit, "AP_GoliathMengskAL4Fake", null);
    }
    else if (true) {
        UnitWeaponAdd(lp_unit, "AP_GoliathMengskAL1Fake", null);
    }
}

void lib15EF4C78_gf_AP_Player_updateNightHawkWeapons (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitWeaponRemove(lp_unit, "AP_WraithMengskGL1Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskGL2Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskGL3Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskGL4Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAL1Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAL2Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAL3Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAL4Fake");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAGL1");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAGL2");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAGL3");
    UnitWeaponRemove(lp_unit, "AP_WraithMengskAGL4");
    if ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), "AP_WraithAdvancedLaserTechnology", c_techCountCompleteOnly) >= 1)) {
        if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAGL1", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAGL2", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAGL3", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAGL4", null);
        }
        else if (true) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAGL1", null);
        }
    }
    else {
        if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL1Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskGL1Fake", null);
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAL1Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL2Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskGL2Fake", null);
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAL2Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL3Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskGL3Fake", null);
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAL3Fake", null);
        }
        else if ((UnitHasBehavior(lp_unit, "AP_MengskVeteranL4Tracker") == true)) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskGL4Fake", null);
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAL4Fake", null);
        }
        else if (true) {
            UnitWeaponAdd(lp_unit, "AP_WraithMengskGL1Fake", null);
            UnitWeaponAdd(lp_unit, "AP_WraithMengskAL1Fake", null);
        }
    }
}

void lib15EF4C78_gf_RemoveUnusedStartingUnits (unitgroup lp_startingUnits, string lp_desiredFaction, bool lp_hiveUpgrade) {
    // Automatic Variable Declarations
    unitgroup autoA0E4A284_g;
    int autoA0E4A284_u;
    unit autoA0E4A284_var;

    // Implementation
    autoA0E4A284_g = lp_startingUnits;
    autoA0E4A284_u = UnitGroupCount(autoA0E4A284_g, c_unitCountAll);
    for (;; autoA0E4A284_u -= 1) {
        autoA0E4A284_var = UnitGroupUnitFromEnd(autoA0E4A284_g, autoA0E4A284_u);
        if (autoA0E4A284_var == null) { break; }
        if (((UnitGetType(autoA0E4A284_var) == "AP_Drone") || (UnitGetType(autoA0E4A284_var) == "AP_DroneBurrowed") || (UnitGetType(autoA0E4A284_var) == "AP_SCV") || (UnitGetType(autoA0E4A284_var) == "AP_Probe"))) {
            lib15EF4C78_gf_ReplaceWorker(autoA0E4A284_var, lp_desiredFaction);
            continue;
        }

        if (((UnitGetType(autoA0E4A284_var) == "AP_Hatchery") || (UnitGetType(autoA0E4A284_var) == "AP_Lair") || (UnitGetType(autoA0E4A284_var) == "AP_Hive") || (UnitGetType(autoA0E4A284_var) == "AP_Nexus") || (UnitGetType(autoA0E4A284_var) == "AP_CommandCenter"))) {
            if ((lp_hiveUpgrade == true)) {
                lib15EF4C78_gf_ReplaceTownHall(autoA0E4A284_var, lp_desiredFaction, true);
            }
            else {
                lib15EF4C78_gf_ReplaceTownHall(autoA0E4A284_var, lp_desiredFaction, false);
            }
        }

        if ((lp_desiredFaction != "Zerg") && ((UnitGetType(autoA0E4A284_var) == "AP_CreepTumor") || (UnitGetType(autoA0E4A284_var) == "AP_CreepTumorBurrowed") || (UnitGetType(autoA0E4A284_var) == "AP_CreepTumorUsed"))) {
            UnitRemove(autoA0E4A284_var);
            CreepModify(UnitGetPosition(autoA0E4A284_var), 16.0, false, false);
            continue;
        }

        if (((UnitGetType(autoA0E4A284_var) == "AP_Extractor") || (UnitGetType(autoA0E4A284_var) == "AP_ExtractorPipes") || (UnitGetType(autoA0E4A284_var) == "AP_AutomatedExtractor") || (UnitGetType(autoA0E4A284_var) == "AP_Refinery") || (UnitGetType(autoA0E4A284_var) == "AP_AutomatedRefinery") || (UnitGetType(autoA0E4A284_var) == "AP_Assimilator") || (UnitGetType(autoA0E4A284_var) == "AP_AssimilatorProtossGeyser") || (UnitGetType(autoA0E4A284_var) == "AP_AssimilatorPurifierGeyser") || (UnitGetType(autoA0E4A284_var) == "AP_AssimilatorShakurasGeyser") || (UnitGetType(autoA0E4A284_var) == "AP_AutomatedAssimilator"))) {
            lib15EF4C78_gf_ReplaceGasStructure(autoA0E4A284_var, lp_desiredFaction);
            continue;
        }

        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoA0E4A284_var), "Race", c_playerAny) != CatalogFieldValueGet(c_gameCatalogRace, lp_desiredFaction, "AttributeId", c_playerAny))) {
            UnitBehaviorRemoveCategory(autoA0E4A284_var, c_unitBehaviorFlagPermanent);
            UnitBehaviorRemove(autoA0E4A284_var, "AP_BanelingExplode", c_unitBehaviorCountAll);
            UnitRemove(autoA0E4A284_var);
        }

    }
}

void lib15EF4C78_gf_ReplaceGasStructure (unit lp_gasStructure, string lp_desiredFaction) {
    // Variable Declarations
    int lv_initialGas;

    // Automatic Variable Declarations
    string auto148E77B6_val;
    unitgroup autoEA05D24C_g;
    int autoEA05D24C_u;
    unit autoEA05D24C_var;

    // Variable Initialization

    // Implementation
    lv_initialGas = UnitGetPropertyInt(lp_gasStructure, c_unitPropResources, c_unitPropCurrent);
    if ((lv_initialGas > 0)) {
        auto148E77B6_val = lp_desiredFaction;
        if (auto148E77B6_val == "Terr") {
            if ((UnitGetType(lp_gasStructure) != "AP_Refinery") && (UnitGetType(lp_gasStructure) != "AP_AutomatedRefinery")) {
                libNtve_gf_ReplaceUnit(lp_gasStructure, "AP_Refinery", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropResources, lv_initialGas);
            }

        }
        else if (auto148E77B6_val == "Zerg") {
            if ((UnitGetType(lp_gasStructure) != "AP_Extractor") && (UnitGetType(lp_gasStructure) != "AP_ExtractorPipes") && (UnitGetType(lp_gasStructure) != "AP_AutomatedExtractor")) {
                libNtve_gf_ReplaceUnit(lp_gasStructure, "AP_Extractor", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropResources, lv_initialGas);
            }

        }
        else if (auto148E77B6_val == "Prot") {
            if ((UnitGetType(lp_gasStructure) != "AP_Assimilator") && (UnitGetType(lp_gasStructure) != "AP_AssimilatorProtossGeyser") && (UnitGetType(lp_gasStructure) != "AP_AssimilatorPurifierGeyser") && (UnitGetType(lp_gasStructure) != "AP_AssimilatorShakurasGeyser") && (UnitGetType(lp_gasStructure) != "AP_AutomatedAssimilator")) {
                libNtve_gf_ReplaceUnit(lp_gasStructure, "AP_Assimilator", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropResources, lv_initialGas);
            }

        }
        else {
        }
        autoEA05D24C_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_gasStructure), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEA05D24C_u = UnitGroupCount(autoEA05D24C_g, c_unitCountAll);
        for (;; autoEA05D24C_u -= 1) {
            autoEA05D24C_var = UnitGroupUnitFromEnd(autoEA05D24C_g, autoEA05D24C_u);
            if (autoEA05D24C_var == null) { break; }
            if (((UnitGetType(autoEA05D24C_var) == "VespeneGeyser") || (UnitGetType(autoEA05D24C_var) == "SpacePlatformGeyser"))) {
                UnitRemove(autoEA05D24C_var);
            }

        }
    }

}

void lib15EF4C78_gf_ReplaceWorker (unit lp_worker, string lp_desiredFaction) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_desiredFaction == "Terr")) {
        libNtve_gf_ReplaceUnit(lp_worker, "AP_SCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((lp_desiredFaction == "Zerg")) {
        libNtve_gf_ReplaceUnit(lp_worker, "AP_Drone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((lp_desiredFaction == "Prot")) {
        libNtve_gf_ReplaceUnit(lp_worker, "AP_Probe", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

}

void lib15EF4C78_gf_ReplaceTownHall (unit lp_townHall, string lp_desiredFaction, bool lp_hiveUpgrade) {
    // Variable Declarations
    unit lv_replacedTownHall;

    // Automatic Variable Declarations
    unitgroup auto35E52867_g;
    int auto35E52867_u;
    unit auto35E52867_var;
    unitgroup auto9B194416_g;
    int auto9B194416_u;
    unit auto9B194416_var;
    unitgroup autoA7B8BDD1_g;
    int autoA7B8BDD1_u;
    unit autoA7B8BDD1_var;

    // Variable Initialization

    // Implementation
    auto35E52867_g = UnitGroup("Larva", c_playerAny, RegionCircle(UnitGetPosition(lp_townHall), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35E52867_u = UnitGroupCount(auto35E52867_g, c_unitCountAll);
    for (;; auto35E52867_u -= 1) {
        auto35E52867_var = UnitGroupUnitFromEnd(auto35E52867_g, auto35E52867_u);
        if (auto35E52867_var == null) { break; }
        UnitRemove(auto35E52867_var);
    }
    auto9B194416_g = UnitGroup("AP_Larva", c_playerAny, RegionCircle(UnitGetPosition(lp_townHall), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B194416_u = UnitGroupCount(auto9B194416_g, c_unitCountAll);
    for (;; auto9B194416_u -= 1) {
        auto9B194416_var = UnitGroupUnitFromEnd(auto9B194416_g, auto9B194416_u);
        if (auto9B194416_var == null) { break; }
        UnitRemove(auto9B194416_var);
    }
    if ((lp_desiredFaction != "Zerg")) {
        if ((lp_desiredFaction == "Terr") && (UnitGetType(lp_townHall) != "AP_CommandCenter")) {
            libNtve_gf_ReplaceUnit(lp_townHall, "AP_CommandCenter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            lv_replacedTownHall = libNtve_gf_LastReplacedUnit();
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_replacedTownHall), "AP_OrbitalRelay", c_techCountCompleteOnly) >= 1)) {
                libNtve_gf_SendActorMessageToUnit(lv_replacedTownHall, "AnimGroupApply B");
            }

        }

        if ((lp_desiredFaction == "Prot") && (UnitGetType(lp_townHall) != "AP_Nexus")) {
            libNtve_gf_ReplaceUnit(lp_townHall, "AP_Nexus", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            lv_replacedTownHall = libNtve_gf_LastReplacedUnit();
        }

        CreepModify(UnitGetPosition(lp_townHall), 16.0, false, false);
    }
    else {
        if ((UnitGetType(lp_townHall) != "AP_Hatchery") && (UnitGetType(lp_townHall) != "AP_Lair") && (UnitGetType(lp_townHall) != "AP_Hive")) {
            if ((lp_hiveUpgrade == true)) {
                libNtve_gf_ReplaceUnit(lp_townHall, "AP_Hive", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                lv_replacedTownHall = libNtve_gf_LastReplacedUnit();
                CreepModify(UnitGetPosition(lp_townHall), 12.0, true, false);
                lib15EF4C78_gf_AP_Player_SpawnLarvaForHatchery(lv_replacedTownHall, 3);
            }
            else {
                libNtve_gf_ReplaceUnit(lp_townHall, "AP_Lair", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                lv_replacedTownHall = libNtve_gf_LastReplacedUnit();
                CreepModify(UnitGetPosition(lp_townHall), 12.0, true, false);
                lib15EF4C78_gf_AP_Player_SpawnLarvaForHatchery(lv_replacedTownHall, 3);
            }
        }
        else {
            lib15EF4C78_gf_AP_Player_SpawnLarvaForHatchery(lp_townHall, 3);
        }
    }
    autoA7B8BDD1_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_townHall), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7B8BDD1_u = UnitGroupCount(autoA7B8BDD1_g, c_unitCountAll);
    for (;; autoA7B8BDD1_u -= 1) {
        autoA7B8BDD1_var = UnitGroupUnitFromEnd(autoA7B8BDD1_g, autoA7B8BDD1_u);
        if (autoA7B8BDD1_var == null) { break; }
        if ((lv_replacedTownHall != null) && (autoA7B8BDD1_var != lv_replacedTownHall)) {
            if ((lp_desiredFaction != "Zerg") && ((UnitGetType(autoA7B8BDD1_var) == "AP_Hatchery") || (UnitGetType(autoA7B8BDD1_var) == "AP_Lair") || (UnitGetType(autoA7B8BDD1_var) == "AP_Hive"))) {
                UnitRemove(autoA7B8BDD1_var);
                CreepModify(UnitGetPosition(lp_townHall), 16.0, false, false);
            }
            else {
                UnitRemove(autoA7B8BDD1_var);
            }
        }

    }
}

void lib15EF4C78_gf_AP_Player_MercCompoundUpdateAvailableCount (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_readyInfantryCount;
    int lv_readyVehiclesCount;
    int lv_readyStarshipsCount;
    int lv_readyBroodWarCount;
    int lv_readySC2Count;
    int lv_readyInfestedCount;
    string lv_cooldownLink;
    abilcmd lv_abiltyCommand;
    int lv_infoArrayIndex;
    int lv_mercenaryClass;

    // Automatic Variable Declarations
    const int auto2A6816A0_ae = lib15EF4C78_gv_aP_Player_MERC_COOLDOWN_LINK_SIZE;
    const int auto2A6816A0_ai = 1;
    int auto43FC3C45_val;

    // Variable Initialization
    lv_cooldownLink = "";

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantryCounterNothingReady", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarshipsCounterNothingReady", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundVehiclesCounterNothingReady", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWarCounterNothingReady", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundSC2CounterNothingReady", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundInfestedCounterNothingReady", 0);
    lv_index = 0;
    for ( ; ( (auto2A6816A0_ai >= 0 && lv_index <= auto2A6816A0_ae) || (auto2A6816A0_ai < 0 && lv_index >= auto2A6816A0_ae) ) ; lv_index += auto2A6816A0_ai ) {
        lv_abiltyCommand = lib15EF4C78_gv_aP_Player_MercAbilityCommands[lv_index];
        lv_cooldownLink = lib15EF4C78_gv_aP_Player_MercCooldownLinks[lv_index];
        lv_mercenaryClass = lib15EF4C78_gv_aP_Player_MercType[lv_index];
        lv_infoArrayIndex = lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[lv_index];
        if ((TechTreeAbilityIsAllowed(lp_player, lv_abiltyCommand) == true) && (PlayerGetCooldown(lp_player, lv_cooldownLink) <= 0.0) && ((TechTreeUpgradeCount(lp_player, "AP_RogueForces", c_techCountCompleteOnly) >= 1) || (PlayerGetChargeUsed(lp_player, lib15EF4C78_gv_aP_Player_MercCooldownLinks[lv_index]) < CatalogFieldValueGetAsInt(c_gameCatalogAbil, lib15EF4C78_gv_aP_Player_MercAbility[lv_index], "InfoArray[" + IntToString(lv_infoArrayIndex) + "].Charge.CountMax", lp_player)))) {
            auto43FC3C45_val = lv_mercenaryClass;
            if (auto43FC3C45_val == lib15EF4C78_ge_AP_Player_MercenaryType_BROODWAR) {
                lv_readyBroodWarCount = (lv_readyBroodWarCount + 1);
            }
            else if (auto43FC3C45_val == lib15EF4C78_ge_AP_Player_MercenaryType_SCTWO) {
                lv_readySC2Count = (lv_readySC2Count + 1);
            }
            else if (auto43FC3C45_val == lib15EF4C78_ge_AP_Player_MercenaryType_INFESTED) {
                lv_readyInfestedCount = (lv_readyInfestedCount + 1);
            }
            else if (auto43FC3C45_val == lib15EF4C78_ge_AP_Player_MercenaryType_INFANTRY) {
                lv_readyInfantryCount = (lv_readyInfantryCount + 1);
            }
            else if (auto43FC3C45_val == lib15EF4C78_ge_AP_Player_MercenaryType_VEHICLE) {
                lv_readyVehiclesCount = (lv_readyVehiclesCount + 1);
            }
            else if (auto43FC3C45_val == lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP) {
                lv_readyStarshipsCount = (lv_readyStarshipsCount + 1);
            }
            else {
            }
        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantryCounter", lv_readyInfantryCount);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundVehiclesCounter", lv_readyVehiclesCount);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarshipsCounter", lv_readyStarshipsCount);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWarCounter", lv_readyBroodWarCount);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundSC2Counter", lv_readySC2Count);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundInfestedCounter", lv_readyInfestedCount);
    if ((lv_readyInfantryCount == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantryCounterNothingReady", 1);
    }

    if ((lv_readyBroodWarCount == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWarCounterNothingReady", 1);
    }

    if ((lv_readySC2Count == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundSC2CounterNothingReady", 1);
    }

    if ((lv_readyInfestedCount == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundInfestedCounterNothingReady", 1);
    }

    if ((lv_readyVehiclesCount == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundVehiclesCounterNothingReady", 1);
    }

    if ((lv_readyStarshipsCount == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarshipsCounterNothingReady", 1);
    }

}

void lib15EF4C78_gf_AP_Player_ResetMercenaryCooldowns (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoDC54778B_ae = lib15EF4C78_gv_aP_Player_MERC_COOLDOWN_LINK_SIZE;
    const int autoDC54778B_ai = 1;

    // Variable Initialization

    // Implementation
    lib15EF4C78_gf_AP_Player_ClearMercenaryCooldowns(lp_player);
    lv_index = 0;
    for ( ; ( (autoDC54778B_ai >= 0 && lv_index <= autoDC54778B_ae) || (autoDC54778B_ai < 0 && lv_index >= autoDC54778B_ae) ) ; lv_index += autoDC54778B_ai ) {
        PlayerAddCooldown(lp_player, lib15EF4C78_gv_aP_Player_MercCooldownLinks[lv_index], libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, AbilityCommandGetAbility(lib15EF4C78_gv_aP_Player_MercAbilityCommands[lv_index]), "InfoArray[" + IntToString(AbilityCommandGetCommand(lib15EF4C78_gv_aP_Player_MercAbilityCommands[0])) + "].Cooldown.TimeStart", lp_player));
    }
}

void lib15EF4C78_gf_AP_Player_ClearMercenaryCooldowns (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto3C523EC9_ae = lib15EF4C78_gv_aP_Player_MERC_COOLDOWN_LINK_SIZE;
    const int auto3C523EC9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto3C523EC9_ai >= 0 && lv_index <= auto3C523EC9_ae) || (auto3C523EC9_ai < 0 && lv_index >= auto3C523EC9_ae) ) ; lv_index += auto3C523EC9_ai ) {
        libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_aP_Player_MercCooldownLinks[lv_index]);
    }
}

void lib15EF4C78_gf_AP_Player_ReapplyDefaultBehaviorsToUnit (unit lp_unit) {
    // Variable Declarations
    string lv_behavior;
    int lv_index;

    // Automatic Variable Declarations
    const int auto01D20A2A_ae = 24;
    const int auto01D20A2A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto01D20A2A_ai >= 0 && lv_index <= auto01D20A2A_ae) || (auto01D20A2A_ai < 0 && lv_index >= auto01D20A2A_ae) ) ; lv_index += auto01D20A2A_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "BehaviorArray[" + IntToString(lv_index) + "].Link", UnitGetOwner(lp_unit)));
        if ((lv_behavior != null) && (lv_behavior != "")) {
            UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
        }

    }
}

bool lib15EF4C78_gf_AP_Player_UnitTypeHasBehavior (string lp_unitType, string lp_behavior) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto412A424A_ae = 24;
    const int auto412A424A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto412A424A_ai >= 0 && lv_index <= auto412A424A_ae) || (auto412A424A_ai < 0 && lv_index >= auto412A424A_ae) ) ; lv_index += auto412A424A_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "BehaviorArray[" + IntToString(lv_index) + "].Link", c_playerAny) == lp_behavior)) {
            return true;
        }

    }
    return false;
}

unit lib15EF4C78_gf_AP_Player_UtilTownHallFindNearestMinerals (int lp_player, unit lp_regionMineralWorker) {
    // Variable Declarations
    unit lv_indexWorker;
    unit lv_indexWorker2;
    unit lv_indexResource;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup autoA29234D3_g;
    int autoA29234D3_u;
    unitgroup autoFDCA3A4B_g;
    int autoFDCA3A4B_u;
    unitgroup auto1E35ACEF_g;
    int auto1E35ACEF_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_regionMineralWorker), 10.0);
    lv_mineralGroup = UnitGroup(null, c_playerAny, lv_searchArea, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA29234D3_g = lv_mineralGroup;
    autoA29234D3_u = UnitGroupCount(autoA29234D3_g, c_unitCountAll);
    for (;; autoA29234D3_u -= 1) {
        lv_indexResource = UnitGroupUnitFromEnd(autoA29234D3_g, autoA29234D3_u);
        if (lv_indexResource == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) != "Minerals")) {
            UnitGroupRemove(lv_mineralGroup, lv_indexResource);
        }

    }
    autoFDCA3A4B_g = lv_mineralGroup;
    autoFDCA3A4B_u = UnitGroupCount(autoFDCA3A4B_g, c_unitCountAll);
    for (;; autoFDCA3A4B_u -= 1) {
        lv_indexWorker = UnitGroupUnitFromEnd(autoFDCA3A4B_g, autoFDCA3A4B_u);
        if (lv_indexWorker == null) { break; }
        lv_curDistance = 0.0;
        auto1E35ACEF_g = lv_mineralGroup;
        auto1E35ACEF_u = UnitGroupCount(auto1E35ACEF_g, c_unitCountAll);
        for (;; auto1E35ACEF_u -= 1) {
            lv_indexWorker2 = UnitGroupUnitFromEnd(auto1E35ACEF_g, auto1E35ACEF_u);
            if (lv_indexWorker2 == null) { break; }
            if ((lv_indexWorker != lv_indexWorker2)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexWorker), UnitGetPosition(lv_indexWorker2));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexWorker;
        }

    }
    return lv_bestMineral;
}

void lib15EF4C78_gf_AP_Player_UtilTownHallAutoRally (int lp_player) {
    // Variable Declarations
    unit lv_bestMineral;
    unit lv_townHall;

    // Automatic Variable Declarations
    unitgroup auto58D2977C_g;
    int auto58D2977C_u;

    // Variable Initialization

    // Implementation
    auto58D2977C_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58D2977C_u = UnitGroupCount(auto58D2977C_g, c_unitCountAll);
    for (;; auto58D2977C_u -= 1) {
        lv_townHall = UnitGroupUnitFromEnd(auto58D2977C_g, auto58D2977C_u);
        if (lv_townHall == null) { break; }
        if (((UnitGetType(lv_townHall) == "AP_Hatchery") || (UnitGetType(lv_townHall) == "AP_Lair") || (UnitGetType(lv_townHall) == "AP_Hive"))) {
            lv_bestMineral = lib15EF4C78_gf_AP_Player_UtilTownHallFindNearestMinerals(lp_player, lv_townHall);
            if ((lv_bestMineral != null)) {
                UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("AP_RallyHatchery", 1), lv_bestMineral), c_orderQueueReplace);
            }

        }

        if ((UnitGetType(lv_townHall) == "AP_Nexus")) {
            lv_bestMineral = lib15EF4C78_gf_AP_Player_UtilTownHallFindNearestMinerals(lp_player, lv_townHall);
            if ((lv_bestMineral != null)) {
                UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("AP_RallyNexus", 0), lv_bestMineral), c_orderQueueReplace);
            }

        }

        if (((UnitGetType(lv_townHall) == "AP_CommandCenter") || (UnitGetType(lv_townHall) == "AP_PlanetaryFortress"))) {
            lv_bestMineral = lib15EF4C78_gf_AP_Player_UtilTownHallFindNearestMinerals(lp_player, lv_townHall);
            if ((lv_bestMineral != null)) {
                UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("AP_RallyCommand", 0), lv_bestMineral), c_orderQueueReplace);
            }

        }

    }
}

void lib15EF4C78_gf_AP_Player_applyMalignantCreepFix (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "AP_MalignantCreepFix") == true) && (CreepIsPresent(UnitGetPosition(lp_unit)) == true)) {
        UnitSetPropertyFixed(lp_unit, c_unitPropLifeRegen, (UnitGetPropertyFixed(lp_unit, c_unitPropLifeRegen, c_unitPropCurrent) + 0.8202));
        UnitBehaviorAdd(lp_unit, "AP_MalignantCreepAttack", lp_unit, 1);
    }

}

void lib15EF4C78_gf_AP_Player_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "AP_SpawnLarva", lp_larvaCount);
}

bool lib15EF4C78_gf_AP_Player_Util_CanAutoHarvest (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ap_player_canAutoHarvestFunction(lp_player);
}

trigger auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_Trigger = null;
int auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_player;
region auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_regionMineralWorker;
region auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_regionGasWorker;

void lib15EF4C78_gf_StartingWorkersAutoHarvest (int lp_player, region lp_regionMineralWorker, region lp_regionGasWorker) {
    auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_player = lp_player;
    auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_regionMineralWorker = lp_regionMineralWorker;
    auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_regionGasWorker = lp_regionGasWorker;

    if (auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_Trigger == null) {
        auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_Trigger = TriggerCreate("auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_player;
    region lp_regionMineralWorker = auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_regionMineralWorker;
    region lp_regionGasWorker = auto_lib15EF4C78_gf_StartingWorkersAutoHarvest_lp_regionGasWorker;

    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_mineralResourceGroup;
    unitgroup lv_gasResourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;
    bool lv_isAutoGasResearched;

    // Automatic Variable Declarations
    unitgroup autoA467898B_g;
    int autoA467898B_u;
    unitgroup auto44FFF477_g;
    int auto44FFF477_u;
    unitgroup auto663AC6E7_g;
    int auto663AC6E7_u;
    unitgroup auto0B1E3758_g;
    int auto0B1E3758_u;
    unitgroup autoA08E901F_g;
    int autoA08E901F_u;
    unitgroup auto76736543_g;
    int auto76736543_u;
    unitgroup auto255FD378_g;
    int auto255FD378_u;
    unitgroup autoF5A4A365_g;
    int autoF5A4A365_u;

    // Variable Initialization
    lv_mineralResourceGroup = UnitGroupEmpty();
    lv_gasResourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((lib15EF4C78_gf_AP_Player_Util_CanAutoHarvest(lp_player) == false)) {
        return true;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, lp_player, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestGas = UnitGroup(null, lp_player, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        autoA467898B_g = lv_unitGroupHarvestGas;
        autoA467898B_u = UnitGroupCount(autoA467898B_g, c_unitCountAll);
        for (;; autoA467898B_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(autoA467898B_g, autoA467898B_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_gasResourceGroup);
            auto44FFF477_g = UnitGroup(null, lp_player, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto44FFF477_u = UnitGroupCount(auto44FFF477_g, c_unitCountAll);
            for (;; auto44FFF477_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto44FFF477_g, auto44FFF477_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator") || (UnitGetType(lv_indexResource) == "AP_Refinery") || (UnitGetType(lv_indexResource) == "AP_Extractor") || (UnitGetType(lv_indexResource) == "AP_Assimilator") || (UnitGetType(lv_indexResource) == "AP_AssimilatorProtossGeyser") || (UnitGetType(lv_indexResource) == "AP_AssimilatorPurifierGeyser") || (UnitGetType(lv_indexResource) == "AP_AssimilatorShakurasGeyser") || (UnitGetType(lv_indexResource) == "AP_RefineryRich") || (UnitGetType(lv_indexResource) == "AP_ExtractorRich") || (UnitGetType(lv_indexResource) == "AP_AssimilatorRich"))) {
                    UnitGroupAdd(lv_gasResourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_gasResourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_gasResourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }
            else {
                UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, lv_unitGroupHarvestGas);
            }
        }
    }

    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        auto663AC6E7_g = lv_unitGroupHarvestMinerals;
        auto663AC6E7_u = UnitGroupCount(auto663AC6E7_g, c_unitCountAll);
        for (;; auto663AC6E7_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(auto663AC6E7_g, auto663AC6E7_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_mineralResourceGroup);
            auto0B1E3758_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0B1E3758_u = UnitGroupCount(auto0B1E3758_g, c_unitCountAll);
            for (;; auto0B1E3758_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto0B1E3758_g, auto0B1E3758_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "MineralField") || (UnitGetType(lv_indexResource) == "RichMineralField"))) {
                    UnitGroupAdd(lv_mineralResourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_mineralResourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_mineralResourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        Wait(1.0, c_timeGame);
        autoA08E901F_g = lv_unitGroupHarvestGas;
        autoA08E901F_u = UnitGroupCount(autoA08E901F_g, c_unitCountAll);
        for (;; autoA08E901F_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(autoA08E901F_g, autoA08E901F_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_gasResourceGroup);
            auto76736543_g = UnitGroup(null, lp_player, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto76736543_u = UnitGroupCount(auto76736543_g, c_unitCountAll);
            for (;; auto76736543_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto76736543_g, auto76736543_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "AP_AutomatedRefinery") || (UnitGetType(lv_indexResource) == "AP_AutomatedExtractor") || (UnitGetType(lv_indexResource) == "AP_AutomatedAssimilator") || (UnitGetType(lv_indexResource) == "AP_AutomatedRefineryRich") || (UnitGetType(lv_indexResource) == "AP_AutomatedExtractorRich") || (UnitGetType(lv_indexResource) == "AP_AutomatedAssimilatorRich"))) {
                    UnitGroupAdd(lv_gasResourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_gasResourceGroup, c_unitCountAlive) > 0)) {
                lv_isAutoGasResearched = true;
                break;
            }

        }
        if ((lv_isAutoGasResearched == true)) {
            auto255FD378_g = lv_unitGroupHarvestGas;
            auto255FD378_u = UnitGroupCount(auto255FD378_g, c_unitCountAll);
            for (;; auto255FD378_u -= 1) {
                lv_indexWorker = UnitGroupUnitFromEnd(auto255FD378_g, auto255FD378_u);
                if (lv_indexWorker == null) { break; }
                UnitGroupClear(lv_mineralResourceGroup);
                autoF5A4A365_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF5A4A365_u = UnitGroupCount(autoF5A4A365_g, c_unitCountAll);
                for (;; autoF5A4A365_u -= 1) {
                    lv_indexResource = UnitGroupUnitFromEnd(autoF5A4A365_g, autoF5A4A365_u);
                    if (lv_indexResource == null) { break; }
                    if (((UnitGetType(lv_indexResource) == "MineralField") || (UnitGetType(lv_indexResource) == "RichMineralField"))) {
                        UnitGroupAdd(lv_mineralResourceGroup, lv_indexResource);
                    }

                }
                if ((UnitGroupCount(lv_mineralResourceGroup, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_mineralResourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
                }

            }
        }

    }

    return true;
}

unit lib15EF4C78_gf_AP_PlayerTransfrormerLand_getTriggeringUnit () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_PlayerTransformerLandTriggeringUnit;
}

void lib15EF4C78_gf_LotV_ShowCampaignTeaching () {
    // Automatic Variable Declarations
    // Implementation
    ap_player_LotV_ShowCampaignTeaching();
}

void lib15EF4C78_gf_LotV_HideCampaignTeaching () {
    // Automatic Variable Declarations
    // Implementation
    ap_player_LotV_HideCampaignTeaching();
}

bool lib15EF4C78_gf_AP_Player_isPlayerInCinematicMode (int lp_player) {
    // Variable Declarations
    bool lv_cinematicMode;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_cinematicMode = ap_player_cinematicModeFunction(lp_player);
    return lv_cinematicMode;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Apply Zerg Structure Rapid Regen
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ApplyZergStructureRapidRegen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2A1AF36_g;
    int autoD2A1AF36_u;
    unit autoD2A1AF36_var;
    unitgroup autoF5B11B43_g;
    int autoF5B11B43_u;
    unit autoF5B11B43_var;

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "AP_ZergStructureRapidRegen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUpgradeLevelDelta() >= 1)) {
        PlayerAddResponse(EventPlayer(), "AP_ZergStructureRapidRegen");
        autoD2A1AF36_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD2A1AF36_u = UnitGroupCount(autoD2A1AF36_g, c_unitCountAll);
        for (;; autoD2A1AF36_u -= 1) {
            autoD2A1AF36_var = UnitGroupUnitFromEnd(autoD2A1AF36_g, autoD2A1AF36_u);
            if (autoD2A1AF36_var == null) { break; }
            UnitBehaviorAdd(autoD2A1AF36_var, "AP_ZergStructureRapidRegen", autoD2A1AF36_var, 1);
        }
    }

    if ((EventUpgradeLevelDelta() <= -1)) {
        PlayerRemoveResponse(EventPlayer(), "AP_ZergStructureRapidRegen");
        autoF5B11B43_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF5B11B43_u = UnitGroupCount(autoF5B11B43_g, c_unitCountAll);
        for (;; autoF5B11B43_u -= 1) {
            autoF5B11B43_var = UnitGroupUnitFromEnd(autoF5B11B43_g, autoF5B11B43_u);
            if (autoF5B11B43_var == null) { break; }
            UnitBehaviorRemove(autoF5B11B43_var, "AP_ZergStructureRapidRegen", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ApplyZergStructureRapidRegen_Init () {
    lib15EF4C78_gt_ApplyZergStructureRapidRegen = TriggerCreate("lib15EF4C78_gt_ApplyZergStructureRapidRegen_Func");
    TriggerAddEventUpgradeLevelChanged(lib15EF4C78_gt_ApplyZergStructureRapidRegen, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunkerRegister
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Stukov_InfestedBunkerRegister_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib15EF4C78_gv_stukov_BunkerGroup, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((lib15EF4C78_gv_stukov_RallyPoint != null)) {
        UnitGroupIssueOrder(lib15EF4C78_gv_stukov_BunkerGroup, OrderTargetingPoint(AbilityCommand("AP_SIInfestedBunkerRally", 0), lib15EF4C78_gv_stukov_RallyPoint), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Stukov_InfestedBunkerRegister_Init () {
    lib15EF4C78_gt_Stukov_InfestedBunkerRegister = TriggerCreate("lib15EF4C78_gt_Stukov_InfestedBunkerRegister_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_Stukov_InfestedBunkerRegister, 1, "AP_SIInfestedBunkerCreation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunkerInitialSpawn
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Stukov_InfestedBunkerInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_size;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto0C07B99A_g;
    int auto0C07B99A_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "AP_SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "AP_SIInfestedBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_size = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "AP_SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(EventUnitProgressUnit()));
    if ((lv_size > 0)) {
        UnitCargoCreate(EventUnitProgressUnit(), "AP_SIInfestedTrooper", lv_size);
        auto0C07B99A_g = UnitCargoLastCreatedGroup();
        auto0C07B99A_u = UnitGroupCount(auto0C07B99A_g, c_unitCountAll);
        for (;; auto0C07B99A_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto0C07B99A_g, auto0C07B99A_u);
            if (lv_unit == null) { break; }
            lib15EF4C78_gf_Stukov_NewBunkerUnitProcess(lv_unit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Stukov_InfestedBunkerInitialSpawn_Init () {
    lib15EF4C78_gt_Stukov_InfestedBunkerInitialSpawn = TriggerCreate("lib15EF4C78_gt_Stukov_InfestedBunkerInitialSpawn_Func");
    TriggerAddEventUnitConstructProgress(lib15EF4C78_gt_Stukov_InfestedBunkerInitialSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunkerAutoLoad
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Stukov_InfestedBunkerAutoLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_player;
    point lv_position;
    int lv_size;
    unit lv_newUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();
    lv_position = UnitGetPosition(lv_bunker);
    lv_size = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "AP_SIInfestedBunkerTransport", "TotalCargoSpace", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_size > 0) && (UnitCargoValue(lv_bunker, c_unitCargoSpaceFree) > 0)) {
        UnitCargoCreate(lv_bunker, "AP_SIInfestedTrooper", 1);
        lv_newUnit = UnitCargoLastCreated();
    }
    else {
        if ((lib15EF4C78_gv_stukov_RallyPoint != null)) {
            lv_position = libNtve_gf_PointOffsetTowardsPoint(lv_position, 1.0, lib15EF4C78_gv_stukov_RallyPoint);
        }
        else {
            lv_position = PointWithOffset(lv_position, 0.0, -0.5);
        }
        UnitCreate(1, "AP_SIInfestedTrooper", 0, lv_player, lv_position, 270.0);
        lv_newUnit = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("Medivac_Unload", 0), lv_player, PlayerGroupAll(), lv_bunker, 0.0, 100.0, 0.0);
    }
    lib15EF4C78_gf_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Stukov_InfestedBunkerAutoLoad_Init () {
    lib15EF4C78_gt_Stukov_InfestedBunkerAutoLoad = TriggerCreate("lib15EF4C78_gt_Stukov_InfestedBunkerAutoLoad_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_Stukov_InfestedBunkerAutoLoad, c_playerAny, "AP_SIInfestedBunkerAutoSpawnerDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunkerUnloadRally
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Stukov_InfestedBunkerUnloadRally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_Stukov_NewBunkerUnitProcess(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Stukov_InfestedBunkerUnloadRally_Init () {
    lib15EF4C78_gt_Stukov_InfestedBunkerUnloadRally = TriggerCreate("lib15EF4C78_gt_Stukov_InfestedBunkerUnloadRally_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_Stukov_InfestedBunkerUnloadRally, 1, "AP_SIInfestedBunkerBunkerUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_HordeWaveCreated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Stukov_HordeWaveCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib15EF4C78_gv_stukov_HordeGroup, EventUnitCreatedUnit());
    lib15EF4C78_gf_Stukov_SingleUnitGoToRally(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Stukov_HordeWaveCreated_Init () {
    lib15EF4C78_gt_Stukov_HordeWaveCreated = TriggerCreate("lib15EF4C78_gt_Stukov_HordeWaveCreated_Func");
    TriggerAddEventUnitCreated(lib15EF4C78_gt_Stukov_HordeWaveCreated, null, "AP_SIMorphtoInfestedMarine", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_RallyPlaced
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Stukov_RallyPlaced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gv_stukov_RallyTarget = null;
    lib15EF4C78_gv_stukov_RallyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    if ((lib15EF4C78_gv_stukov_RallyBeaconUnit != null)) {
        UnitRemove(lib15EF4C78_gv_stukov_RallyBeaconUnit);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, lib15EF4C78_gv_stukov_RallyPoint);
    lib15EF4C78_gv_stukov_RallyBeaconUnit = UnitLastCreated();
    UnitGroupIssueOrder(lib15EF4C78_gv_stukov_BunkerGroup, OrderTargetingPoint(AbilityCommand("AP_SIInfestedBunkerRally", 0), lib15EF4C78_gv_stukov_RallyPoint), c_orderQueueReplace);
    lib15EF4C78_gf_Stukov_HordeGoToRally();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Stukov_RallyPlaced_Init () {
    lib15EF4C78_gt_Stukov_RallyPlaced = TriggerCreate("lib15EF4C78_gt_Stukov_RallyPlaced_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_Stukov_RallyPlaced, c_playerAny, "AP_SIStukovPlaceHordeRallyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_UnitCostRefund
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Stukov_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Stukov_UnitCostRefund_Init () {
    lib15EF4C78_gt_CM_Stukov_UnitCostRefund = TriggerCreate("lib15EF4C78_gt_CM_Stukov_UnitCostRefund_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Stukov_UnitCostRefund, c_playerAny, "AP_CocoonCreateLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedSiegeTankDeath
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Stukov_InfestedSiegeTankDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;
    int lv_player;

    // Automatic Variable Declarations
    int auto3194256A_ae;
    const int auto3194256A_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "AP_StukovInfestedSiegeTankAmmo") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = UnitBehaviorCount(EventUnit(), "AP_StukovInfestedSiegeTankAmmo");
    auto3194256A_ae = lv_stackCount;
    lv_stackCount = 1;
    for ( ; ( (auto3194256A_ai >= 0 && lv_stackCount <= auto3194256A_ae) || (auto3194256A_ai < 0 && lv_stackCount >= auto3194256A_ae) ) ; lv_stackCount += auto3194256A_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_SIVolatileInfested", 0, 1, UnitGetPosition(EventUnit()));
        UnitSetState(UnitLastCreated(), c_unitStateUsingSupply, false);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AP_SIBarracksTrainTimedLife", lv_player, 1);
        UnitGroupAdd(lib15EF4C78_gv_stukov_HordeGroup, UnitLastCreated());
        lib15EF4C78_gf_Stukov_SingleUnitGoToRally(UnitLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Stukov_InfestedSiegeTankDeath_Init () {
    lib15EF4C78_gt_AP_Stukov_InfestedSiegeTankDeath = TriggerCreate("lib15EF4C78_gt_AP_Stukov_InfestedSiegeTankDeath_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_AP_Stukov_InfestedSiegeTankDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_InitDetectionFactions
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_InitDetectionFactions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_ApplyDetectionUpgrades();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_InitDetectionFactions_Init () {
    lib15EF4C78_gt_AP_InitDetectionFactions = TriggerCreate("lib15EF4C78_gt_AP_InitDetectionFactions_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_AP_InitDetectionFactions);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArchipelagoPlayerHandlersConstructor
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib15EF4C78_gt_AP_Player_Merc_ArrayInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Init () {
    lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor = TriggerCreate("lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 004
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_GatewayStickyKeys_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AP_Sticky_ShowUnitCommand(EventPlayer(), AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder())), AP_Sticky_BUILDING_GATEWAY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_GatewayStickyKeys_Init () {
    lib15EF4C78_gt_AP_Player_GatewayStickyKeys = TriggerCreate("lib15EF4C78_gt_AP_Player_GatewayStickyKeys_Func");
    TriggerAddEventUnitOrder(lib15EF4C78_gt_AP_Player_GatewayStickyKeys, null, AbilityCommand("AP_GatewayTrain", 255));
    TriggerAddEventUnitOrder(lib15EF4C78_gt_AP_Player_GatewayStickyKeys, null, AbilityCommand("AP_WarpGateTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 005
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_RoboStickyKeys_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AP_Sticky_ShowUnitCommand(EventPlayer(), AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder())), AP_Sticky_BUILDING_ROBO);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_RoboStickyKeys_Init () {
    lib15EF4C78_gt_AP_Player_RoboStickyKeys = TriggerCreate("lib15EF4C78_gt_AP_Player_RoboStickyKeys_Func");
    TriggerAddEventUnitOrder(lib15EF4C78_gt_AP_Player_RoboStickyKeys, null, AbilityCommand("AP_RoboticsFacilityTrain", 255));
    TriggerAddEventUnitOrder(lib15EF4C78_gt_AP_Player_RoboStickyKeys, null, AbilityCommand("AP_RoboticsFacilityWarpTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 006
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_StargateStickyKeys_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AP_Sticky_ShowUnitCommand(EventPlayer(), AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder())), AP_Sticky_BUILDING_STARGATE);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_StargateStickyKeys_Init () {
    lib15EF4C78_gt_AP_Player_StargateStickyKeys = TriggerCreate("lib15EF4C78_gt_AP_Player_StargateStickyKeys_Func");
    TriggerAddEventUnitOrder(lib15EF4C78_gt_AP_Player_StargateStickyKeys, null, AbilityCommand("AP_StargateTrain", 255));
    TriggerAddEventUnitOrder(lib15EF4C78_gt_AP_Player_StargateStickyKeys, null, AbilityCommand("AP_StargateWarpTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to AP_Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoAP_Barracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_BarracksReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoAP_Barracks_Init () {
    lib15EF4C78_gt_ReactorswaptoAP_Barracks = TriggerCreate("lib15EF4C78_gt_ReactorswaptoAP_Barracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoAP_Barracks, null, "AP_BarracksReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoBarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "BarracksReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoBarracks_Init () {
    lib15EF4C78_gt_ReactorswaptoBarracks = TriggerCreate("lib15EF4C78_gt_ReactorswaptoBarracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoBarracks, null, "BarracksReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to AP_Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoAP_Factory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_FactoryReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoAP_Factory_Init () {
    lib15EF4C78_gt_ReactorswaptoAP_Factory = TriggerCreate("lib15EF4C78_gt_ReactorswaptoAP_Factory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoAP_Factory, null, "AP_FactoryReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoFactory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "FactoryReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoFactory_Init () {
    lib15EF4C78_gt_ReactorswaptoFactory = TriggerCreate("lib15EF4C78_gt_ReactorswaptoFactory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoFactory, null, "FactoryReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to AP_Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoAP_Starport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_StarportReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoAP_Starport_Init () {
    lib15EF4C78_gt_ReactorswaptoAP_Starport = TriggerCreate("lib15EF4C78_gt_ReactorswaptoAP_Starport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoAP_Starport, null, "AP_StarportReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoStarport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "StarportReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoStarport_Init () {
    lib15EF4C78_gt_ReactorswaptoStarport = TriggerCreate("lib15EF4C78_gt_ReactorswaptoStarport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoStarport, null, "StarportReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to AP_Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoAP_Barracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoAP_Barracks_Init () {
    lib15EF4C78_gt_TechLabswaptoAP_Barracks = TriggerCreate("lib15EF4C78_gt_TechLabswaptoAP_Barracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoAP_Barracks, null, "AP_BarracksTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoBarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoBarracks_Init () {
    lib15EF4C78_gt_TechLabswaptoBarracks = TriggerCreate("lib15EF4C78_gt_TechLabswaptoBarracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoBarracks, null, "BarracksTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to AP_Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoAP_Factory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_FactoryTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoAP_Factory_Init () {
    lib15EF4C78_gt_TechLabswaptoAP_Factory = TriggerCreate("lib15EF4C78_gt_TechLabswaptoAP_Factory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoAP_Factory, null, "AP_FactoryTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoFactory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "FactoryTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoFactory_Init () {
    lib15EF4C78_gt_TechLabswaptoFactory = TriggerCreate("lib15EF4C78_gt_TechLabswaptoFactory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoFactory, null, "FactoryTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to AP_Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoAP_Starport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_StarportTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoAP_Starport_Init () {
    lib15EF4C78_gt_TechLabswaptoAP_Starport = TriggerCreate("lib15EF4C78_gt_TechLabswaptoAP_Starport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoAP_Starport, null, "AP_StarportTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoStarport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "StarportTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoStarport_Init () {
    lib15EF4C78_gt_TechLabswaptoStarport = TriggerCreate("lib15EF4C78_gt_TechLabswaptoStarport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoStarport, null, "StarportTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Reactor swap to AP_Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_BarracksTechReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Init () {
    lib15EF4C78_gt_TechReactorswaptoAP_Barracks = TriggerCreate("lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechReactorswaptoAP_Barracks, null, "AP_BarracksTechReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Reactor swap to AP_Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechReactorswaptoAP_Factory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_FactoryTechReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechReactorswaptoAP_Factory_Init () {
    lib15EF4C78_gt_TechReactorswaptoAP_Factory = TriggerCreate("lib15EF4C78_gt_TechReactorswaptoAP_Factory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechReactorswaptoAP_Factory, null, "AP_FactoryTechReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Reactor swap to AP_Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechReactorswaptoAP_Starport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_StarportTechReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechReactorswaptoAP_Starport_Init () {
    lib15EF4C78_gt_TechReactorswaptoAP_Starport = TriggerCreate("lib15EF4C78_gt_TechReactorswaptoAP_Starport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechReactorswaptoAP_Starport, null, "AP_StarportTechReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Psi Strike
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_NovaPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Automatic Variable Declarations
    const int auto7B80AF78_ae = 7;
    const int auto7B80AF78_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto7B80AF78_ai >= 0 && lv_i <= auto7B80AF78_ae) || (auto7B80AF78_ai < 0 && lv_i >= auto7B80AF78_ae) ) ; lv_i += auto7B80AF78_ai ) {
        lib15EF4C78_gv_kerriganPsiStrikeFacing2 = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((lib15EF4C78_gv_kerriganPsiStrikeFacing2 < (lv_facing - 90.0)) && (lib15EF4C78_gv_kerriganPsiStrikeFacing2 > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "AP_NovaPsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((lib15EF4C78_gv_kerriganPsiStrikeFacing2 > (lv_facing + 90.0)) && (lib15EF4C78_gv_kerriganPsiStrikeFacing2 < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "AP_NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((lib15EF4C78_gv_kerriganPsiStrikeFacing2 > (lv_facing + 90.0)) || (lib15EF4C78_gv_kerriganPsiStrikeFacing2 < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "AP_NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_NovaPsiStrike_Init () {
    lib15EF4C78_gt_NovaPsiStrike = TriggerCreate("lib15EF4C78_gt_NovaPsiStrike_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_NovaPsiStrike, null, AbilityCommand("AP_NovaPsiStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fury of One Height
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_FuryofOneHeight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nova;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nova = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_nova, UnitGetHeight(lv_target), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_FuryofOneHeight_Init () {
    lib15EF4C78_gt_FuryofOneHeight = TriggerCreate("lib15EF4C78_gt_FuryofOneHeight_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_FuryofOneHeight, c_playerAny, "AP_NovaWeaponBlazefireBladeShadowFuryImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fury of One Reset
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_FuryofOneReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nova;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nova = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_nova, 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_FuryofOneReset_Init () {
    lib15EF4C78_gt_FuryofOneReset = TriggerCreate("lib15EF4C78_gt_FuryofOneReset_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_FuryofOneReset, null, "AP_NovaWeaponBlazefireBladeShadowFuryController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_setHolodecoyWeapon
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AP_NovaHoloDecoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), lib15EF4C78_gf_AP_Player_findNovaWeapon(EventUnit()), EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Init () {
    lib15EF4C78_gt_AP_Player_setHolodecoyWeapon = TriggerCreate("lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Func");
    TriggerAddEventUnitCreated(lib15EF4C78_gt_AP_Player_setHolodecoyWeapon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveNovaCooldownWait
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetCooldown(lib15EF4C78_gv_nM_HeroRevivePlayer[(lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova)], lib15EF4C78_gv_nM_HeroReviveCDLink[(lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova)]) == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib15EF4C78_gf_NM_HeroRevive(lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova);
    if ((lib15EF4C78_gv_nM_HeroRevivePlayer[(lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova)] == 1)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait_Init () {
    lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait = TriggerCreate("lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait_Func");
    TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait, false);
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveVOReminder
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_NM_HeroReviveVOReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("StoryStates", "NovaHasRevivedBefore", "Value", 1) == 0)) {
        UserDataSetInt("StoryStates", "NovaHasRevivedBefore", "Value", 1, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_NM_HeroReviveVOReminder_Init () {
    lib15EF4C78_gt_NM_HeroReviveVOReminder = TriggerCreate("lib15EF4C78_gt_NM_HeroReviveVOReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveNova
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_NM_HeroReviveNova_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "AP_NovaHero")) {
        lib15EF4C78_gf_HandleHeroDeathNova(EventUnit(), null, -1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_NM_HeroReviveNova_Init () {
    lib15EF4C78_gt_NM_HeroReviveNova = TriggerCreate("lib15EF4C78_gt_NM_HeroReviveNova_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_NM_HeroReviveNova, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveOnBehaviorExpiry
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_NM_HeroReviveOnBehaviorExpiry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_NovaReviveCocoon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait, false);
    lib15EF4C78_gf_NM_HeroRevive(lib15EF4C78_ge_NM_HeroType_NM_HeroType_Nova);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_NM_HeroReviveOnBehaviorExpiry_Init () {
    lib15EF4C78_gt_NM_HeroReviveOnBehaviorExpiry = TriggerCreate("lib15EF4C78_gt_NM_HeroReviveOnBehaviorExpiry_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_NM_HeroReviveOnBehaviorExpiry, null, "AP_CocoonReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set5SecondsMark
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Set5SecondsMark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoEC3833D4_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC3833D4_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoEC3833D4_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "AP_GameTimeGreaterthan5Seconds", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Set5SecondsMark_Init () {
    lib15EF4C78_gt_Set5SecondsMark = TriggerCreate("lib15EF4C78_gt_Set5SecondsMark_Func");
    TriggerAddEventTimeElapsed(lib15EF4C78_gt_Set5SecondsMark, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Relocate Finish
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_WarpRelocateFinish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), EventUnitTargetPoint(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_WarpRelocateFinish_Init () {
    lib15EF4C78_gt_WarpRelocateFinish = TriggerCreate("lib15EF4C78_gt_WarpRelocateFinish_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_WarpRelocateFinish, null, AbilityCommand("AP_WarpRelocate", 255), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Relocate Assimilator Finish
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_WarpRelocateAssimilatorFinish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_WarpRelocateAssimilatorFinish_Init () {
    lib15EF4C78_gt_WarpRelocateAssimilatorFinish = TriggerCreate("lib15EF4C78_gt_WarpRelocateAssimilatorFinish_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_WarpRelocateAssimilatorFinish, null, AbilityCommand("AP_WarpRelocateAssimilator", 255), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingRespawnInit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZerglingRespawnInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoFB63C786_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFB63C786_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoFB63C786_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_ZerglingRespawnControllerUnit", 0, lv_currentPlayer, Point(0.0, 0.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZerglingRespawnInit_Init () {
    lib15EF4C78_gt_ZerglingRespawnInit = TriggerCreate("lib15EF4C78_gt_ZerglingRespawnInit_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_ZerglingRespawnInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingRespawnFindPrimaryOnZerglingDeath
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnZerglingDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_primaryBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "AP_Zergling") || (UnitGetType(EventUnit()) == "AP_ZerglingBurrowed")))) {
            return false;
        }

        if (!(((lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())] == null) || (UnitIsAlive(lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())]) == false) || (libNtve_gf_UnitIsHidden(lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())]) == true) || (UnitHasBehavior2(lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())], "AP_ZerglingRespawnPrimary") == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lv_player);
    lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player];
    if ((lv_primaryBuilding != null)) {
        UnitCreateEffectUnit(lv_primaryBuilding, "AP_ZerglingRespawnPrimaryRemoveOthers", lv_primaryBuilding);
        UnitBehaviorAdd(lv_primaryBuilding, "AP_ZerglingRespawnPrimary", lv_primaryBuilding, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnZerglingDeath_Init () {
    lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnZerglingDeath = TriggerCreate("lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnZerglingDeath_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnZerglingDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingRespawnFindPrimaryOnMassRecallTarget
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnMassRecallTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_primaryBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())] == null) || (UnitIsAlive(lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())]) == false) || (libNtve_gf_UnitIsHidden(lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())]) == true) || (UnitHasBehavior2(lib15EF4C78_gv_aP_Player_PrimaryTownHall[UnitGetOwner(EventUnit())], "AP_ZerglingRespawnPrimary") == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lv_player);
    lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player];
    if ((lv_primaryBuilding != null)) {
        UnitCreateEffectUnit(lv_primaryBuilding, "AP_ZerglingRespawnPrimaryRemoveOthers", lv_primaryBuilding);
        UnitBehaviorAdd(lv_primaryBuilding, "AP_ZerglingRespawnPrimary", lv_primaryBuilding, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnMassRecallTarget_Init () {
    lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnMassRecallTarget = TriggerCreate("lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnMassRecallTarget_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnMassRecallTarget, null, AbilityCommand("AP_SOARecall", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingRespawnFindPrimaryWhenTimeElapsed
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZerglingRespawnFindPrimaryWhenTimeElapsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_primaryBuilding;

    // Automatic Variable Declarations
    playergroup autoA4560250_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoA4560250_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA4560250_g, lv_player);
        if (lv_player < 0) { break; }
        if (((lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player] == null) || (UnitIsAlive(lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player]) == false) || (libNtve_gf_UnitIsHidden(lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player]) == true) || (UnitHasBehavior2(lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player], "AP_ZerglingRespawnPrimary") == false))) {
            lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lv_player);
            lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_player];
            if ((lv_primaryBuilding != null)) {
                UnitCreateEffectUnit(lv_primaryBuilding, "AP_ZerglingRespawnPrimaryRemoveOthers", lv_primaryBuilding);
                UnitBehaviorAdd(lv_primaryBuilding, "AP_ZerglingRespawnPrimary", lv_primaryBuilding, 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZerglingRespawnFindPrimaryWhenTimeElapsed_Init () {
    lib15EF4C78_gt_ZerglingRespawnFindPrimaryWhenTimeElapsed = TriggerCreate("lib15EF4C78_gt_ZerglingRespawnFindPrimaryWhenTimeElapsed_Func");
    TriggerAddEventTimeElapsed(lib15EF4C78_gt_ZerglingRespawnFindPrimaryWhenTimeElapsed, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Psi Strike
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_KerriganPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Automatic Variable Declarations
    const int auto0573C803_ae = 14;
    const int auto0573C803_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto0573C803_ai >= 0 && lv_i <= auto0573C803_ae) || (auto0573C803_ai < 0 && lv_i >= auto0573C803_ae) ) ; lv_i += auto0573C803_ai ) {
        lib15EF4C78_gv_kerriganPsiStrikeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((lib15EF4C78_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)) && (lib15EF4C78_gv_kerriganPsiStrikeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "AP_PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((lib15EF4C78_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) && (lib15EF4C78_gv_kerriganPsiStrikeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "AP_PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((lib15EF4C78_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) || (lib15EF4C78_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "AP_PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_KerriganPsiStrike_Init () {
    lib15EF4C78_gt_KerriganPsiStrike = TriggerCreate("lib15EF4C78_gt_KerriganPsiStrike_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_KerriganPsiStrike, null, AbilityCommand("AP_PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Econ Drop
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_KerriganEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    string lv_unitType;
    point lv_position;
    string lv_resource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_unitType = UnitGetType(lv_dyingunit);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_dyingunit, "AP_KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitType, "Food", c_playerAny) == -0.5)) {
        lv_resource = "AP_KerriganVoidCoopEconDropLT1";
    }
    else if ((ValidatorExecute("AP_TargetisHybrid", libNtve_gf_KillingUnit(), lv_dyingunit) == ValidatorExecute("AP_Dummy", libNtve_gf_KillingUnit(), lv_dyingunit))) {
        lv_resource = "AP_KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "Food", 0) == -1)) {
        lv_resource = "AP_KerriganVoidCoopEconDrop1";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "Food", 0) == -2)) {
        lv_resource = "AP_KerriganVoidCoopEconDrop2";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "Food", 0) == -3)) {
        lv_resource = "AP_KerriganVoidCoopEconDrop3";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "Food", 0) == -4)) {
        lv_resource = "AP_KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "Food", 0) < -4)) {
        lv_resource = "AP_KerriganVoidCoopEconDrop5";
    }
    if ((lv_resource == null)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, UnitBehaviorEffectPlayer(EventUnit(), "AP_KerriganVoidCoopEconDrop", c_effectPlayerCaster, 0), lv_position);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_KerriganEconDrop_Init () {
    lib15EF4C78_gt_KerriganEconDrop = TriggerCreate("lib15EF4C78_gt_KerriganEconDrop_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_KerriganEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipPurifierRefinedWeaponsMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipPurifierRefinedWeaponsMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_RefinedWeaponsPurifierMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_98E62577"), "AP\\Assets\\Custom\\Textures\\btn-upgrade-protoss-airweaponslevel5.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipPurifierRefinedWeaponsMax_Init () {
    lib15EF4C78_gt_MothershipPurifierRefinedWeaponsMax = TriggerCreate("lib15EF4C78_gt_MothershipPurifierRefinedWeaponsMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipPurifierRefinedWeaponsMax, null, "AP_RefinedWeaponsPurifierMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipPurifierBolsteredPlatingMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipPurifierBolsteredPlatingMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_BolsteredPlatingPurifierMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_4E569564"), "AP\\Assets\\Custom\\Textures\\btn-upgrade-protoss-airarmorlevel5.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipPurifierBolsteredPlatingMax_Init () {
    lib15EF4C78_gt_MothershipPurifierBolsteredPlatingMax = TriggerCreate("lib15EF4C78_gt_MothershipPurifierBolsteredPlatingMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipPurifierBolsteredPlatingMax, null, "AP_BolsteredPlatingPurifierMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipPurifierOptimizedEnergyUsageMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipPurifierOptimizedEnergyUsageMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_OptimizedEnergyUsagePurifierMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_0D8CE92E"), "Assets\\Textures\\btn-ability-stetmann-garystetelliteovercharge-energy.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipPurifierOptimizedEnergyUsageMax_Init () {
    lib15EF4C78_gt_MothershipPurifierOptimizedEnergyUsageMax = TriggerCreate("lib15EF4C78_gt_MothershipPurifierOptimizedEnergyUsageMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipPurifierOptimizedEnergyUsageMax, null, "AP_OptimizedEnergyUsagePurifierMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipAiurRefinedWeaponsMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipAiurRefinedWeaponsMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_RefinedWeaponsAiurMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_D0DAE553"), "AP\\Assets\\Custom\\Textures\\btn-upgrade-protoss-airweaponslevel5.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipAiurRefinedWeaponsMax_Init () {
    lib15EF4C78_gt_MothershipAiurRefinedWeaponsMax = TriggerCreate("lib15EF4C78_gt_MothershipAiurRefinedWeaponsMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipAiurRefinedWeaponsMax, null, "AP_RefinedWeaponsAiurMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipAiurBolsteredPlatingMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipAiurBolsteredPlatingMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_BolsteredPlatingAiurMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_1D04569E"), "AP\\Assets\\Custom\\Textures\\btn-upgrade-protoss-airarmorlevel5.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipAiurBolsteredPlatingMax_Init () {
    lib15EF4C78_gt_MothershipAiurBolsteredPlatingMax = TriggerCreate("lib15EF4C78_gt_MothershipAiurBolsteredPlatingMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipAiurBolsteredPlatingMax, null, "AP_BolsteredPlatingAiurMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipAiurOptimizedEnergyUsageMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipAiurOptimizedEnergyUsageMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_OptimizedEnergyUsageAiurMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_46062F2F"), "Assets\\Textures\\btn-ability-stetmann-garystetelliteovercharge-energy.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipAiurOptimizedEnergyUsageMax_Init () {
    lib15EF4C78_gt_MothershipAiurOptimizedEnergyUsageMax = TriggerCreate("lib15EF4C78_gt_MothershipAiurOptimizedEnergyUsageMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipAiurOptimizedEnergyUsageMax, null, "AP_OptimizedEnergyUsageAiurMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipTaldarimRefinedWeaponsMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipTaldarimRefinedWeaponsMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_RefinedWeaponsTaldarimMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_E7F65FF1"), "Assets\\Textures\\btn-progression-stetmann-02-energyconfiguration.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipTaldarimRefinedWeaponsMax_Init () {
    lib15EF4C78_gt_MothershipTaldarimRefinedWeaponsMax = TriggerCreate("lib15EF4C78_gt_MothershipTaldarimRefinedWeaponsMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipTaldarimRefinedWeaponsMax, null, "AP_RefinedWeaponsTaldarimMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipTaldarimBolsteredPlatingMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipTaldarimBolsteredPlatingMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_BolsteredPlatingTaldarimMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_261A2162"), "Assets\\Textures\\btn-progression-stetmann-02-energyconfiguration.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipTaldarimBolsteredPlatingMax_Init () {
    lib15EF4C78_gt_MothershipTaldarimBolsteredPlatingMax = TriggerCreate("lib15EF4C78_gt_MothershipTaldarimBolsteredPlatingMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipTaldarimBolsteredPlatingMax, null, "AP_BolsteredPlatingTaldarimMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipTaldarimOptimizedEnergyUsageMax
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipTaldarimOptimizedEnergyUsageMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "AP_OptimizedEnergyUsageTaldarimMax", 1);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringExternal("Param/Value/lib_15EF4C78_D87CFEAC"), "Assets\\Textures\\btn-progression-stetmann-02-energyconfiguration.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipTaldarimOptimizedEnergyUsageMax_Init () {
    lib15EF4C78_gt_MothershipTaldarimOptimizedEnergyUsageMax = TriggerCreate("lib15EF4C78_gt_MothershipTaldarimOptimizedEnergyUsageMax_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipTaldarimOptimizedEnergyUsageMax, null, "AP_OptimizedEnergyUsageTaldarimMax", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MothershipHangarRefill
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MothershipHangarRefill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(EventUnit(), AbilityCommand("AP_MothershipTaldarimHangar", 0), 8);
    UnitMagazineArm(EventUnit(), AbilityCommand("AP_MothershipAiurHangar", 0), 8);
    UnitMagazineArm(EventUnit(), AbilityCommand("AP_MothershipPurifierHangar", 0), 6);
    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(EventUnit()), StringToText(""), "Assets\\Textures\\btn-upgrade-protoss-fenix-bomberresearch.dds", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MothershipHangarRefill_Init () {
    lib15EF4C78_gt_MothershipHangarRefill = TriggerCreate("lib15EF4C78_gt_MothershipHangarRefill_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_MothershipHangarRefill, null, "AP_MothershipHangar", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAStatusWatch
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoAStatusWatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC639B50B_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        autoC639B50B_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoC639B50B_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lib15EF4C78_gv_pM_SoAEnabledForPlayer[lv_player] == true)) {
                if (((lib15EF4C78_gv_pM_SoAUnit[lv_player] == null) || (UnitIsAlive(lib15EF4C78_gv_pM_SoAUnit[lv_player]) == false))) {
                    lib15EF4C78_gf_PM_SoACreateUnit(lv_player);
                    UnitSetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lv_player], c_unitPropEnergy, lib15EF4C78_gv_pM_SoALastKnownEnergy);
                }
                else {
                    lib15EF4C78_gv_pM_SoALastKnownEnergy = UnitGetPropertyFixed(lib15EF4C78_gv_pM_SoAUnit[lv_player], c_unitPropEnergy, c_unitPropCurrent);
                }
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoAStatusWatch_Init () {
    lib15EF4C78_gt_PM_SoAStatusWatch = TriggerCreate("lib15EF4C78_gt_PM_SoAStatusWatch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAAutonomousStatusWatch
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoAAutonomousStatusWatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto703FA77E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto703FA77E_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto703FA77E_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lib15EF4C78_gv_pM_SoAAutonomousCasterEnabledForPlayer[lv_player] == true)) {
                if (((lib15EF4C78_gv_pM_SoAAutonomousCaster[lv_player] == null) || (UnitIsAlive(lib15EF4C78_gv_pM_SoAAutonomousCaster[lv_player]) == false))) {
                    UnitRemove(lib15EF4C78_gv_pM_SoAAutonomousCaster[lv_player]);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_SoAAutonomousCaster", c_unitCreateIgnorePlacement, lv_player, Point(0.0, 0.0));
                    lib15EF4C78_gv_pM_SoAAutonomousCaster[lv_player] = UnitLastCreated();
                    UnitSetState(lib15EF4C78_gv_pM_SoAAutonomousCaster[lv_player], c_unitStateSelectable, false);
                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoAAutonomousStatusWatch_Init () {
    lib15EF4C78_gt_PM_SoAAutonomousStatusWatch = TriggerCreate("lib15EF4C78_gt_PM_SoAAutonomousStatusWatch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCD42A560_g;
    int autoCD42A560_var;
    playergroup autoD3A5F363_g;
    int autoD3A5F363_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        lib15EF4C78_gv_pM_ScreenMode = c_uiModeLetterboxed;
    }

    autoCD42A560_g = PlayerGroupAll();
    autoCD42A560_var = -1;
    while (true) {
        autoCD42A560_var = PlayerGroupNextPlayer(autoCD42A560_g, autoCD42A560_var);
        if (autoCD42A560_var < 0) { break; }
        PlayerScoreValueEnableAll(autoCD42A560_var, false);
    }
    autoD3A5F363_g = PlayerGroupAll();
    autoD3A5F363_var = -1;
    while (true) {
        autoD3A5F363_var = PlayerGroupNextPlayer(autoD3A5F363_g, autoD3A5F363_var);
        if (autoD3A5F363_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoD3A5F363_var, "AP_CinematicMode", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_CinematicModeOn_Init () {
    lib15EF4C78_gt_PM_CinematicModeOn = TriggerCreate("lib15EF4C78_gt_PM_CinematicModeOn_Func");
    TriggerAddEventGeneric(lib15EF4C78_gt_PM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    playergroup auto957A1425_g;
    int auto957A1425_var;
    playergroup autoACCCB784_g;
    int autoACCCB784_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
        if ((UIFrameVisible(1, c_syncFrameTypeConsolePanel) == true)) {
            lib15EF4C78_gv_pM_ScreenMode = c_uiModeConsole;
        }
        else {
            lib15EF4C78_gv_pM_ScreenMode = c_uiModeFullscreen;
        }
    }
    else {
        lib15EF4C78_gv_pM_ScreenMode = c_uiModeLetterboxed;
    }
    auto957A1425_g = PlayerGroupAll();
    auto957A1425_var = -1;
    while (true) {
        auto957A1425_var = PlayerGroupNextPlayer(auto957A1425_g, auto957A1425_var);
        if (auto957A1425_var < 0) { break; }
        PlayerScoreValueEnableAll(auto957A1425_var, true);
    }
    autoACCCB784_g = PlayerGroupAll();
    autoACCCB784_var = -1;
    while (true) {
        autoACCCB784_var = PlayerGroupNextPlayer(autoACCCB784_g, autoACCCB784_var);
        if (autoACCCB784_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoACCCB784_var, "AP_CinematicMode", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_CinematicModeOff_Init () {
    lib15EF4C78_gt_PM_CinematicModeOff = TriggerCreate("lib15EF4C78_gt_PM_CinematicModeOff_Func");
    TriggerAddEventGeneric(lib15EF4C78_gt_PM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SoA Apply Guardian Shell Player Response
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SoAApplyGuardianShellPlayerResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "AP_SOAHeroicShield"))) {
            return false;
        }

        if (!((lib15EF4C78_gv_pM_SoAAutonomousCasterEnabledForPlayer[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUpgradeLevelDelta() >= 1)) {
        PlayerAddResponse(EventPlayer(), "AP_SoAGuardianShellPlayerResponse");
    }

    if ((EventUpgradeLevelDelta() <= -1)) {
        PlayerRemoveResponse(EventPlayer(), "AP_SoAGuardianShellPlayerResponse");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SoAApplyGuardianShellPlayerResponse_Init () {
    lib15EF4C78_gt_SoAApplyGuardianShellPlayerResponse = TriggerCreate("lib15EF4C78_gt_SoAApplyGuardianShellPlayerResponse_Func");
    TriggerAddEventUpgradeLevelChanged(lib15EF4C78_gt_SoAApplyGuardianShellPlayerResponse, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingForceOff
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingForceOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto063CB9FE_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib15EF4C78_gv_pM_SoAExitInstantly = true;
    lib15EF4C78_gv_pM_SoAForceExit = true;
    TriggerExecute(lib15EF4C78_gt_PM_SoATargetingCancel, false, false);
    auto063CB9FE_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto063CB9FE_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        lib15EF4C78_gv_pM_CinematicModeSoAEnergy[lv_currentPlayer] = lib15EF4C78_gf_SpearofAdunEnergy(lv_currentPlayer, lib15EF4C78_ge_SpearofAdunEnergyType_Absolute);
    }
    lib15EF4C78_gf_PU_GPVisibilityAutoUpdate(false, c_transitionDurationImmediate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingForceOff_Init () {
    lib15EF4C78_gt_PM_SoATargetingForceOff = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingForceOff_Func");
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingForceOff, false);
    TriggerAddEventGeneric(lib15EF4C78_gt_PM_SoATargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingDeactivated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingDeactivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    if (((lib15EF4C78_gv_pM_SoATargetingChargesSpent == 0) || ((lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true) && (lib15EF4C78_gv_pM_SoATargetingChargesSpent != lib15EF4C78_gv_pM_SoATargetingChargesTotal)))) {
        DataTableSetInt(false, TriggerEventParamName(lib15EF4C78_gv_pMC_SoATargetingEventExited, lib15EF4C78_gv_pMC_SoATargetingParamReason), (lib15EF4C78_ge_SpearofAdunTargetingExitType_ByCanceling));
        TriggerSendEvent(lib15EF4C78_gv_pMC_SoATargetingEventExited);
    }
    else {
        DataTableSetInt(false, TriggerEventParamName(lib15EF4C78_gv_pMC_SoATargetingEventExited, lib15EF4C78_gv_pMC_SoATargetingParamReason), (lib15EF4C78_ge_SpearofAdunTargetingExitType_ByFiring));
        TriggerSendEvent(lib15EF4C78_gv_pMC_SoATargetingEventExited);
    }
    UISetTargetingOrder(PlayerGroupSingle(lv_player), lib15EF4C78_gv_pU_GPCasterGroup, null, false);
    lib15EF4C78_gv_pM_SoATargetingChargesSpent = 0;
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingCancel, false);
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingClearAll, false);
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, false);
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingDirectionChosen, false);
    lib15EF4C78_gf_PM_SoATargetingModeExit(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingDeactivated_Init () {
    lib15EF4C78_gt_PM_SoATargetingDeactivated = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingDeactivated_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoATargetingDeactivated, null, "AP_SOAOrbitalStrikeActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoATargetingDeactivated, null, "AP_SOAGravitonBombActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoATargetingDeactivated, null, "AP_SOAThermalLanceActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoATargetingDeactivated, null, "AP_SOAStrafeAttackActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingPointChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib15EF4C78_gv_pM_SoATargetingChargesSpent < lib15EF4C78_gv_pM_SoATargetingChargesTotal))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    if ((VisIsVisibleForPlayer(lv_player, lv_targetPoint) == false)) {
        return true;
    }

    lib15EF4C78_gv_pM_SoATargetingCycling = true;
    lib15EF4C78_gv_pM_SoATargetingChargesSpent += 1;
    libNtve_gf_CreateActorAtPoint(lib15EF4C78_gv_pM_SoATargetingModel, lv_targetPoint);
    lib15EF4C78_gv_pM_SoATargetingActors[lib15EF4C78_gv_pM_SoATargetingChargesSpent] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("AP_SOATargetingModeConfirmationSound", lv_targetPoint);
    if ((lib15EF4C78_gv_pM_SoATargetingUnitType == null)) {
        UnitIssueOrder(lib15EF4C78_gv_sOA_CasterUnit[lv_player], OrderTargetingPoint(lib15EF4C78_gv_pM_SoATargetingExecuteCommand, lv_targetPoint), c_orderQueueAddToEnd);
        lib15EF4C78_gf_PU_TargetingSetCharges((lib15EF4C78_gv_pM_SoATargetingChargesTotal - lib15EF4C78_gv_pM_SoATargetingChargesSpent), lib15EF4C78_gv_pM_SoATargetingChargesTotal);
        if ((lib15EF4C78_gv_pM_SoATargetingChargesSpent == lib15EF4C78_gv_pM_SoATargetingChargesTotal)) {
            TriggerEnable(lib15EF4C78_gt_PM_SoATargetingCancel, false);
            Wait(0.125, c_timeGame);
            UnitBehaviorRemove(lib15EF4C78_gv_sOA_CasterUnit[lv_player], lib15EF4C78_gv_pM_SoATargetingBehavior, 1);
            DataTableSetInt(true, ("AbilUsed_" + (lib15EF4C78_gv_pM_SoATargetingAbilityInstance)), (DataTableGetInt(true, ("AbilUsed_" + (lib15EF4C78_gv_pM_SoATargetingAbilityInstance)))+1));
        }
        else {
            Wait(0.1, c_timeGame);
            UISetTargetingOrder(PlayerGroupSingle(lv_player), lib15EF4C78_gv_pM_SoACasterGroup[lv_player], lib15EF4C78_gv_pM_SoATargetingOrder, false);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib15EF4C78_gv_pM_SoATargetingUnitType, 0, lv_player, lv_targetPoint);
        lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent] = UnitLastCreated();
        lib15EF4C78_gv_pM_SoATargetingDirectionGroup = libNtve_gf_ConvertUnitToUnitGroup(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent]);
        if ((lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true)) {
            libNtve_gf_PauseUnit(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent], true);
            UnitBehaviorAdd(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent], "AP_SOAThermalLanceStun", lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent], 1);
            UnitBehaviorSetDuration(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent], "AP_SOAThermalLanceStun", (0.125 * lib15EF4C78_gv_pM_SoATargetingChargesSpent));
        }

        lib15EF4C78_gf_PU_TargetingSetInstructionText(lib15EF4C78_gf_PC_PerkTargetingText(lib15EF4C78_gv_pM_SoATargetingAbilityInstance, 2));
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(0.1, c_timeGame);
        UISetTargetingOrder(PlayerGroupSingle(lv_player), lib15EF4C78_gv_pM_SoATargetingDirectionGroup, OrderTargetingPoint(lib15EF4C78_gv_pM_SoATargetingExecuteCommand, UnitGetPosition(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent])), false);
        TriggerEnable(lib15EF4C78_gt_PM_SoATargetingDirectionChosen, true);
    }
    lib15EF4C78_gv_pM_SoATargetingCycling = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingPointChosen_Init () {
    lib15EF4C78_gt_PM_SoATargetingPointChosen = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingPointChosen_Func");
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, false);
    TriggerAddEventUnitOrder(lib15EF4C78_gt_PM_SoATargetingPointChosen, null, AbilityCommand("AP_SOAOrbitalStrikeTargetingDummy", 0));
    TriggerAddEventUnitOrder(lib15EF4C78_gt_PM_SoATargetingPointChosen, null, AbilityCommand("AP_SOAThermalLanceTargetingDummy", 0));
    TriggerAddEventUnitOrder(lib15EF4C78_gt_PM_SoATargetingPointChosen, null, AbilityCommand("AP_SOAGravitonBomb", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingDirectionChosen
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingDirectionChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lib15EF4C78_gv_pM_SoATargetingCycling = true;
    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    libNtve_gf_CreateActorAtPoint("AP_SOATargetingModeConfirmationSound", lv_targetPoint);
    ActorSend(lib15EF4C78_gv_pM_SoATargetingActors[lib15EF4C78_gv_pM_SoATargetingChargesSpent], "Signal Destroy");
    libNtve_gf_MakeUnitFacePoint(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent], lv_targetPoint, 0.0);
    if ((lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true)) {
        libNtve_gf_SendActorMessageToUnit(lib15EF4C78_gv_pM_SoATargetingUnit[lib15EF4C78_gv_pM_SoATargetingChargesSpent], "Signal GuideOn");
    }

    lib15EF4C78_gf_PU_TargetingSetCharges((lib15EF4C78_gv_pM_SoATargetingChargesTotal - lib15EF4C78_gv_pM_SoATargetingChargesSpent), lib15EF4C78_gv_pM_SoATargetingChargesTotal);
    if ((lib15EF4C78_gv_pM_SoATargetingChargesSpent == lib15EF4C78_gv_pM_SoATargetingChargesTotal)) {
        TriggerEnable(lib15EF4C78_gt_PM_SoATargetingCancel, false);
        UnitBehaviorRemove(lib15EF4C78_gv_sOA_CasterUnit[lv_player], lib15EF4C78_gv_pM_SoATargetingBehavior, 1);
        Wait(0.1, c_timeGame);
    }
    else {
        lib15EF4C78_gf_PU_TargetingSetInstructionText(lib15EF4C78_gf_PC_PerkTargetingText(lib15EF4C78_gv_pM_SoATargetingAbilityInstance, 1));
        Wait(0.1, c_timeGame);
        UISetTargetingOrder(PlayerGroupSingle(lv_player), lib15EF4C78_gv_pM_SoACasterGroup[lv_player], lib15EF4C78_gv_pM_SoATargetingOrder, false);
        TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    lib15EF4C78_gv_pM_SoATargetingCycling = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingDirectionChosen_Init () {
    lib15EF4C78_gt_PM_SoATargetingDirectionChosen = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingDirectionChosen_Func");
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingDirectionChosen, false);
    TriggerAddEventUnitOrder(lib15EF4C78_gt_PM_SoATargetingDirectionChosen, null, AbilityCommand("AP_SOAThermalLanceExecute", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingEffectFired
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingEffectFired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_PM_SoATargetingCleanupActorsAndUnits();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingEffectFired_Init () {
    lib15EF4C78_gt_PM_SoATargetingEffectFired = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingEffectFired_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoATargetingEffectFired, c_playerAny, "AP_SOAOrbitalStrikeCP");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoATargetingEffectFired, c_playerAny, "AP_SOAGravitonBombLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingClearAll
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingClearAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib15EF4C78_gv_pM_SoATargetingCycling == false))) {
            return false;
        }

        if (!(((EventTargetModeAbilCmd() == AbilityCommand("AP_SOAOrbitalStrikeTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("AP_SOAThermalLanceTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("AP_SOAGravitonBomb", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("AP_SOAThermalLanceExecute", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((lib15EF4C78_gv_pM_SoATargetingChargesSpent != 0) && (lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true)) {
        UnitIssueOrder(lib15EF4C78_gv_sOA_CasterUnit[lv_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        lib15EF4C78_gv_pM_SoATargetingChargesSpent = 0;
        lib15EF4C78_gf_PU_TargetingSetInstructionText(lib15EF4C78_gf_PC_PerkTargetingText(lib15EF4C78_gv_pM_SoATargetingAbilityInstance, 1));
        UISetTargetingOrder(PlayerGroupSingle(lv_player), lib15EF4C78_gv_pM_SoACasterGroup[lv_player], lib15EF4C78_gv_pM_SoATargetingOrder, false);
        lib15EF4C78_gf_PM_SoATargetingCleanupActorsAndUnits();
        lib15EF4C78_gf_PU_TargetingSetCharges(lib15EF4C78_gv_pM_SoATargetingChargesTotal, lib15EF4C78_gv_pM_SoATargetingChargesTotal);
        TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, true);
        TriggerEnable(lib15EF4C78_gt_PM_SoATargetingDirectionChosen, false);
    }
    else {
        TriggerExecute(lib15EF4C78_gt_PM_SoATargetingCancel, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingClearAll_Init () {
    lib15EF4C78_gt_PM_SoATargetingClearAll = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingClearAll_Func");
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingClearAll, false);
    TriggerAddEventTargetModeUpdate(lib15EF4C78_gt_PM_SoATargetingClearAll, c_playerAny, null, c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingCancel
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib15EF4C78_gv_pU_TargetingCancel_player;
    UnitIssueOrder(lib15EF4C78_gv_sOA_CasterUnit[lv_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UISetTargetingOrder(PlayerGroupSingle(lv_player), lib15EF4C78_gv_pU_GPCasterGroup, null, false);
    lib15EF4C78_gf_PM_SoATargetingCleanupActorsAndUnits();
    if (((lib15EF4C78_gv_pM_SoATargetingChargesSpent == 0) || (lib15EF4C78_gf_PM_SoATargetingPauseEnabled() == true))) {
        libNtve_gf_UnitAbilityRemoveCooldown(lib15EF4C78_gv_sOA_CasterUnit[lv_player], lib15EF4C78_gv_pM_SoATargetingActivateAbility, lib15EF4C78_gv_pM_SoATargetingCooldown);
        UnitSetPropertyFixed(lib15EF4C78_gv_sOA_CasterUnit[lv_player], c_unitPropEnergy, (UnitGetPropertyFixed(lib15EF4C78_gv_sOA_CasterUnit[lv_player], c_unitPropEnergy, c_unitPropCurrent) + libNtve_gf_CostOfAbility(lib15EF4C78_gv_pM_SoATargetingActivateAbility, "Energy")));
    }

    UnitBehaviorRemove(lib15EF4C78_gv_sOA_CasterUnit[lv_player], lib15EF4C78_gv_pM_SoATargetingBehavior, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingCancel_Init () {
    lib15EF4C78_gt_PM_SoATargetingCancel = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingCancel_Func");
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingCancel, false);
    TriggerAddEventGeneric(lib15EF4C78_gt_PM_SoATargetingCancel, lib15EF4C78_gv_pUC_TargetingEventCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingCameraShake
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_cameraPosition[0] = PointGetX(CameraGetTarget(lv_player));
    lv_cameraPosition[1] = (PointGetY(CameraGetTarget(lv_player))-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, CameraGetTarget(lv_player))+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_effectPosition[0] = PointGetX(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_effectPosition[1] = PointGetY(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
    CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 2.5, 100.0, 0.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingCameraShake_Init () {
    lib15EF4C78_gt_PM_SoATargetingCameraShake = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingCameraShake_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoATargetingCameraShake, c_playerAny, "AP_SOAOrbitalStrikeImpactSearch");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoATargetingCameraShake, c_playerAny, "AP_SOAGravitonBombCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAOrbitalStrikeActivated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoAOrbitalStrikeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    libNtve_gf_StoreUnitSelection(lv_player, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    lib15EF4C78_gv_pM_SoATargetingActivateAbility = "AP_SOAOrbitalStrikeActivate";
    lib15EF4C78_gv_pM_SoATargetingExecuteCommand = AbilityCommand("AP_SOAOrbitalStrikeExecute", 0);
    lib15EF4C78_gv_pM_SoATargetingCooldown = "Abil/AP_SOAOrbitalStrikeActivate";
    lib15EF4C78_gv_pM_SoATargetingBehavior = "AP_SOAOrbitalStrikeActivate";
    lib15EF4C78_gv_pM_SoATargetingModel = "AP_SOAOrbitalStrikeTargetModel";
    lib15EF4C78_gv_pM_SoATargetingOrder = OrderTargetingPoint(AbilityCommand("AP_SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(lib15EF4C78_gv_sOA_CasterUnit[lv_player]));
    lib15EF4C78_gv_pM_SoATargetingAbilityInstance = "GPTier2Power1";
    lib15EF4C78_gv_pM_SoATargetingUnitType = null;
    lib15EF4C78_gv_pM_SoATargetingChargesTotal = 5;
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, true);
    lib15EF4C78_gf_PM_SoATargetingModeEnter(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoAOrbitalStrikeActivated_Init () {
    lib15EF4C78_gt_PM_SoAOrbitalStrikeActivated = TriggerCreate("lib15EF4C78_gt_PM_SoAOrbitalStrikeActivated_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoAOrbitalStrikeActivated, null, "AP_SOAOrbitalStrikeActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAGravitonBombActivated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoAGravitonBombActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    libNtve_gf_StoreUnitSelection(lv_player, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    lib15EF4C78_gv_pM_SoATargetingActivateAbility = "AP_SOAGravitonBombActivate";
    lib15EF4C78_gv_pM_SoATargetingExecuteCommand = AbilityCommand("AP_SOAGravitonBombExecute", 0);
    lib15EF4C78_gv_pM_SoATargetingCooldown = "Abil/AP_SOAGravitonBombActivate";
    lib15EF4C78_gv_pM_SoATargetingBehavior = "AP_SOAGravitonBombActivate";
    lib15EF4C78_gv_pM_SoATargetingModel = "AP_SOAGravitonBombTargetModel";
    lib15EF4C78_gv_pM_SoATargetingOrder = OrderTargetingPoint(AbilityCommand("AP_SOAGravitonBomb", 0), UnitGetPosition(lib15EF4C78_gv_sOA_CasterUnit[lv_player]));
    lib15EF4C78_gv_pM_SoATargetingAbilityInstance = "GPTier2Power2";
    lib15EF4C78_gv_pM_SoATargetingUnitType = null;
    lib15EF4C78_gv_pM_SoATargetingChargesTotal = 3;
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, true);
    lib15EF4C78_gf_PM_SoATargetingModeEnter(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoAGravitonBombActivated_Init () {
    lib15EF4C78_gt_PM_SoAGravitonBombActivated = TriggerCreate("lib15EF4C78_gt_PM_SoAGravitonBombActivated_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoAGravitonBombActivated, null, "AP_SOAGravitonBombActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAThermalLanceActivated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoAThermalLanceActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    libNtve_gf_StoreUnitSelection(lv_player, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    lib15EF4C78_gv_pM_SoATargetingActivateAbility = "AP_SOAThermalLanceActivate";
    lib15EF4C78_gv_pM_SoATargetingExecuteCommand = AbilityCommand("AP_SOAThermalLanceExecute", 0);
    lib15EF4C78_gv_pM_SoATargetingCooldown = "Abil/AP_SOAThermalLanceActivate";
    lib15EF4C78_gv_pM_SoATargetingBehavior = "AP_SOAThermalLanceActivate";
    lib15EF4C78_gv_pM_SoATargetingModel = "AP_SOAThermalLanceTargetingModel";
    lib15EF4C78_gv_pM_SoATargetingOrder = OrderTargetingPoint(AbilityCommand("AP_SOAThermalLanceTargetingDummy", 0), UnitGetPosition(lib15EF4C78_gv_sOA_CasterUnit[lv_player]));
    lib15EF4C78_gv_pM_SoATargetingAbilityInstance = "GPTier2Power3";
    lib15EF4C78_gv_pM_SoATargetingUnitType = "AP_SOAThermalLanceTargeter";
    lib15EF4C78_gv_pM_SoATargetingChargesTotal = 3;
    TriggerEnable(lib15EF4C78_gt_PM_SoATargetingPointChosen, true);
    lib15EF4C78_gf_PM_SoATargetingModeEnter(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoAThermalLanceActivated_Init () {
    lib15EF4C78_gt_PM_SoAThermalLanceActivated = TriggerCreate("lib15EF4C78_gt_PM_SoAThermalLanceActivated_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_PM_SoAThermalLanceActivated, null, "AP_SOAThermalLanceActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATimeFreezeCast
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATimeFreezeCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_originalPauseState;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lib15EF4C78_gf_SOA_TimeFreezeVisual(lv_player, PointGetX(CameraGetTarget(lv_player)), PointGetY(CameraGetTarget(lv_player)));
    lib15EF4C78_gf_PC_TimeAITemporarySet(true);
    Wait(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "AP_SOATimeFreeze", "Duration", c_playerAny)), c_timeGame);
    lib15EF4C78_gf_PC_TimeAITemporaryRestore();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATimeFreezeCast_Init () {
    lib15EF4C78_gt_PM_SoATimeFreezeCast = TriggerCreate("lib15EF4C78_gt_PM_SoATimeFreezeCast_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoATimeFreezeCast, c_playerAny, "AP_SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOn
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingPurifierBeamOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_StoreUnitSelection(lv_player, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    lib15EF4C78_gv_pM_SoATargetingActivateAbility = "AP_SOAPurifierBeam";
    lib15EF4C78_gv_pM_SoATargetingOrder = null;
    lib15EF4C78_gv_pM_SoATargetingExecuteCommand = null;
    lib15EF4C78_gv_pM_SoATargetingCooldown = "";
    lib15EF4C78_gv_pM_SoATargetingBehavior = null;
    lib15EF4C78_gv_pM_SoATargetingModel = null;
    lib15EF4C78_gv_pM_SoATargetingAbilityInstance = "GPTier6Power1";
    lib15EF4C78_gv_pM_SoATargetingUnitType = null;
    lib15EF4C78_gv_pM_SoATargetingChargesTotal = 1;
    lib15EF4C78_gf_PM_SoATargetingModeEnter(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingPurifierBeamOn_Init () {
    lib15EF4C78_gt_PM_SoATargetingPurifierBeamOn = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingPurifierBeamOn_Func");
    TriggerAddEventTargetModeUpdate(lib15EF4C78_gt_PM_SoATargetingPurifierBeamOn, c_playerAny, AbilityCommand("AP_SOAPurifierBeam", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOff
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoATargetingPurifierBeamOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lib15EF4C78_gf_PM_SoATargetingModeExit(lv_player);
    Wait(0.03, c_timeGame);
    if ((UnitAbilityGetCooldown(lib15EF4C78_gv_sOA_CasterUnit[lv_player], "AP_SOAPurifierBeam", "Abil/AP_SOAPurifierBeam") > 0.0)) {
        DataTableSetInt(false, TriggerEventParamName(lib15EF4C78_gv_pMC_SoATargetingEventExited, lib15EF4C78_gv_pMC_SoATargetingParamReason), (lib15EF4C78_ge_SpearofAdunTargetingExitType_ByFiring));
        TriggerSendEvent(lib15EF4C78_gv_pMC_SoATargetingEventExited);
    }
    else {
        DataTableSetInt(false, TriggerEventParamName(lib15EF4C78_gv_pMC_SoATargetingEventExited, lib15EF4C78_gv_pMC_SoATargetingParamReason), (lib15EF4C78_ge_SpearofAdunTargetingExitType_ByCanceling));
        TriggerSendEvent(lib15EF4C78_gv_pMC_SoATargetingEventExited);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoATargetingPurifierBeamOff_Init () {
    lib15EF4C78_gt_PM_SoATargetingPurifierBeamOff = TriggerCreate("lib15EF4C78_gt_PM_SoATargetingPurifierBeamOff_Func");
    TriggerAddEventTargetModeUpdate(lib15EF4C78_gt_PM_SoATargetingPurifierBeamOff, c_playerAny, AbilityCommand("AP_SOAPurifierBeam", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAStrafeActivated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoAStrafeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_radius;
    fixed lv_radiusMinimum;
    fixed lv_radiusMaximum;
    int lv_i;
    point lv_targetPoint;
    revealer lv_revealer;

    // Automatic Variable Declarations
    const int autoB1F5FA85_ae = 100;
    const int autoB1F5FA85_ai = 1;

    // Variable Initialization
    lv_radiusMinimum = 2.0;
    lv_radiusMaximum = 10.0;
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_i = 1;
    for ( ; ( (autoB1F5FA85_ai >= 0 && lv_i <= autoB1F5FA85_ae) || (autoB1F5FA85_ai < 0 && lv_i >= autoB1F5FA85_ae) ) ; lv_i += autoB1F5FA85_ai ) {
        lv_radius = (((lv_i / 100.0) * (lv_radiusMaximum - lv_radiusMinimum)) + lv_radiusMinimum);
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AP_SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AP_SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        VisRevealerCreate(lv_player, RegionCircle(lv_targetPoint, lv_radius));
        lv_revealer = VisRevealerLastCreated();
        Wait(0.15, c_timeGame);
        while (!((lib15EF4C78_gv_pM_SoATargetingActivateAbility == null))) {
            Wait(0.0625, c_timeGame);
        }
        VisRevealerDestroy(lv_revealer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoAStrafeActivated_Init () {
    lib15EF4C78_gt_PM_SoAStrafeActivated = TriggerCreate("lib15EF4C78_gt_PM_SoAStrafeActivated_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoAStrafeActivated, c_playerAny, "AP_SOAStrafeAttackCreateTargeter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoASuperShieldsActivated
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PM_SoASuperShieldsActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEEA508CA_g;
    int autoEEA508CA_var;
    unitgroup auto385DE9AE_g;
    int auto385DE9AE_u;
    unit auto385DE9AE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEEA508CA_g = PlayerGroupAll();
    autoEEA508CA_var = -1;
    while (true) {
        autoEEA508CA_var = PlayerGroupNextPlayer(autoEEA508CA_g, autoEEA508CA_var);
        if (autoEEA508CA_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoEEA508CA_var, "AP_SoASuperShield", c_techCountQueuedOrBetter) >= 1)) {
            auto385DE9AE_g = UnitGroup(null, autoEEA508CA_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto385DE9AE_u = UnitGroupCount(auto385DE9AE_g, c_unitCountAll);
            for (;; auto385DE9AE_u -= 1) {
                auto385DE9AE_var = UnitGroupUnitFromEnd(auto385DE9AE_g, auto385DE9AE_u);
                if (auto385DE9AE_var == null) { break; }
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AP_SOASuperShieldApply", auto385DE9AE_var);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PM_SoASuperShieldsActivated_Init () {
    lib15EF4C78_gt_PM_SoASuperShieldsActivated = TriggerCreate("lib15EF4C78_gt_PM_SoASuperShieldsActivated_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_PM_SoASuperShieldsActivated, c_playerAny, "AP_SOASuperShieldDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SoAWarpInReinforcementsRandomize
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SoAWarpInReinforcementsRandomize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_random;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);
    lv_random = RandomInt(0, 99);
    lv_player = UnitGetOwner(lv_unit);
    if ((lv_unitType == "AP_ZealotReinforcementDummy")) {
        if ((lv_random < 25)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_ZealotAiur", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 50)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_ZealotShakuras", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 75)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_ZealotPurifier", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 100)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_Supplicant", 0, lv_player, UnitGetPosition(lv_unit));
            libNtve_gf_ReplaceUnit(lv_unit, "AP_Supplicant", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
    }
    else if ((lv_unitType == "AP_StalkerReinforcementDummy")) {
        if ((lv_random < 20)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_StalkerShakuras", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 40)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_StalkerPurifier", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 60)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_Slayer", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 80)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_Dragoon", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        else if ((lv_random < 100)) {
            libNtve_gf_ReplaceUnit(lv_unit, "AP_Adept", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SoAWarpInReinforcementsRandomize_Init () {
    lib15EF4C78_gt_SoAWarpInReinforcementsRandomize = TriggerCreate("lib15EF4C78_gt_SoAWarpInReinforcementsRandomize_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_SoAWarpInReinforcementsRandomize, null, "AP_SOAWarpInReinforcements", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPInit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PU_GPInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;
    string lv_buttonIndexStr;

    // Automatic Variable Declarations
    const int autoDE2FD004_ae = 12;
    const int autoDE2FD004_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;
    lv_buttonIndexStr = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AP_GlobalCastingPanel");
    lib15EF4C78_gv_pU_GPHolder = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_pU_GPHolder, c_triggerControlTypePanel, "AP_LotV_soamissionuipanel/SoAPanelTemplate");
    lib15EF4C78_gv_pU_GPPanel = DialogControlLastCreated();
    DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeTooltip);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, -100, -100);
    lib15EF4C78_gv_pU_GPBlackTooltipAnchor = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_GPPanel, c_triggerControlTypeCutscene, "SoACommandCutscene");
    lib15EF4C78_gv_pU_GPCutscene = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_GPPanel, c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "AP_LotV_soamissionuipanel/SoACommandPanelTemplate");
    lib15EF4C78_gv_pU_GPCmdPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoDE2FD004_ai >= 0 && lv_buttonIndex <= autoDE2FD004_ae) || (autoDE2FD004_ai < 0 && lv_buttonIndex >= autoDE2FD004_ae) ) ; lv_buttonIndex += autoDE2FD004_ai ) {
        if ((lv_buttonIndex <= 10)) {
            lv_buttonIndexStr = "0" + IntToString(lv_buttonIndex-1);
        }
        else {
            lv_buttonIndexStr = IntToString(lv_buttonIndex-1);
        }
        DialogControlHookup(lib15EF4C78_gv_pU_GPCmdPanel, c_triggerControlTypeButton, "CommandButton" + lv_buttonIndexStr);
        lib15EF4C78_gv_pU_GPCmdButtons[lv_buttonIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "AP_UI_SOA_ButtonActivate", PlayerGroupAll());
        DialogControlHookup(lib15EF4C78_gv_pU_GPPanel, c_triggerControlTypePanel, "SoAAbilityArrow" + lv_buttonIndexStr);
        lib15EF4C78_gv_pU_GPAbilityArrows[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlSetPositionRelative(lib15EF4C78_gv_pU_GPAbilityArrows[lv_buttonIndex], PlayerGroupAll(), c_anchorTop, lib15EF4C78_gv_pU_GPCmdButtons[lv_buttonIndex], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(lib15EF4C78_gv_pU_GPPanel, c_triggerControlTypePanel, "SoAEnergyBarFill");
    lib15EF4C78_gv_pU_GPEnergyBar = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_GPEnergyBar, c_triggerControlTypeCutscene, "SoAFillScene");
    lib15EF4C78_gv_pU_GPEnergyBarScene = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_GPPanel, c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    lib15EF4C78_gv_pU_GPEnergyGlassScene = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_pU_GPPanel, c_triggerControlTypeLabel, "SoAEnergyLabel");
    lib15EF4C78_gv_pU_GPEnergyLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PU_GPInit_Init () {
    lib15EF4C78_gt_PU_GPInit = TriggerCreate("lib15EF4C78_gt_PU_GPInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPVitalChanges
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PU_GPVitalChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_PU_GPVitalsUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PU_GPVitalChanges_Init () {
    lib15EF4C78_gt_PU_GPVitalChanges = TriggerCreate("lib15EF4C78_gt_PU_GPVitalChanges_Func");
    TriggerAddEventUnitProperty(lib15EF4C78_gt_PU_GPVitalChanges, UnitRefFromVariable("lib15EF4C78_gv_pU_GPUnit"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPBirthFinished
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PU_GPBirthFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(lib15EF4C78_gv_pU_GPCmdPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(lib15EF4C78_gv_pU_GPEnergyLabel, PlayerGroupAll(), true);
    lib15EF4C78_gv_pU_GPWaitingForBirth = false;
    if ((lib15EF4C78_gv_pU_GPEnergyHighlighting == true)) {
        lib15EF4C78_gf_PU_GPEnergyHighlight(true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PU_GPBirthFinished_Init () {
    lib15EF4C78_gt_PU_GPBirthFinished = TriggerCreate("lib15EF4C78_gt_PU_GPBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(lib15EF4C78_gt_PU_GPBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPDeathRemove2D
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PU_GPDeathRemove2D_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(lib15EF4C78_gv_pU_GPCmdPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(lib15EF4C78_gv_pU_GPEnergyLabel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PU_GPDeathRemove2D_Init () {
    lib15EF4C78_gt_PU_GPDeathRemove2D = TriggerCreate("lib15EF4C78_gt_PU_GPDeathRemove2D_Func");
    TriggerAddEventCutsceneBookmarkFired(lib15EF4C78_gt_PU_GPDeathRemove2D, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TargetingCancelButtonUsed
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_PU_TargetingCancelButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib15EF4C78_gv_pU_TargetingCancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gv_pU_TargetingCancel_player = EventPlayer();
    TriggerSendEvent(lib15EF4C78_gv_pUC_TargetingEventCancel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_PU_TargetingCancelButtonUsed_Init () {
    lib15EF4C78_gt_PU_TargetingCancelButtonUsed = TriggerCreate("lib15EF4C78_gt_PU_TargetingCancelButtonUsed_Func");
    TriggerEnable(lib15EF4C78_gt_PU_TargetingCancelButtonUsed, false);
    TriggerAddEventDialogControl(lib15EF4C78_gt_PU_TargetingCancelButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confusion End Suicide
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ConfusionEndSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ConfusionEndSuicide_Init () {
    lib15EF4C78_gt_ConfusionEndSuicide = TriggerCreate("lib15EF4C78_gt_ConfusionEndSuicide_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_ConfusionEndSuicide, c_playerAny, "AP_IssueAIOrderSuicide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Train
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SupplicantWarpTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_actualCreator;
    unit lv_warpGate;
    point lv_p;
    order lv_order1;
    order lv_order2;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpGate = EventUnit();
    lv_p = UnitGetPosition(lv_u);
    lv_order1 = OrderTargetingPoint(lib15EF4C78_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, -0.5, 0.0));
    lv_order2 = OrderTargetingPoint(lib15EF4C78_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, 0.5, 0.0));
    lv_player = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == lib15EF4C78_gv_supplicantWarpTrainDummyUnitLink))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, lib15EF4C78_gv_supplicantWarpTrainCreatorUnitLink, c_unitCreateIgnorePlacement, lv_player, lv_p, 270.0);
    lv_actualCreator = UnitLastCreated();
    if ((UnitOrderIsValid(lv_actualCreator, lv_order1) == false) && (UnitOrderIsValid(lv_actualCreator, lv_order2) == false)) {
        UnitAbilityAddChargeUsed(lv_warpGate, lib15EF4C78_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_actualCreator);
        return true;
    }

    UnitIssueOrder(lv_actualCreator, lv_order1, c_orderQueueAddToFront);
    UnitIssueOrder(lv_actualCreator, lv_order2, c_orderQueueAddToFront);
    UnitBehaviorAdd(lv_actualCreator, lib15EF4C78_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, lv_warpGate, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SupplicantWarpTrain_Init () {
    lib15EF4C78_gt_SupplicantWarpTrain = TriggerCreate("lib15EF4C78_gt_SupplicantWarpTrain_Func");
    TriggerAddEventUnitCreated(lib15EF4C78_gt_SupplicantWarpTrain, null, lib15EF4C78_gv_warpGateTrainAbility, null);
    TriggerAddEventUnitCreated(lib15EF4C78_gt_SupplicantWarpTrain, null, ("AP_WarpGateTrainRedirect"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Actual Train
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SupplicantActualTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_warpSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpSource = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, lib15EF4C78_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink, lv_warpSource, 1);
    UnitBehaviorAdd(lv_u, lib15EF4C78_gv_supplicantWarpTrainCreatorFinderBehaviorLink, lv_warpSource, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SupplicantActualTrain_Init () {
    lib15EF4C78_gt_SupplicantActualTrain = TriggerCreate("lib15EF4C78_gt_SupplicantActualTrain_Func");
    TriggerAddEventUnitCreated(lib15EF4C78_gt_SupplicantActualTrain, null, lib15EF4C78_gv_supplicantWarpTrainActualAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Finish
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SupplicantWarpFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_supplicant, lib15EF4C78_gv_supplicantWarpTrainCreatorFinderBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creator = UnitBehaviorEffectUnit(lv_supplicant, lib15EF4C78_gv_supplicantWarpTrainCreatorFinderBehaviorLink, c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_supplicant, lib15EF4C78_gv_supplicantWarpTrainCreatorFinderBehaviorLink, 1);
    UnitRemove(lv_creator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SupplicantWarpFinish_Init () {
    lib15EF4C78_gt_SupplicantWarpFinish = TriggerCreate("lib15EF4C78_gt_SupplicantWarpFinish_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_SupplicantWarpFinish, c_playerAny, lib15EF4C78_gv_supplicantWarpTrainActualUnitBirthEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Cancel
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SupplicantWarpCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;
    unit lv_warpGate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_creator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_creator, lib15EF4C78_gv_supplicantWarpTrainWarpRefundBehaviorLink) > 0)) {
        lv_warpGate = UnitBehaviorEffectUnit(lv_creator, lib15EF4C78_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, c_effectUnitCaster, 0);
        UnitAbilityAddChargeUsed(lv_warpGate, lib15EF4C78_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_creator);
    }
    else {
        UnitBehaviorAdd(lv_creator, lib15EF4C78_gv_supplicantWarpTrainWarpRefundBehaviorLink, lv_supplicant, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SupplicantWarpCancel_Init () {
    lib15EF4C78_gt_SupplicantWarpCancel = TriggerCreate("lib15EF4C78_gt_SupplicantWarpCancel_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_SupplicantWarpCancel, c_playerAny, lib15EF4C78_gv_supplicantWarpTrainActualUnitCancelEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SlayerInit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SlayerInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto999E0912_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto999E0912_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto999E0912_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "AP_SlayerConfig", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SlayerInit_Init () {
    lib15EF4C78_gt_SlayerInit = TriggerCreate("lib15EF4C78_gt_SlayerInit_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_SlayerInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AP_CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CreepTumorBuild_Init () {
    lib15EF4C78_gt_CreepTumorBuild = TriggerCreate("lib15EF4C78_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_CreepTumorBuild, null, AbilityCommand("AP_CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_FindPrimaryTownHallForAllPlayers
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto05ADD373_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto05ADD373_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto05ADD373_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lv_currentPlayer);
    }
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_INIT_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Init () {
    lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers = TriggerCreate("lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Func");
    TriggerAddEventTimeElapsed(lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_OnPrimaryTownHallDeathEmitEvent
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto3C928EA7_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    auto3C928EA7_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3C928EA7_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_currentPlayer] == lv_deadUnit)) {
            lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__unit = lv_deadUnit;
            lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__player = lv_currentPlayer;
            TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_DEATH_EVENT);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Init () {
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent = TriggerCreate("lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_OnPrimaryTownHallDeathSeekNew
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib15EF4C78_gf_AP_Player_OnPrimaryTownHallDeath__getPlayer();
    while (true) {
        lv_unit = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lv_player);
        if ((lv_unit == null)) {
            Wait(2.0, c_timeGame);
        }
        else {
            break;
        }
    }
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__unit = lv_unit;
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__player = lv_player;
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_AFTER_DEATH_FOUND_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Init () {
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew = TriggerCreate("lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Func");
    TriggerAddEventGeneric(lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew, lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_DEATH_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_MindControlRemoveLeash
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_MindControlRemoveLeash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnitTargetUnit();
    UnitBehaviorRemove(lv_targetUnit, "CritterWander", 1);
    UnitBehaviorRemove(lv_targetUnit, "CritterWanderLeash", 1);
    UnitBehaviorRemove(lv_targetUnit, "CritterWanderLeashShort", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_MindControlRemoveLeash_Init () {
    lib15EF4C78_gt_AP_Player_MindControlRemoveLeash = TriggerCreate("lib15EF4C78_gt_AP_Player_MindControlRemoveLeash_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveLeash, null, AbilityCommand("AP_NPSwarm", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveLeash, null, AbilityCommand("AP_DarkArchonMindControl", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveLeash, null, AbilityCommand("AP_MindControl", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveLeash, null, AbilityCommand("AP_NovaHelmetDomination", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_MindControlRemoveAi
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_MindControlRemoveAi_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnitTargetUnit();
    AIRemoveUnitFromAnyWaves(lv_targetUnit);
    AISetUnitNotUsableInWaves(lv_targetUnit, true);
    AISetUnitScriptControlled(lv_targetUnit, false);
    UnitIssueOrder(lv_targetUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_MindControlRemoveAi_Init () {
    lib15EF4C78_gt_AP_Player_MindControlRemoveAi = TriggerCreate("lib15EF4C78_gt_AP_Player_MindControlRemoveAi_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveAi, null, AbilityCommand("AP_NPSwarm", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveAi, null, AbilityCommand("AP_DarkArchonMindControl", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveAi, null, AbilityCommand("AP_MindControl", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlRemoveAi, null, AbilityCommand("AP_NovaHelmetDomination", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_MindControlEmitEvent
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_MindControlEmitEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gv_aP_Player_UnitMindControlledTarget = EventUnitTargetUnit();
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_UNIT_MIND_CONTROLLED_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_MindControlEmitEvent_Init () {
    lib15EF4C78_gt_AP_Player_MindControlEmitEvent = TriggerCreate("lib15EF4C78_gt_AP_Player_MindControlEmitEvent_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlEmitEvent, null, AbilityCommand("AP_NPSwarm", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlEmitEvent, null, AbilityCommand("AP_DarkArchonMindControl", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlEmitEvent, null, AbilityCommand("AP_MindControl", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MindControlEmitEvent, null, AbilityCommand("AP_NovaHelmetDomination", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroPanelUpdate_Init () {
    lib15EF4C78_gt_CU_HeroPanelUpdate = TriggerCreate("lib15EF4C78_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_CU_HeroPanelUpdate, lib15EF4C78_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 0.25)) {
            lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] = 0.26;
            DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 0.5)) {
                lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] = 0.51;
                DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 1.0)) {
                lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] = 1.01;
                DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroUnitDamaged_Init () {
    lib15EF4C78_gt_CU_HeroUnitDamaged = TriggerCreate("lib15EF4C78_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    int autoB3C5BA52_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    autoB3C5BA52_val = EventUnitProperty();
    if (autoB3C5BA52_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "AP_HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (autoB3C5BA52_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "AP_HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (autoB3C5BA52_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "AP_HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroUnitVitalChange_Init () {
    lib15EF4C78_gt_CU_HeroUnitVitalChange = TriggerCreate("lib15EF4C78_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoFDC141E6_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    autoFDC141E6_val = EventDialogControlEventType();
    if (autoFDC141E6_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (autoFDC141E6_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroMouseHoverText_Init () {
    lib15EF4C78_gt_CU_HeroMouseHoverText = TriggerCreate("lib15EF4C78_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(lib15EF4C78_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(lib15EF4C78_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoE1889307_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE1889307_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoE1889307_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        lib15EF4C78_gf_ZS_UpdateHeroPanel(lv_currentPlayer, 1);
        lib15EF4C78_gf_ZS_UpdateHeroPanel(lv_currentPlayer, 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_HeroPanelUpdate_Init () {
    lib15EF4C78_gt_ZS_HeroPanelUpdate = TriggerCreate("lib15EF4C78_gt_ZS_HeroPanelUpdate_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_ZS_HeroPanelUpdate, lib15EF4C78_gv_zS_SwarmHeroUIUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIUnitDamaged
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == lib15EF4C78_gv_zS_SwarmHeroUIUnit[1])) {
        lv_index = 1;
    }
    else if ((EventUnit() == lib15EF4C78_gv_zS_SwarmHeroUIUnit[2])) {
        lv_index = 2;
    }
    else if (true) {
        return true;
    }
    lib15EF4C78_gv_zS_SwarmHeroUIDamage += EventUnitDamageAmount();
    lv_damage = FixedToInt(lib15EF4C78_gv_zS_SwarmHeroUIDamage);
    if ((lv_damage < 1)) {
        return true;
    }

    lib15EF4C78_gv_zS_SwarmHeroUIDamage = 0.0;
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), true);
    if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] > 0.0)) {
        DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
    }

    if ((lv_damage < 5)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 0.25)) {
            lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 0.26;
            DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
            libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 0.5)) {
                lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 0.51;
                DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.5, 0.0);
                libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
                DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
        else {
            if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 1.0)) {
                lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 1.01;
                DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 1.0, 0.0);
                libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
                DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Init () {
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged = TriggerCreate("lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, false);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    unit auto6B7C2E37_val;
    int auto78DF5643_val;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B7C2E37_val = EventUnit();
    if (auto6B7C2E37_val == lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]) {
        lv_index = 1;
    }
    else if (auto6B7C2E37_val == lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]) {
        lv_index = 2;
    }
    else {
        return true;
    }
    auto78DF5643_val = EventUnitProperty();
    if (auto78DF5643_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index], c_triggerControlTypeImage, "AP_HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent)) * 224.0));
        lv_damageBarWidth = MaxI(1, lv_damageBarWidth);
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lv_index], 1);
    }
    else if (auto78DF5643_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index], c_triggerControlTypeImage, "AP_HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent)) * 224.0));
        lv_damageBarWidth = MaxI(1, lv_damageBarWidth);
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lv_index], 1);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 511, PlayerGroupAll());
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), lv_damageBarWidth, lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Init () {
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange = TriggerCreate("lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, false);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIMouseHoverText
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_MouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto31F78A4F_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto31F78A4F_val = EventDialogControlEventType();
    if (auto31F78A4F_val == c_triggerControlEventTypeMouseEnter) {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), true);
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else if (auto31F78A4F_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), false);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_MouseHoverText_Init () {
    lib15EF4C78_gt_ZS_MouseHoverText = TriggerCreate("lib15EF4C78_gt_ZS_MouseHoverText_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_MouseHoverText, false);
    TriggerAddEventDialogControl(lib15EF4C78_gt_ZS_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(lib15EF4C78_gt_ZS_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController(lib15EF4C78_gv_zS_ReviveKerriganPlayerAsyncParam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Init () {
    lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner = TriggerCreate("lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_ZS_KerriganDied
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    if (((UnitGetType(EventUnit()) == "AP_K5Kerrigan") || (UnitGetType(EventUnit()) == "AP_K5KerriganBurrowed") || (UnitGetType(EventUnit()) == "AP_K5KerriganPsiStrike"))) {
        UserDataSetInt("KerriganStates", "Alive", "Value", 1, 0);
        UserDataSetInt("KerriganStates", "Dead", "Value", 1, 1);
        if ((lib15EF4C78_gf_AP_Player_isKerriganRevivable(lv_player) == true)) {
            lib15EF4C78_gf_StartKerriganReviveCooldown(lv_player);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Init () {
    lib15EF4C78_gt_AP_Player_ZS_KerriganDied = TriggerCreate("lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_AP_Player_ZS_KerriganDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onKerriganRevived
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onKerriganRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_K5Kerrigan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 1);
    UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onKerriganRevived_Init () {
    lib15EF4C78_gt_AP_Player_onKerriganRevived = TriggerCreate("lib15EF4C78_gt_AP_Player_onKerriganRevived_Func");
    TriggerAddEventUnitRevive(lib15EF4C78_gt_AP_Player_onKerriganRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_KerriganReviveCocoon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_ReviveHeroInstantly(UnitGetOwner(EventUnit()), lib15EF4C78_ge_HeroUnit_Kerrigan, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry_Init () {
    lib15EF4C78_gt_AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry = TriggerCreate("lib15EF4C78_gt_AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry, null, "AP_CocoonReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_NightHawkResonatingFeedbackInterferenceEffect
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_NightHawkResonatingFeedbackInterferenceEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;
    unit lv_registrant2;
    fixed lv_targetEnergy;
    fixed lv_stunDuration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_registrant2 = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetEnergy = UnitGetPropertyFixed(lv_registrant2, c_unitPropEnergy, c_unitPropCurrent);
    lv_stunDuration = (lv_targetEnergy / 5.0);
    UnitSetPropertyFixed(lv_registrant2, c_unitPropEnergy, 0.0);
    UnitBehaviorAdd(lv_registrant2, "AP_WraithMengskResonatingFeedbackInterference", lv_registrant, 1);
    UnitBehaviorSetDuration(lv_registrant2, "AP_WraithMengskResonatingFeedbackInterference", lv_stunDuration);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_NightHawkResonatingFeedbackInterferenceEffect_Init () {
    lib15EF4C78_gt_AP_Player_NightHawkResonatingFeedbackInterferenceEffect = TriggerCreate("lib15EF4C78_gt_AP_Player_NightHawkResonatingFeedbackInterferenceEffect_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_NightHawkResonatingFeedbackInterferenceEffect, c_playerAny, "AP_WraithMengskResonatingFeedbackInterferenceDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickupRegister
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_WeaponPickupRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib15EF4C78_gv_cM_Mengsk_WeaponPickups, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_WeaponPickupRegister_Init () {
    lib15EF4C78_gt_CM_Mengsk_WeaponPickupRegister = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_WeaponPickupRegister_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Mengsk_WeaponPickupRegister, c_playerAny, "AP_TrooperMengskWeaponPickupRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickerUpperRegister
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib15EF4C78_gv_cM_Mengsk_WeaponPickerUppers, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperRegister_Init () {
    lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperRegister = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperRegister_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperRegister, c_playerAny, "AP_TrooperMengskWeaponPickerUpperRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickerUpperUnregister
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperUnregister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib15EF4C78_gv_cM_Mengsk_WeaponPickerUppers, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperUnregister_Init () {
    lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperUnregister = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperUnregister_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperUnregister, c_playerAny, "AP_TrooperMengskWeaponPickerupperUnregister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickup
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_WeaponPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickup;
    unit lv_pickerupper;

    // Automatic Variable Declarations
    unitgroup auto0DB29B73_g;
    int auto0DB29B73_u;
    string autoC1CDD2A2_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lib15EF4C78_gv_cM_Mengsk_WeaponPickups, c_unitCountAlive) > 0) && (UnitGroupCount(lib15EF4C78_gv_cM_Mengsk_WeaponPickerUppers, c_unitCountAlive) > 0)) {
        auto0DB29B73_g = lib15EF4C78_gv_cM_Mengsk_WeaponPickups;
        auto0DB29B73_u = UnitGroupCount(auto0DB29B73_g, c_unitCountAll);
        for (;; auto0DB29B73_u -= 1) {
            lv_pickup = UnitGroupUnitFromEnd(auto0DB29B73_g, auto0DB29B73_u);
            if (lv_pickup == null) { break; }
            lv_pickerupper = UnitGroupClosestToPoint(lib15EF4C78_gv_cM_Mengsk_WeaponPickerUppers, UnitGetPosition(lv_pickup));
            if ((UnitIsAlive(lv_pickerupper) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_pickup), UnitGetPosition(lv_pickerupper)) <= 2.0)) {
                autoC1CDD2A2_val = UnitGetType(lv_pickup);
                if (autoC1CDD2A2_val == "AP_TrooperMengskWeaponAAPickup") {
                    lib15EF4C78_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "AP_TrooperMengskMorphAA", "AP_TrooperMengskWeaponAA", "SetWeaponAA");
                }
                else if (autoC1CDD2A2_val == "AP_TrooperMengskWeaponFlamethrowerPickup") {
                    lib15EF4C78_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "AP_TrooperMengskMorphFlamethrower", "AP_TrooperMengskWeaponFlamethrower", "SetWeaponFlamethrower");
                }
                else if (autoC1CDD2A2_val == "AP_TrooperMengskWeaponImprovedPickup") {
                    lib15EF4C78_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "AP_TrooperMengskMorphImproved", "AP_TrooperMengskWeaponImproved", "SetWeaponImproved");
                }
                else {
                    UnitGroupRemove(lib15EF4C78_gv_cM_Mengsk_WeaponPickups, lv_pickup);
                }
            }

            lv_pickerupper = null;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_WeaponPickup_Init () {
    lib15EF4C78_gt_CM_Mengsk_WeaponPickup = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_WeaponPickup_Func");
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_CM_Mengsk_WeaponPickup, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShadowOpsNovaNukeArmed
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ShadowOpsNovaNukeArmed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shadowOps;
    unit lv_nuke;
    string lv_nukeType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_shadowOps = EventUnit();
    lv_nuke = EventUnitProgressUnit();
    lv_nukeType = libNtve_gf_TriggeringProgressUnitType();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_shadowOps) == "AP_GhostAcademy"))) {
            return false;
        }

        if (!((lv_nukeType == "AP_HeroNuke"))) {
            return false;
        }

        if (!((UnitMagazineCount(lv_shadowOps, "AP_HeroArmNuke") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityRemove(lv_shadowOps, "AP_HeroArmNuke");
    UnitRemove(lv_nuke);
    UnitMagazineArm(lv_shadowOps, AbilityCommand("AP_HeroArmNukeCountDisplay", 0), 1);
    UnitGroupAdd(lib15EF4C78_gv_armedShadowOpsNovaNuke, lv_shadowOps);
    UnitBehaviorRemove(lv_shadowOps, "AP_NovaNukeArming", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ShadowOpsNovaNukeArmed_Init () {
    lib15EF4C78_gt_ShadowOpsNovaNukeArmed = TriggerCreate("lib15EF4C78_gt_ShadowOpsNovaNukeArmed_Func");
    TriggerAddEventUnitArmMagazineProgress(lib15EF4C78_gt_ShadowOpsNovaNukeArmed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShadowOpsNovaNukeUsed
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ShadowOpsNovaNukeUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shadowOps;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto411E78BD_g;
    int auto411E78BD_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto411E78BD_g = UnitGroupFilterPlayer(lib15EF4C78_gv_armedShadowOpsNovaNuke, lv_player, 0);
    auto411E78BD_u = UnitGroupCount(auto411E78BD_g, c_unitCountAll);
    for (;; auto411E78BD_u -= 1) {
        lv_shadowOps = UnitGroupUnitFromEnd(auto411E78BD_g, auto411E78BD_u);
        if (lv_shadowOps == null) { break; }
        if ((UnitMagazineCount(lv_shadowOps, "AP_HeroArmNukeCountDisplay") == 0)) {
            UnitGroupRemove(lib15EF4C78_gv_armedShadowOpsNovaNuke, lv_shadowOps);
            UnitAbilityAdd(lv_shadowOps, "AP_HeroArmNuke");
            UnitModifyCooldown(lv_shadowOps, "Abil/AP_HeroArmNuke", libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "AP_HeroArmNuke", "InfoArray[" + IntToString(0) + "].Cooldown.TimeUse", lv_player), c_cooldownOperationSet);
            UnitBehaviorAdd(lv_shadowOps, "AP_NovaNukeArming", lv_shadowOps, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ShadowOpsNovaNukeUsed_Init () {
    lib15EF4C78_gt_ShadowOpsNovaNukeUsed = TriggerCreate("lib15EF4C78_gt_ShadowOpsNovaNukeUsed_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_ShadowOpsNovaNukeUsed, c_playerAny, "AP_HeroNukeCalldown");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShadowOpsMengskNukeArmed
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ShadowOpsMengskNukeArmed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shadowOps;
    unit lv_nuke;
    string lv_nukeType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_shadowOps = EventUnit();
    lv_nuke = EventUnitProgressUnit();
    lv_nukeType = libNtve_gf_TriggeringProgressUnitType();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_shadowOps) == "AP_GhostAcademy"))) {
            return false;
        }

        if (!((lv_nukeType == "AP_NukeMengsk"))) {
            return false;
        }

        if (!((UnitMagazineCount(lv_shadowOps, "AP_ArmSiloWithNukeMengsk") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityRemove(lv_shadowOps, "AP_ArmSiloWithNukeMengsk");
    UnitRemove(lv_nuke);
    UnitMagazineArm(lv_shadowOps, AbilityCommand("AP_ArmSiloWithNukeMengskCountDisplay", 0), 1);
    UnitGroupAdd(lib15EF4C78_gv_armedShadowOpsMengskNuke, lv_shadowOps);
    UnitBehaviorRemove(lv_shadowOps, "AP_MengskNukeArming", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ShadowOpsMengskNukeArmed_Init () {
    lib15EF4C78_gt_ShadowOpsMengskNukeArmed = TriggerCreate("lib15EF4C78_gt_ShadowOpsMengskNukeArmed_Func");
    TriggerAddEventUnitArmMagazineProgress(lib15EF4C78_gt_ShadowOpsMengskNukeArmed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShadowOpsMengskNukeUsed
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ShadowOpsMengskNukeUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shadowOps;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto8D28F769_g;
    int auto8D28F769_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto8D28F769_g = UnitGroupFilterPlayer(lib15EF4C78_gv_armedShadowOpsMengskNuke, lv_player, 0);
    auto8D28F769_u = UnitGroupCount(auto8D28F769_g, c_unitCountAll);
    for (;; auto8D28F769_u -= 1) {
        lv_shadowOps = UnitGroupUnitFromEnd(auto8D28F769_g, auto8D28F769_u);
        if (lv_shadowOps == null) { break; }
        if ((UnitMagazineCount(lv_shadowOps, "AP_ArmSiloWithNukeMengskCountDisplay") == 0)) {
            UnitGroupRemove(lib15EF4C78_gv_armedShadowOpsMengskNuke, lv_shadowOps);
            UnitAbilityAdd(lv_shadowOps, "AP_ArmSiloWithNukeMengsk");
            UnitModifyCooldown(lv_shadowOps, "Abil/AP_ArmSiloWithNukeMengsk", libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "AP_ArmSiloWithNukeMengsk", "InfoArray[" + IntToString(0) + "].Cooldown.TimeUse", lv_player), c_cooldownOperationSet);
            UnitBehaviorAdd(lv_shadowOps, "AP_MengskNukeArming", lv_shadowOps, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ShadowOpsMengskNukeUsed_Init () {
    lib15EF4C78_gt_ShadowOpsMengskNukeUsed = TriggerCreate("lib15EF4C78_gt_ShadowOpsMengskNukeUsed_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_ShadowOpsMengskNukeUsed, c_playerAny, "AP_GhostMengskNukeSwitch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacTankPickup
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacTankPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_SiegeTankSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_medivac), "AP_MedivacSiegeTankAirlift", c_techCountQueuedOrBetter) >= 1)) {
        UnitBehaviorAdd(lv_medivac, "AP_MedivacSiegeTankAirlift", lv_tank, 1);
    }

    UnitBehaviorAdd(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", lv_tank, UnitBehaviorCount(lv_tank, "AP_SiegeTankSiegeModeProgressiveRangeIncease"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacTankPickup_Init () {
    lib15EF4C78_gt_MedivacTankPickup = TriggerCreate("lib15EF4C78_gt_MedivacTankPickup_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacTankPickup, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacTankDrop
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacTankDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_SiegeTankSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    UnitBehaviorRemove(lv_medivac, "AP_MedivacSiegeTankAirlift", 1);
    UnitBehaviorRemove(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacTankDrop_Init () {
    lib15EF4C78_gt_MedivacTankDrop = TriggerCreate("lib15EF4C78_gt_MedivacTankDrop_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacTankDrop, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacMercTankPickup
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacMercTankPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_SiegeBreakerSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_medivac), "AP_MedivacSiegeTankAirlift", c_techCountQueuedOrBetter) >= 1)) {
        UnitBehaviorAdd(lv_medivac, "AP_MedivacMercSiegeTankAirlift", lv_tank, 1);
    }

    UnitBehaviorAdd(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", lv_tank, UnitBehaviorCount(lv_tank, "AP_SiegeTankSiegeModeProgressiveRangeIncease"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacMercTankPickup_Init () {
    lib15EF4C78_gt_MedivacMercTankPickup = TriggerCreate("lib15EF4C78_gt_MedivacMercTankPickup_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacMercTankPickup, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacMercTankDrop
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacMercTankDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_SiegeBreakerSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    UnitBehaviorRemove(lv_medivac, "AP_MedivacMercSiegeTankAirlift", 1);
    UnitBehaviorRemove(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacMercTankDrop_Init () {
    lib15EF4C78_gt_MedivacMercTankDrop = TriggerCreate("lib15EF4C78_gt_MedivacMercTankDrop_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacMercTankDrop, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacInfestedTankPickup
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacInfestedTankPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_InfestedSiegeBreakerSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_medivac), "AP_MedivacSiegeTankAirlift", c_techCountQueuedOrBetter) >= 1)) {
        UnitBehaviorAdd(lv_medivac, "AP_MedivacInfestedSiegeBreakerAirlift", lv_tank, 1);
    }

    UnitBehaviorAdd(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", lv_tank, UnitBehaviorCount(lv_tank, "AP_SiegeTankSiegeModeProgressiveRangeIncease"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacInfestedTankPickup_Init () {
    lib15EF4C78_gt_MedivacInfestedTankPickup = TriggerCreate("lib15EF4C78_gt_MedivacInfestedTankPickup_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacInfestedTankPickup, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacInfestedTankDrop
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacInfestedTankDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_InfestedSiegeBreakerSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    UnitBehaviorRemove(lv_medivac, "AP_MedivacInfestedSiegeBreakerAirlift", 1);
    UnitBehaviorRemove(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacInfestedTankDrop_Init () {
    lib15EF4C78_gt_MedivacInfestedTankDrop = TriggerCreate("lib15EF4C78_gt_MedivacInfestedTankDrop_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacInfestedTankDrop, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacShockDivisionPickup
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacShockDivisionPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_SiegeTankMengskSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_medivac), "AP_MedivacSiegeTankAirlift", c_techCountQueuedOrBetter) >= 1)) {
        UnitBehaviorAdd(lv_medivac, "AP_MedivacMengskSiegeTankAirlift", lv_tank, 1);
    }

    UnitBehaviorAdd(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", lv_tank, UnitBehaviorCount(lv_tank, "AP_SiegeTankSiegeModeProgressiveRangeIncease"));
    UnitBehaviorAdd(lv_medivac, "AP_VeterancySuppressEffects", lv_medivac, 1);
    UnitBehaviorAdd(lv_medivac, "AP_MengskVeterancyMedivac", lv_medivac, 1);
    UnitXPSetCurrentXP(lv_medivac, "AP_MengskVeterancyMedivac", 0.0);
    UnitXPAddXP(lv_medivac, null, UnitXPGetCurrentXP(lv_tank, null));
    if ((UnitGroupHasUnit(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_tank) == true)) {
        UnitGroupRemove(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_tank);
        UnitGroupAdd(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_medivac);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacShockDivisionPickup_Init () {
    lib15EF4C78_gt_MedivacShockDivisionPickup = TriggerCreate("lib15EF4C78_gt_MedivacShockDivisionPickup_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacShockDivisionPickup, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedivacShockDivisionDrop
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_MedivacShockDivisionDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AP_Medivac"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCargo()) == "AP_SiegeTankMengskSiegedTransportable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medivac = EventUnit();
    lv_tank = EventUnitCargo();
    UnitBehaviorRemove(lv_medivac, "AP_MedivacMengskSiegeTankAirlift", 1);
    UnitBehaviorRemove(lv_medivac, "AP_SiegeTankSiegeModeProgressiveRangeIncease", c_unitBehaviorCountAll);
    UnitBehaviorAdd(lv_tank, "AP_VeterancySuppressEffects", lv_tank, 1);
    UnitXPSetCurrentXP(lv_tank, "AP_MengskVeterancySiegeTankMengsk", UnitXPGetCurrentXP(lv_medivac, "AP_MengskVeterancyMedivac"));
    if ((UnitGroupHasUnit(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_medivac) == true)) {
        UnitGroupRemove(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_medivac);
        UnitGroupAdd(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_tank);
    }

    UnitBehaviorRemove(lv_medivac, "AP_MengskVeterancyMedivac", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_MedivacShockDivisionDrop_Init () {
    lib15EF4C78_gt_MedivacShockDivisionDrop = TriggerCreate("lib15EF4C78_gt_MedivacShockDivisionDrop_Func");
    TriggerAddEventUnitCargo(lib15EF4C78_gt_MedivacShockDivisionDrop, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeterancyEarned
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_VeterancyEarned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    string lv_unitType;
    fixed lv_userDataValue;
    fixed lv_xp;
    unitgroup lv_veteranunits;
    int lv_veterancount;
    fixed lv_xppersupplyratio;
    fixed lv_heroicxpoverride;
    fixed lv_minimumearnedxp;
    fixed lv_xpradius;

    // Automatic Variable Declarations
    unitgroup autoB45ECD10_g;
    int autoB45ECD10_u;
    unit autoB45ECD10_var;

    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_unitType = UnitGetType(lv_dyingunit);
    lv_veteranunits = UnitGroupEmpty();
    lv_xppersupplyratio = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AP_MengskRoyalGuardExperienceGainDummy", "Amount", 0);
    lv_heroicxpoverride = 800.0;
    lv_minimumearnedxp = 1.0;
    lv_xpradius = 15.0;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_dyingunit, libNtve_gf_KillingPlayer(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_xppersupplyratio = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AP_MengskRoyalGuardExperienceGainDummy", "Amount", libNtve_gf_KillingPlayer());
    lv_veteranunits = UnitGroupFilterRegion(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, RegionCircle(UnitGetPosition(lv_dyingunit), lv_xpradius), 0);
    lv_veteranunits = UnitGroupFilterAlliance(lv_veteranunits, UnitGetOwner(lv_dyingunit), c_unitAllianceEnemy, 0);
    lv_veteranunits = UnitGroupFilterAlliance(lv_veteranunits, libNtve_gf_KillingPlayer(), c_unitAllianceAlly, 0);
    if ((UnitGroupHasUnit(lv_veteranunits, libNtve_gf_KillingUnit()) == false) && (UnitGroupHasUnit(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, libNtve_gf_KillingUnit()) == true)) {
        UnitGroupAdd(lv_veteranunits, libNtve_gf_KillingUnit());
    }

    lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
    lv_userDataValue = UserDataGetFixed("AP_MengskVetarancySupplyCostOverrides", lv_unitType, "OverrideSupplyCost", 1);
    if ((lv_userDataValue > 0.0)) {
        lv_xp = (lv_userDataValue * lv_xppersupplyratio);
    }
    else {
        lv_xp = (UnitTypeGetProperty(lv_unitType, c_unitPropSuppliesUsed) * lv_xppersupplyratio);
    }
    if ((lv_xp <= 0.0) && (UnitFilterMatch(lv_dyingunit, libNtve_gf_KillingPlayer(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        lv_xp = lv_heroicxpoverride;
    }
    else if ((lv_xp <= 0.0)) {
        return true;
    }
    if ((lv_veterancount == 0)) {
        lv_veteranunits = UnitGroupCopy(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits);
        lv_veteranunits = UnitGroupFilterAlliance(lv_veteranunits, UnitGetOwner(lv_dyingunit), c_unitAllianceEnemy, 0);
        lv_veteranunits = UnitGroupFilterAlliance(lv_veteranunits, libNtve_gf_KillingPlayer(), c_unitAllianceAlly, 0);
        lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
        if ((lv_veterancount == 0)) {
            return true;
        }

    }

    lv_xp = MaxF(Round((lv_xp / lv_veterancount)), lv_minimumearnedxp);
    autoB45ECD10_g = lv_veteranunits;
    autoB45ECD10_u = UnitGroupCount(autoB45ECD10_g, c_unitCountAll);
    for (;; autoB45ECD10_u -= 1) {
        autoB45ECD10_var = UnitGroupUnitFromEnd(autoB45ECD10_g, autoB45ECD10_u);
        if (autoB45ECD10_var == null) { break; }
        UnitXPAddXP(autoB45ECD10_var, null, lv_xp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_VeterancyEarned_Init () {
    lib15EF4C78_gt_CM_Mengsk_VeterancyEarned = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_VeterancyEarned_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_CM_Mengsk_VeterancyEarned, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RegisterVeteranUnit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_RegisterVeteranUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AP_MengskVeteranL4Tracker") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_RegisterVeteranUnit_Init () {
    lib15EF4C78_gt_CM_Mengsk_RegisterVeteranUnit = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_RegisterVeteranUnit_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Mengsk_RegisterVeteranUnit, c_playerAny, "AP_MengskVeteranTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RemoveVeteranUnit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_RemoveVeteranUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    UnitGroupRemove(lib15EF4C78_gv_cM_Mengsk_XPHungryUnits, lv_levellingunit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_RemoveVeteranUnit_Init () {
    lib15EF4C78_gt_CM_Mengsk_RemoveVeteranUnit = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_RemoveVeteranUnit_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Mengsk_RemoveVeteranUnit, c_playerAny, "AP_MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeteranDing
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CM_Mengsk_VeteranDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CM_Mengsk_VeteranDing_Init () {
    lib15EF4C78_gt_CM_Mengsk_VeteranDing = TriggerCreate("lib15EF4C78_gt_CM_Mengsk_VeteranDing_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_CM_Mengsk_VeteranDing, c_playerAny, "AP_MengskVeteranLevelUpDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onPrideOfAugustgradLevelChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "AP_BattlecruiserMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updatePrideOfAugustgradWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange_Init () {
    lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange = TriggerCreate("lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange, null, "AP_MengskVeteranL1Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange, null, "AP_MengskVeteranL2Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange, null, "AP_MengskVeteranL3Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange, null, "AP_MengskVeteranL4Tracker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onATXUpgradeGiven
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onATXUpgradeGiven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoC4B0ED1F_g;
    int autoC4B0ED1F_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "AP_AdvancedWeaponryBattlecruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4B0ED1F_g = UnitGroup("AP_BattlecruiserMengsk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4B0ED1F_u = UnitGroupCount(autoC4B0ED1F_g, c_unitCountAll);
    for (;; autoC4B0ED1F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC4B0ED1F_g, autoC4B0ED1F_u);
        if (lv_unit == null) { break; }
        lib15EF4C78_gf_AP_Player_updatePrideOfAugustgradWeapons(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onATXUpgradeGiven_Init () {
    lib15EF4C78_gt_AP_Player_onATXUpgradeGiven = TriggerCreate("lib15EF4C78_gt_AP_Player_onATXUpgradeGiven_Func");
    TriggerAddEventUpgradeLevelChanged(lib15EF4C78_gt_AP_Player_onATXUpgradeGiven, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onPrideOfAugustgradTrained
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onPrideOfAugustgradTrained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitProgressUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "AP_BattlecruiserMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updatePrideOfAugustgradWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onPrideOfAugustgradTrained_Init () {
    lib15EF4C78_gt_AP_Player_onPrideOfAugustgradTrained = TriggerCreate("lib15EF4C78_gt_AP_Player_onPrideOfAugustgradTrained_Func");
    TriggerAddEventUnitTrainProgress(lib15EF4C78_gt_AP_Player_onPrideOfAugustgradTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_initPreplacedPrideOfAugustrad
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_initPreplacedPrideOfAugustrad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoF939EF96_g;
    int autoF939EF96_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF939EF96_g = UnitGroup("AP_BattlecruiserMengsk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF939EF96_u = UnitGroupCount(autoF939EF96_g, c_unitCountAll);
    for (;; autoF939EF96_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF939EF96_g, autoF939EF96_u);
        if (lv_unit == null) { break; }
        lib15EF4C78_gf_AP_Player_updatePrideOfAugustgradWeapons(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_initPreplacedPrideOfAugustrad_Init () {
    lib15EF4C78_gt_AP_Player_initPreplacedPrideOfAugustrad = TriggerCreate("lib15EF4C78_gt_AP_Player_initPreplacedPrideOfAugustrad_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_AP_Player_initPreplacedPrideOfAugustrad);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onShockDivisionLevelChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_unit) == "AP_SiegeTankMengsk") || (UnitGetType(lv_unit) == "AP_SiegeTankMengskSieged") || (UnitGetType(lv_unit) == "AP_SiegeTankMengskSiegedTransportable")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updateShockDivisionWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange_Init () {
    lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange = TriggerCreate("lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange, null, "AP_MengskVeteranL1Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange, null, "AP_MengskVeteranL2Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange, null, "AP_MengskVeteranL3Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange, null, "AP_MengskVeteranL4Tracker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onShockDivisionTransform
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onShockDivisionTransform_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updateShockDivisionWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onShockDivisionTransform_Init () {
    lib15EF4C78_gt_AP_Player_onShockDivisionTransform = TriggerCreate("lib15EF4C78_gt_AP_Player_onShockDivisionTransform_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_onShockDivisionTransform, null, AbilityCommand("AP_SiegeModeMengsk", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_onShockDivisionTransform, null, AbilityCommand("AP_UnsiegeMengsk", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_onShockDivisionTransform, null, AbilityCommand("AP_SiegeTankMengskSiegedTransportableMorph", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onBulwarkCompanyLevelChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "AP_GoliathMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updateBulwarkCompanyWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange_Init () {
    lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange = TriggerCreate("lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange, null, "AP_MengskVeteranL1Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange, null, "AP_MengskVeteranL2Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange, null, "AP_MengskVeteranL3Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange, null, "AP_MengskVeteranL4Tracker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onNightHawkLevelChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onNightHawkLevelChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "AP_WraithMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updateNightHawkWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onNightHawkLevelChange_Init () {
    lib15EF4C78_gt_AP_Player_onNightHawkLevelChange = TriggerCreate("lib15EF4C78_gt_AP_Player_onNightHawkLevelChange_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onNightHawkLevelChange, null, "AP_MengskVeteranL1Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onNightHawkLevelChange, null, "AP_MengskVeteranL2Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onNightHawkLevelChange, null, "AP_MengskVeteranL3Tracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_AP_Player_onNightHawkLevelChange, null, "AP_MengskVeteranL4Tracker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onAdvancedLaserTechnologyUpgradeGiven
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onAdvancedLaserTechnologyUpgradeGiven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto11D0EAB2_g;
    int auto11D0EAB2_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "AP_WraithAdvancedLaserTechnology"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto11D0EAB2_g = UnitGroup("AP_WraithMengsk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11D0EAB2_u = UnitGroupCount(auto11D0EAB2_g, c_unitCountAll);
    for (;; auto11D0EAB2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto11D0EAB2_g, auto11D0EAB2_u);
        if (lv_unit == null) { break; }
        lib15EF4C78_gf_AP_Player_updateNightHawkWeapons(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onAdvancedLaserTechnologyUpgradeGiven_Init () {
    lib15EF4C78_gt_AP_Player_onAdvancedLaserTechnologyUpgradeGiven = TriggerCreate("lib15EF4C78_gt_AP_Player_onAdvancedLaserTechnologyUpgradeGiven_Func");
    TriggerAddEventUpgradeLevelChanged(lib15EF4C78_gt_AP_Player_onAdvancedLaserTechnologyUpgradeGiven, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_onNightHawkTrained
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_onNightHawkTrained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitProgressUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "AP_WraithMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_updateNightHawkWeapons(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_onNightHawkTrained_Init () {
    lib15EF4C78_gt_AP_Player_onNightHawkTrained = TriggerCreate("lib15EF4C78_gt_AP_Player_onNightHawkTrained_Func");
    TriggerAddEventUnitTrainProgress(lib15EF4C78_gt_AP_Player_onNightHawkTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Merc_ArrayInit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Merc_ArrayInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gv_aP_Player_MercCooldownLinks[0] = "AP_KelMorianMercs";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[0] = AbilityCommand("AP_SummonMercenaries", 0);
    lib15EF4C78_gv_aP_Player_MercType[0] = lib15EF4C78_ge_AP_Player_MercenaryType_INFANTRY;
    lib15EF4C78_gv_aP_Player_MercAbility[0] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[0] = 0;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[1] = "AP_DevilDogs";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[1] = AbilityCommand("AP_SummonMercenaries", 1);
    lib15EF4C78_gv_aP_Player_MercType[1] = lib15EF4C78_ge_AP_Player_MercenaryType_INFANTRY;
    lib15EF4C78_gv_aP_Player_MercAbility[1] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[1] = 1;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[2] = "AP_SpartanCompany";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[2] = AbilityCommand("AP_SummonMercenaries", 2);
    lib15EF4C78_gv_aP_Player_MercType[2] = lib15EF4C78_ge_AP_Player_MercenaryType_VEHICLE;
    lib15EF4C78_gv_aP_Player_MercAbility[2] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[2] = 2;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[3] = "AP_HammerSecurities";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[3] = AbilityCommand("AP_SummonMercenaries", 3);
    lib15EF4C78_gv_aP_Player_MercType[3] = lib15EF4C78_ge_AP_Player_MercenaryType_INFANTRY;
    lib15EF4C78_gv_aP_Player_MercAbility[3] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[3] = 3;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[4] = "AP_SiegeBreakers";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[4] = AbilityCommand("AP_SummonMercenaries", 4);
    lib15EF4C78_gv_aP_Player_MercType[4] = lib15EF4C78_ge_AP_Player_MercenaryType_VEHICLE;
    lib15EF4C78_gv_aP_Player_MercAbility[4] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[4] = 4;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[5] = "AP_HelsAngels";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[5] = AbilityCommand("AP_SummonMercenaries", 5);
    lib15EF4C78_gv_aP_Player_MercType[5] = lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP;
    lib15EF4C78_gv_aP_Player_MercAbility[5] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[5] = 5;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[6] = "AP_DuskWing";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[6] = AbilityCommand("AP_SummonMercenaries", 6);
    lib15EF4C78_gv_aP_Player_MercType[6] = lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP;
    lib15EF4C78_gv_aP_Player_MercAbility[6] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[6] = 6;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[7] = "AP_DukesRevenge";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[7] = AbilityCommand("AP_SummonMercenaries", 7);
    lib15EF4C78_gv_aP_Player_MercType[7] = lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP;
    lib15EF4C78_gv_aP_Player_MercAbility[7] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[7] = 7;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[8] = "AP_MercMedic";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[8] = AbilityCommand("AP_SummonMercenaries", 8);
    lib15EF4C78_gv_aP_Player_MercType[8] = lib15EF4C78_ge_AP_Player_MercenaryType_INFANTRY;
    lib15EF4C78_gv_aP_Player_MercAbility[8] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[8] = 8;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[9] = "AP_MercReaper";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[9] = AbilityCommand("AP_SummonMercenaries", 9);
    lib15EF4C78_gv_aP_Player_MercType[9] = lib15EF4C78_ge_AP_Player_MercenaryType_INFANTRY;
    lib15EF4C78_gv_aP_Player_MercAbility[9] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[9] = 9;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[10] = "AP_MercWraith";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[10] = AbilityCommand("AP_SummonMercenaries", 10);
    lib15EF4C78_gv_aP_Player_MercType[10] = lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP;
    lib15EF4C78_gv_aP_Player_MercAbility[10] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[10] = 10;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[11] = "AP_MercLiberator";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[11] = AbilityCommand("AP_SummonMercenaries", 11);
    lib15EF4C78_gv_aP_Player_MercType[11] = lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP;
    lib15EF4C78_gv_aP_Player_MercAbility[11] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[11] = 11;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[12] = "AP_BrynhildFighter";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[12] = AbilityCommand("AP_SummonMercenaries", 12);
    lib15EF4C78_gv_aP_Player_MercType[12] = lib15EF4C78_ge_AP_Player_MercenaryType_STARSHIP;
    lib15EF4C78_gv_aP_Player_MercAbility[12] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[12] = 12;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[13] = "AP_MercThor";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[13] = AbilityCommand("AP_SummonMercenaries", 13);
    lib15EF4C78_gv_aP_Player_MercType[13] = lib15EF4C78_ge_AP_Player_MercenaryType_VEHICLE;
    lib15EF4C78_gv_aP_Player_MercAbility[13] = "AP_SummonMercenaries";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[13] = 13;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[14] = "AP_InfestedMedics";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[14] = AbilityCommand("AP_SummonZergMercs", 0);
    lib15EF4C78_gv_aP_Player_MercType[14] = lib15EF4C78_ge_AP_Player_MercenaryType_INFESTED;
    lib15EF4C78_gv_aP_Player_MercAbility[14] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[14] = 0;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[15] = "AP_InfestedSiegeBreakers";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[15] = AbilityCommand("AP_SummonZergMercs", 1);
    lib15EF4C78_gv_aP_Player_MercType[15] = lib15EF4C78_ge_AP_Player_MercenaryType_INFESTED;
    lib15EF4C78_gv_aP_Player_MercAbility[15] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[15] = 1;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[16] = "AP_InfestedDuskWings";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[16] = AbilityCommand("AP_SummonZergMercs", 2);
    lib15EF4C78_gv_aP_Player_MercType[16] = lib15EF4C78_ge_AP_Player_MercenaryType_INFESTED;
    lib15EF4C78_gv_aP_Player_MercAbility[16] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[16] = 2;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[17] = "AP_MercZerglings";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[17] = AbilityCommand("AP_SummonZergMercs", 3);
    lib15EF4C78_gv_aP_Player_MercType[17] = lib15EF4C78_ge_AP_Player_MercenaryType_BROODWAR;
    lib15EF4C78_gv_aP_Player_MercAbility[17] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[17] = 3;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[18] = "AP_HunterKiller";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[18] = AbilityCommand("AP_SummonZergMercs", 4);
    lib15EF4C78_gv_aP_Player_MercType[18] = lib15EF4C78_ge_AP_Player_MercenaryType_BROODWAR;
    lib15EF4C78_gv_aP_Player_MercAbility[18] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[18] = 4;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[19] = "AP_MercUltralisk";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[19] = AbilityCommand("AP_SummonZergMercs", 5);
    lib15EF4C78_gv_aP_Player_MercAbility[19] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercType[19] = lib15EF4C78_ge_AP_Player_MercenaryType_BROODWAR;
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[19] = 5;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[20] = "AP_HunterlingSummon";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[20] = AbilityCommand("AP_SummonZergMercs", 6);
    lib15EF4C78_gv_aP_Player_MercAbility[20] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercType[20] = lib15EF4C78_ge_AP_Player_MercenaryType_SCTWO;
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[20] = 6;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[21] = "AP_YggdrasilSummon";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[21] = AbilityCommand("AP_SummonZergMercs", 8);
    lib15EF4C78_gv_aP_Player_MercAbility[21] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercType[21] = lib15EF4C78_ge_AP_Player_MercenaryType_BROODWAR;
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[21] = 8;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[22] = "AP_MercRoachSummon";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[22] = AbilityCommand("AP_SummonZergMercs", 9);
    lib15EF4C78_gv_aP_Player_MercAbility[22] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercType[22] = lib15EF4C78_ge_AP_Player_MercenaryType_SCTWO;
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[22] = 9;
    lib15EF4C78_gv_aP_Player_MercCooldownLinks[23] = "AP_MercZerglings";
    lib15EF4C78_gv_aP_Player_MercAbilityCommands[23] = AbilityCommand("AP_SummonZergMercs", 7);
    lib15EF4C78_gv_aP_Player_MercAbility[23] = "AP_SummonZergMercs";
    lib15EF4C78_gv_aP_Player_MercType[23] = lib15EF4C78_ge_AP_Player_MercenaryType_BROODWAR;
    lib15EF4C78_gv_aP_Player_MercAbilityInfoArrayIndex[23] = 7;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Merc_ArrayInit_Init () {
    lib15EF4C78_gt_AP_Player_Merc_ArrayInit = TriggerCreate("lib15EF4C78_gt_AP_Player_Merc_ArrayInit_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_AP_Player_Merc_ArrayInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_MercCompoundUpdateCounts
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_MercCompoundUpdateCounts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoF96DA51A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF96DA51A_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF96DA51A_g, lv_player);
        if (lv_player < 0) { break; }
        lib15EF4C78_gf_AP_Player_MercCompoundUpdateAvailableCount(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_MercCompoundUpdateCounts_Init () {
    lib15EF4C78_gt_AP_Player_MercCompoundUpdateCounts = TriggerCreate("lib15EF4C78_gt_AP_Player_MercCompoundUpdateCounts_Func");
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_AP_Player_MercCompoundUpdateCounts, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_MercCompoundOnMercUse
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_MercCompoundUpdateAvailableCount(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse_Init () {
    lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse = TriggerCreate("lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 2), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 3), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 4), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 5), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 6), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 7), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 8), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 9), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 10), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 11), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 12), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonMercenaries", 13), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 2), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 3), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 4), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 5), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 6), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse, null, AbilityCommand("AP_SummonZergMercs", 10), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Terran_MercCompoundTabSetInfantry
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetInfantry_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundInfantrySelected", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundVehiclesSelected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundStarshipsSelected", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetInfantry_Init () {
    lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetInfantry = TriggerCreate("lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetInfantry_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetInfantry, c_playerAny, "AP_MercCompoundInfantryTabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Terran_MercCompoundTabSetVehicles
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetVehicles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundInfantrySelected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundVehiclesSelected", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundStarshipsSelected", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetVehicles_Init () {
    lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetVehicles = TriggerCreate("lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetVehicles_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetVehicles, c_playerAny, "AP_MercCompoundVehiclesTabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Terran_MercCompoundTabSetStarships
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetStarships_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundInfantrySelected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundVehiclesSelected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_MercCompoundStarshipsSelected", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetStarships_Init () {
    lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetStarships = TriggerCreate("lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetStarships_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetStarships, c_playerAny, "AP_MercCompoundStarshipsTabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Zerg_MercCompoundTabSetBroodWar
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetBroodWar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundBroodWarSelected", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundSC2Selected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundInfestedSelected", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetBroodWar_Init () {
    lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetBroodWar = TriggerCreate("lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetBroodWar_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetBroodWar, c_playerAny, "AP_ZergMercCompoundBroodWarTabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Zerg_MercCompoundTabSetSC2
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetSC2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundBroodWarSelected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundSC2Selected", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundInfestedSelected", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetSC2_Init () {
    lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetSC2 = TriggerCreate("lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetSC2_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetSC2, c_playerAny, "AP_ZergMercCompoundSC2TabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_Zerg_MercCompoundTabSetInfested
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetInfested_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundBroodWarSelected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundSC2Selected", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AP_ZergMercCompoundInfestedSelected", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetInfested_Init () {
    lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetInfested = TriggerCreate("lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetInfested_Func");
    TriggerAddEventPlayerEffectUsed(lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetInfested, c_playerAny, "AP_ZergMercCompoundInfestedTabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EmitTransformerLand
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_EmitTransformerLand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gv_aP_PlayerTransformerLandTriggeringUnit = EventUnit();
    TriggerSendEvent(lib15EF4C78_gv_aP_PLAYER_TRANSFORMER_LAND_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_EmitTransformerLand_Init () {
    lib15EF4C78_gt_EmitTransformerLand = TriggerCreate("lib15EF4C78_gt_EmitTransformerLand_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_EmitTransformerLand, null, AbilityCommand("AP_AssaultMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_EmitTransformerLand, null, AbilityCommand("AssaultMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_EmitTransformerLand, null, AbilityCommand("AP_WreckingCrewAssaultMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_EmitTransformerLand, null, AbilityCommand("AP_BrynhildAssaultMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_EmitTransformerLand, null, AbilityCommand("AP_ReaperLandMorph", 255), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib15EF4C78_gt_EmitTransformerLand, null, AbilityCommand("AP_MercReaperLandMorph", 255), c_unitAbilStageComplete, false);
}

void lib15EF4C78_InitTriggers () {
    lib15EF4C78_gt_ApplyZergStructureRapidRegen_Init();
    lib15EF4C78_gt_Stukov_InfestedBunkerRegister_Init();
    lib15EF4C78_gt_Stukov_InfestedBunkerInitialSpawn_Init();
    lib15EF4C78_gt_Stukov_InfestedBunkerAutoLoad_Init();
    lib15EF4C78_gt_Stukov_InfestedBunkerUnloadRally_Init();
    lib15EF4C78_gt_Stukov_HordeWaveCreated_Init();
    lib15EF4C78_gt_Stukov_RallyPlaced_Init();
    lib15EF4C78_gt_CM_Stukov_UnitCostRefund_Init();
    lib15EF4C78_gt_AP_Stukov_InfestedSiegeTankDeath_Init();
    lib15EF4C78_gt_AP_InitDetectionFactions_Init();
    lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Init();
    lib15EF4C78_gt_AP_Player_GatewayStickyKeys_Init();
    lib15EF4C78_gt_AP_Player_RoboStickyKeys_Init();
    lib15EF4C78_gt_AP_Player_StargateStickyKeys_Init();
    lib15EF4C78_gt_ReactorswaptoAP_Barracks_Init();
    lib15EF4C78_gt_ReactorswaptoBarracks_Init();
    lib15EF4C78_gt_ReactorswaptoAP_Factory_Init();
    lib15EF4C78_gt_ReactorswaptoFactory_Init();
    lib15EF4C78_gt_ReactorswaptoAP_Starport_Init();
    lib15EF4C78_gt_ReactorswaptoStarport_Init();
    lib15EF4C78_gt_TechLabswaptoAP_Barracks_Init();
    lib15EF4C78_gt_TechLabswaptoBarracks_Init();
    lib15EF4C78_gt_TechLabswaptoAP_Factory_Init();
    lib15EF4C78_gt_TechLabswaptoFactory_Init();
    lib15EF4C78_gt_TechLabswaptoAP_Starport_Init();
    lib15EF4C78_gt_TechLabswaptoStarport_Init();
    lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Init();
    lib15EF4C78_gt_TechReactorswaptoAP_Factory_Init();
    lib15EF4C78_gt_TechReactorswaptoAP_Starport_Init();
    lib15EF4C78_gt_NovaPsiStrike_Init();
    lib15EF4C78_gt_FuryofOneHeight_Init();
    lib15EF4C78_gt_FuryofOneReset_Init();
    lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Init();
    lib15EF4C78_gt_NM_HeroReviveNovaCooldownWait_Init();
    lib15EF4C78_gt_NM_HeroReviveVOReminder_Init();
    lib15EF4C78_gt_NM_HeroReviveNova_Init();
    lib15EF4C78_gt_NM_HeroReviveOnBehaviorExpiry_Init();
    lib15EF4C78_gt_Set5SecondsMark_Init();
    lib15EF4C78_gt_WarpRelocateFinish_Init();
    lib15EF4C78_gt_WarpRelocateAssimilatorFinish_Init();
    lib15EF4C78_gt_ZerglingRespawnInit_Init();
    lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnZerglingDeath_Init();
    lib15EF4C78_gt_ZerglingRespawnFindPrimaryOnMassRecallTarget_Init();
    lib15EF4C78_gt_ZerglingRespawnFindPrimaryWhenTimeElapsed_Init();
    lib15EF4C78_gt_KerriganPsiStrike_Init();
    lib15EF4C78_gt_KerriganEconDrop_Init();
    lib15EF4C78_gt_MothershipPurifierRefinedWeaponsMax_Init();
    lib15EF4C78_gt_MothershipPurifierBolsteredPlatingMax_Init();
    lib15EF4C78_gt_MothershipPurifierOptimizedEnergyUsageMax_Init();
    lib15EF4C78_gt_MothershipAiurRefinedWeaponsMax_Init();
    lib15EF4C78_gt_MothershipAiurBolsteredPlatingMax_Init();
    lib15EF4C78_gt_MothershipAiurOptimizedEnergyUsageMax_Init();
    lib15EF4C78_gt_MothershipTaldarimRefinedWeaponsMax_Init();
    lib15EF4C78_gt_MothershipTaldarimBolsteredPlatingMax_Init();
    lib15EF4C78_gt_MothershipTaldarimOptimizedEnergyUsageMax_Init();
    lib15EF4C78_gt_MothershipHangarRefill_Init();
    lib15EF4C78_gt_PM_SoAStatusWatch_Init();
    lib15EF4C78_gt_PM_SoAAutonomousStatusWatch_Init();
    lib15EF4C78_gt_PM_CinematicModeOn_Init();
    lib15EF4C78_gt_PM_CinematicModeOff_Init();
    lib15EF4C78_gt_SoAApplyGuardianShellPlayerResponse_Init();
    lib15EF4C78_gt_PM_SoATargetingForceOff_Init();
    lib15EF4C78_gt_PM_SoATargetingDeactivated_Init();
    lib15EF4C78_gt_PM_SoATargetingPointChosen_Init();
    lib15EF4C78_gt_PM_SoATargetingDirectionChosen_Init();
    lib15EF4C78_gt_PM_SoATargetingEffectFired_Init();
    lib15EF4C78_gt_PM_SoATargetingClearAll_Init();
    lib15EF4C78_gt_PM_SoATargetingCancel_Init();
    lib15EF4C78_gt_PM_SoATargetingCameraShake_Init();
    lib15EF4C78_gt_PM_SoAOrbitalStrikeActivated_Init();
    lib15EF4C78_gt_PM_SoAGravitonBombActivated_Init();
    lib15EF4C78_gt_PM_SoAThermalLanceActivated_Init();
    lib15EF4C78_gt_PM_SoATimeFreezeCast_Init();
    lib15EF4C78_gt_PM_SoATargetingPurifierBeamOn_Init();
    lib15EF4C78_gt_PM_SoATargetingPurifierBeamOff_Init();
    lib15EF4C78_gt_PM_SoAStrafeActivated_Init();
    lib15EF4C78_gt_PM_SoASuperShieldsActivated_Init();
    lib15EF4C78_gt_SoAWarpInReinforcementsRandomize_Init();
    lib15EF4C78_gt_PU_GPInit_Init();
    lib15EF4C78_gt_PU_GPVitalChanges_Init();
    lib15EF4C78_gt_PU_GPBirthFinished_Init();
    lib15EF4C78_gt_PU_GPDeathRemove2D_Init();
    lib15EF4C78_gt_PU_TargetingCancelButtonUsed_Init();
    lib15EF4C78_gt_ConfusionEndSuicide_Init();
    lib15EF4C78_gt_SupplicantWarpTrain_Init();
    lib15EF4C78_gt_SupplicantActualTrain_Init();
    lib15EF4C78_gt_SupplicantWarpFinish_Init();
    lib15EF4C78_gt_SupplicantWarpCancel_Init();
    lib15EF4C78_gt_SlayerInit_Init();
    lib15EF4C78_gt_CreepTumorBuild_Init();
    lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Init();
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Init();
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Init();
    lib15EF4C78_gt_AP_Player_MindControlRemoveLeash_Init();
    lib15EF4C78_gt_AP_Player_MindControlRemoveAi_Init();
    lib15EF4C78_gt_AP_Player_MindControlEmitEvent_Init();
    lib15EF4C78_gt_CU_HeroPanelUpdate_Init();
    lib15EF4C78_gt_CU_HeroUnitDamaged_Init();
    lib15EF4C78_gt_CU_HeroUnitVitalChange_Init();
    lib15EF4C78_gt_CU_HeroMouseHoverText_Init();
    lib15EF4C78_gt_ZS_HeroPanelUpdate_Init();
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Init();
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Init();
    lib15EF4C78_gt_ZS_MouseHoverText_Init();
    lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Init();
    lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Init();
    lib15EF4C78_gt_AP_Player_onKerriganRevived_Init();
    lib15EF4C78_gt_AP_Triggers_Kerrigan_HeroReviveOnBehaviorExpiry_Init();
    lib15EF4C78_gt_AP_Player_NightHawkResonatingFeedbackInterferenceEffect_Init();
    lib15EF4C78_gt_CM_Mengsk_WeaponPickupRegister_Init();
    lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperRegister_Init();
    lib15EF4C78_gt_CM_Mengsk_WeaponPickerUpperUnregister_Init();
    lib15EF4C78_gt_CM_Mengsk_WeaponPickup_Init();
    lib15EF4C78_gt_ShadowOpsNovaNukeArmed_Init();
    lib15EF4C78_gt_ShadowOpsNovaNukeUsed_Init();
    lib15EF4C78_gt_ShadowOpsMengskNukeArmed_Init();
    lib15EF4C78_gt_ShadowOpsMengskNukeUsed_Init();
    lib15EF4C78_gt_MedivacTankPickup_Init();
    lib15EF4C78_gt_MedivacTankDrop_Init();
    lib15EF4C78_gt_MedivacMercTankPickup_Init();
    lib15EF4C78_gt_MedivacMercTankDrop_Init();
    lib15EF4C78_gt_MedivacInfestedTankPickup_Init();
    lib15EF4C78_gt_MedivacInfestedTankDrop_Init();
    lib15EF4C78_gt_MedivacShockDivisionPickup_Init();
    lib15EF4C78_gt_MedivacShockDivisionDrop_Init();
    lib15EF4C78_gt_CM_Mengsk_VeterancyEarned_Init();
    lib15EF4C78_gt_CM_Mengsk_RegisterVeteranUnit_Init();
    lib15EF4C78_gt_CM_Mengsk_RemoveVeteranUnit_Init();
    lib15EF4C78_gt_CM_Mengsk_VeteranDing_Init();
    lib15EF4C78_gt_AP_Player_onPrideOfAugustgradLevelChange_Init();
    lib15EF4C78_gt_AP_Player_onATXUpgradeGiven_Init();
    lib15EF4C78_gt_AP_Player_onPrideOfAugustgradTrained_Init();
    lib15EF4C78_gt_AP_Player_initPreplacedPrideOfAugustrad_Init();
    lib15EF4C78_gt_AP_Player_onShockDivisionLevelChange_Init();
    lib15EF4C78_gt_AP_Player_onShockDivisionTransform_Init();
    lib15EF4C78_gt_AP_Player_onBulwarkCompanyLevelChange_Init();
    lib15EF4C78_gt_AP_Player_onNightHawkLevelChange_Init();
    lib15EF4C78_gt_AP_Player_onAdvancedLaserTechnologyUpgradeGiven_Init();
    lib15EF4C78_gt_AP_Player_onNightHawkTrained_Init();
    lib15EF4C78_gt_AP_Player_Merc_ArrayInit_Init();
    lib15EF4C78_gt_AP_Player_MercCompoundUpdateCounts_Init();
    lib15EF4C78_gt_AP_Player_MercCompoundOnMercUse_Init();
    lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetInfantry_Init();
    lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetVehicles_Init();
    lib15EF4C78_gt_AP_Player_Terran_MercCompoundTabSetStarships_Init();
    lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetBroodWar_Init();
    lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetSC2_Init();
    lib15EF4C78_gt_AP_Player_Zerg_MercCompoundTabSetInfested_Init();
    lib15EF4C78_gt_EmitTransformerLand_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_InitLib_completed = false;

void lib15EF4C78_InitLib () {
    if (lib15EF4C78_InitLib_completed) {
        return;
    }

    lib15EF4C78_InitLib_completed = true;

    lib15EF4C78_InitLibraries();
    lib15EF4C78_InitVariables();
    lib15EF4C78_InitCustomScript();
    lib15EF4C78_InitTriggers();
}

