include "TriggerLibs/NativeLib"
include "Lib5BD4895D"
include "Lib15EF4C78"

include "LibABFE498B_h"

//--------------------------------------------------------------------------------------------------
// Library: Archipelago Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libABFE498B_InitLibraries () {
    libNtve_InitVariables();
    lib5BD4895D_InitVariables();
    lib15EF4C78_InitVariables();
}

// Variable Initialization
bool libABFE498B_InitVariables_completed = false;

void libABFE498B_InitVariables () {
    if (libABFE498B_InitVariables_completed) {
        return;
    }

    libABFE498B_InitVariables_completed = true;

    libABFE498B_gv_aP_Triggers_isBuild = true;
    libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss = libABFE498B_gv_aP_Triggers_MapConfig_MISSION_NOT_PROTOSS;
    libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers = PlayerGroupSingle(1);
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: AP_Triggers_GalaxyIncludes
//--------------------------------------------------------------------------------------------------
include "AP_Triggers_PlayerConsumer"
include "AP_Triggers_Util"

void libABFE498B_InitCustomScript () {
}

// Functions
void libABFE498B_gf_AP_Triggers_MapConfig_setMissionBuild (bool lp_build) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_isBuild = lp_build;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setDifficultySetup (trigger lp_onCasual, trigger lp_onNormal, trigger lp_onHard, trigger lp_onBrutal) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_onDifficultyCasual = lp_onCasual;
    libABFE498B_gv_aP_Triggers_onDifficultyNormal = lp_onNormal;
    libABFE498B_gv_aP_Triggers_onDifficultyHard = lp_onHard;
    libABFE498B_gv_aP_Triggers_onDifficultyBrutal = lp_onBrutal;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setKerriganOptions (bool lp_kerriganPrimalInVanilla, bool lp_kerriganHandledByMap) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_PrimalInVanilla = lp_kerriganPrimalInVanilla;
    libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_HandledByMap = lp_kerriganHandledByMap;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setKerriganBonusLevels (int lp_kerriganBonusLevels) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_BonusLevels = lp_kerriganBonusLevels;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setMissionProtoss (int lp_protossValue) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss = lp_protossValue;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setSoAControllingPlayers (playergroup lp_soAPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers = lp_soAPlayers;
}

void libABFE498B_gf_AP_Triggers_setGameSpeed (string lp_gameSpeed) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_gameSpeed == "1")) {
        GameSetSpeedValue(c_gameSpeedSlower);
    }
    else if ((lp_gameSpeed == "2")) {
        GameSetSpeedValue(c_gameSpeedSlow);
    }
    else if ((lp_gameSpeed == "3")) {
        GameSetSpeedValue(c_gameSpeedNormal);
    }
    else if ((lp_gameSpeed == "4")) {
        GameSetSpeedValue(c_gameSpeedFast);
    }
    else if ((lp_gameSpeed == "5")) {
        GameSetSpeedValue(c_gameSpeedFaster);
    }
}

void libABFE498B_gf_AP_Triggers_setDifficulty (string lp_difficultyChar) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_difficulty;

    // Automatic Variable Declarations
    playergroup auto7AEE654A_g;

    // Variable Initialization
    lv_difficulty = 1;

    // Implementation
    if ((lp_difficultyChar == "C")) {
        GameSetSpeedValue(c_gameSpeedNormal);
        TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyCasual, true, false);
        lv_difficulty = 1;
    }
    else {
        if ((lp_difficultyChar == "N")) {
            GameSetSpeedValue(c_gameSpeedNormal);
            TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyNormal, true, false);
            lv_difficulty = 2;
        }
        else {
            if ((lp_difficultyChar == "H")) {
                GameSetSpeedValue(c_gameSpeedFast);
                TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyHard, true, false);
                lv_difficulty = 3;
            }
            else {
                if ((lp_difficultyChar == "B")) {
                    GameSetSpeedValue(c_gameSpeedFaster);
                    TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyBrutal, true, false);
                    lv_difficulty = 4;
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_ABFE498B_43BB9F5E") + StringToText(lp_difficultyChar)));
                }
            }
        }
    }
    auto7AEE654A_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto7AEE654A_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        PlayerSetDifficulty(lv_currentPlayer, lv_difficulty);
    }
    TriggerSendEvent(libABFE498B_gv_aP_Triggers_DIFFICULTY_SET_EVENT);
}

void libABFE498B_gf_AP_Triggers_setKerriganOptions (int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Option_KerriganPresence = ModI(lp_bitArrayValue, 4);
    libABFE498B_gv_aP_Triggers_Option_KerriganPrimalStatusByMap = (ModI((lp_bitArrayValue / 4), 2) == 1);
}

void libABFE498B_gf_AP_Triggers_setSoAOptions (int lp_bitArrayValue) {
    // Variable Declarations
    int lv_currentValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libABFE498B_gv_aP_Triggers_Option_SoAPresence = ModI(lp_bitArrayValue, 4);
    lv_currentValue = (lp_bitArrayValue / 4);
    libABFE498B_gv_aP_Triggers_Option_SoAPresenceNoBuild = (ModI(lv_currentValue, 2) == 1);
    lv_currentValue = (lp_bitArrayValue / 2);
    libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts = ModI(lv_currentValue, 4);
    lv_currentValue = (lp_bitArrayValue / 4);
    libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocastsNoBuild = (ModI(lv_currentValue, 2) == 1);
    TriggerExecute(libABFE498B_gt_AP_Triggers_InitSoA, true, false);
}

void libABFE498B_gf_AP_Triggers_unlockTerranUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMarine, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMedic, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebat, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauder, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockReaper, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHellion, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockVulture, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliath, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondback, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTank, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivac, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockWraith, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockViking, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockBanshee, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiser, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockGhost, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectre, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockThor, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberator, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrie, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMine, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockCyclone, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockRaven, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVessel, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockPredator, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockHercules, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory1 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerProjectileAccelerator, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerNeosteelBunker, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretTitaniumHousing, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretHellstormBatteries, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVAdvancedConstruction, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVDualFusionWelders, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerShrikeTurret, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerFortifiedBunker, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineLaserTargetingSystem, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineCombatShield, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdvancedMedicFacilities, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicStabilizerMedpacks, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatIncineratorGauntlets, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatJuggernautPlating, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderConcussiveShells, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderKineticFoam, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperU238Rounds, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperG4Clusterbomb, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldAccelerators, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldLaunchers, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineMagRailMunitions, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineOptimizedLogistics, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicRestoration, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicOpticalFlare, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicResourceEfficiency, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatResourceEfficiency, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderLaserTargetingSystem, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderMagRailMunitions, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderInternalTechModule, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVHostileEnvironmentAdaptation //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdaptiveMedpacks, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicNanoProjectors, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatInfernalPreIgniter, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatKineticFoam, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatNanoProjectors, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderJuggernautPlating, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperJetPackOverdrive, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionInfernalPlating, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoRepair, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathShapedHull, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathResourceEfficiency, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathInternalTechModule, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedHull, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankResourceEfficiency, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCloak, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCharge, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacScatterVeil, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperLaserTargetingSystem, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperAdvancedCloakingField, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperSpiderMines, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperCombatDrugs, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionHellbatAspect, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionSmartServos, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionOptimizedLogistics, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockHellbatJumpJets, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureIonThrusters, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoLaunchers, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineHighExplosiveMunition, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathJumpJets, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathOptimizedLogistics //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory3 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackHyperfluxor, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackBurstCapacitors, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackResourceEfficinecy, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankJumpJets, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSpiderMines, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSmartServos, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankGraduatingRange, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankLaserTargetingSystem, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankAdvancedSiegeTech, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankInternalTechModule, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorResourceEfficiency, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacExpandedHull, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAfterburners, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithAdvancedLaserTechnology, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingSmartServos, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingAntiMechanicalMunition, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionTwinLinkedFlamethrower, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionThermiteFilaments, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineCerberusMine, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathMultiLockWeaponsSystem, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathAresClassTargetingSystem, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackTriLithiumPowerCell, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackShapedHull, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedHull, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedBlast, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidDeploymentTube, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedHealingAI, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithDisplacementField, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingRipwaveMissiles, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingPhobosClassWeaponsSystem //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory4 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShockwaveMissileBattery, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserMissilePods, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostOcularImplants, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostCriusSuit, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectrePsionicLash, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreNyxClassCloakingModule, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockThor330mmBarrageCannon, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorAdvancedBallistics, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorRaidArtillery, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDrillingClaws, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineConcealment, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedCloakingField, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithTriggerOverride, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithInternalTechModule, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithResourceEfficiency, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingShredderRounds, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingWILDMissiles, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShapedHull, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeAdvancedTargetingOptics, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeDistortionBlasters, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeRocketBarrage, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostResourceEfficiency, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreResourceEfficiency, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockThorButtonWithASkullOnIt, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockThorLaserTargetingSystems, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockThorLargeScaleFieldConstruction, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenResourceEfficiency, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenDurableMaterials, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselImprovedNanoRepair, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselAdvancedAISystems //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory5 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneResourceEfficiency, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeHyperflightRotors, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeLaserTargetingSystem, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeInternalTechModule, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserTacticalJump, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCloak, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserATXLaserBattery, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserOptimizedLogistics, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserInternalTechModule, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostEMPRounds, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostLockdown, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreImpalerRounds, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenBioMechanicalRepairDrone, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenSpiderMines, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenRailgunTurret, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenHunterSeekerWeapon, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenInterferenceMatrix, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenAntiArmorMissile, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenInternalTechModule, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselEMPShockwave, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselDefensiveMatrix, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneTargetingOptics, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneRapidFireLaunchers, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCloak, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorLaserTargetingSystem, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorOptimizedLogistics, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineBlackMarketLaunchers, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineExecutionerMissiles, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieEnhancedCluserLaunchers, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieShapedHull //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory6 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieBurstLasers, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieAfterburners, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneInternalTechModule, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSmartServos, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorResourceEfficiency, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHerculesInternalFusionModule, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockHerculesTacticalJump, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressAdvancedTargeting, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranLaboratory (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockUltraCapacitors, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockVanadiumPlating, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalDepots, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMicroFiletring, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockAutomatedRefinery, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterReactor, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockTechReactor, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalStrike, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockCellularReactor, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockStructureArmor, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockHiSecAutoTracking, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockAdvancedOptics, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockRogueForces, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranMercenaries (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockWarPigs, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockDevilDogs, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockHammerSecurities, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockSpartanCompany, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeBreakers, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHelsAngel, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockDuskWings, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockJacksonsRevenge, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockSkibisAngel, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockDeathHead, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockWingedNightmare, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockRaidLiberator, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockBrynhild, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockJotun, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranBuildings (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBunker, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurret, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockSensorTower, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterPlanetaryFortress, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockPerditionTurret, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHiveMindEmulator, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockPsiDisrupter, // 6
        ap_triggers_PlayerConsumer_sig, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockInfantryWeapon, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockInfantryArmor, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockVehicleWeapon, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockVehicleArmor, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockShipWeapon, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockShipArmor, // 5
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 7
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 9
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 11
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 13
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 14
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranProgressiveUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineProgressiveStimpack, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeProgressiveCrossSpectrumDampeners, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveRegenerativeBioSteel, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatProgressiveStimpack, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderProgressiveStimpack, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperProgressiveStimpack, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockHellbatProgressiveStimpack, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveHighImpactPayload, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureProgressiveReplenishableMagazine, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithProgressiveTomahawkPowerCells, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserProgressiveDefensiveMatrix, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveImmortalityProtocol, // 22
        libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveFireSuppresionSystem, // 24
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterProgressiveOrbitalCommand, // 26
        libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressProgressiveAugumentedThrusters // 28
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockZergling, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmQueen, // 1
        libABFE498B_gf_AP_Triggers_Zerg_unlockRoach, // 2
        libABFE498B_gf_AP_Triggers_Zerg_unlockHydralisk, // 3
        libABFE498B_gf_AP_Triggers_Zerg_unlockBaneling, // 4
        libABFE498B_gf_AP_Triggers_Zerg_unlockAberration, // 5
        libABFE498B_gf_AP_Triggers_Zerg_unlockMutalisk, // 6
        libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmHost, // 7
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestor, // 8
        libABFE498B_gf_AP_Triggers_Zerg_unlockUltralisk, // 9
        libABFE498B_gf_AP_Triggers_Zerg_unlockSporeCrawler, // 10
        libABFE498B_gf_AP_Triggers_Zerg_unlockSpineCrawler, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockMeleeAttacks, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockMissileAttacks, // 1
        libABFE498B_gf_AP_Triggers_Zerg_unlockGroundCarapace, // 2
        libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerAttacks, // 3
        libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerCarapace, // 4
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 5
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 7
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 9
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 11
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 13
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 14
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMutation (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingHardenedCarapace, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingAdrenalOverload, // 1
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingMetabolicBoost, // 2
        libABFE498B_gf_AP_Triggers_Zerg_RoachHydrioticBile, // 3
        libABFE498B_gf_AP_Triggers_Zerg_RoachAdaptivePlating, // 4
        libABFE498B_gf_AP_Triggers_Zerg_RoachTunnelingClaws, // 5
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskFrenzy, // 6
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskAncillaryCarapace, // 7
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskGroovedSpines, // 8
        libABFE498B_gf_AP_Triggers_Zerg_BanelingCorrosiveAcid, // 9
        libABFE498B_gf_AP_Triggers_Zerg_BanelingRupture, // 10
        libABFE498B_gf_AP_Triggers_Zerg_BanelingRegenerativeAcid, // 11
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskViciousGlave, // 12
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskRapidRegeneration, // 13
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskSunderingGlave, // 14
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostBurrow, // 15
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostRapidIncubation, // 16
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostPressurizedGlands, // 17
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskBurrowCharge, // 18
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskTissueAnimation, // 19
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskMonarchBlades, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergStrain (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingRaptor, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingSwarmling, // 1
        libABFE498B_gf_AP_Triggers_Zerg_RoachVile, // 2
        libABFE498B_gf_AP_Triggers_Zerg_RoachCorpser, // 3
        libABFE498B_gf_AP_Triggers_Zerg_unlockImpaler, // 4
        libABFE498B_gf_AP_Triggers_Zerg_unlockLurker, // 5
        libABFE498B_gf_AP_Triggers_Zerg_BanelingSplitter, // 6
        libABFE498B_gf_AP_Triggers_Zerg_BanelingHunter, // 7
        libABFE498B_gf_AP_Triggers_Zerg_unlockBroodLord, // 8
        libABFE498B_gf_AP_Triggers_Zerg_unlockViper, // 9
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCarrion, // 10
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCreeper, // 11
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskNoxious, // 12
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskTorrasque, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergKerriganAbilities (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_KerriganKinteticBlast, // 0
        libABFE498B_gf_AP_Triggers_Zerg_KerriganHeroicFortitude, // 1
        libABFE498B_gf_AP_Triggers_Zerg_KerriganLeapingStrike, // 2
        libABFE498B_gf_AP_Triggers_Zerg_KerriganCrushingGrip, // 3
        libABFE498B_gf_AP_Triggers_Zerg_KerriganChainReaction, // 4
        libABFE498B_gf_AP_Triggers_Zerg_KerriganPsionicShift, // 5
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingReconstitution, // 6
        libABFE498B_gf_AP_Triggers_Zerg_OverlordImprovedOverlord, // 7
        libABFE498B_gf_AP_Triggers_Zerg_AutomatedExtractor, // 8
        libABFE498B_gf_AP_Triggers_Zerg_KerriganWildMutation, // 9
        libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnBanelings, // 10
        libABFE498B_gf_AP_Triggers_Zerg_KerriganMend, // 11
        libABFE498B_gf_AP_Triggers_Zerg_TwinDrones, // 12
        libABFE498B_gf_AP_Triggers_Zerg_MalignantCreep, // 13
        libABFE498B_gf_AP_Triggers_Zerg_VespeneEfficiency, // 14
        libABFE498B_gf_AP_Triggers_Zerg_KerriganInfestBroodlings, // 15
        libABFE498B_gf_AP_Triggers_Zerg_KerriganFury, // 16
        libABFE498B_gf_AP_Triggers_Zerg_KerriganAbilityEfficiency, // 17
        libABFE498B_gf_AP_Triggers_Zerg_KerriganApocalypse, // 18
        libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnLeviathan, // 19
        libABFE498B_gf_AP_Triggers_Zerg_KerriganDropPods, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMercenaries (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMedic, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSiegeTank, // 1
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBanshee, // 2
        ap_triggers_PlayerConsumer_sig, // 3
        ap_triggers_PlayerConsumer_sig, // 4
        ap_triggers_PlayerConsumer_sig, // 5
        ap_triggers_PlayerConsumer_sig, // 6
        ap_triggers_PlayerConsumer_sig, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockAiurZealot, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerShakuras, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarAiur, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarShakuras, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalAiur, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockColossusPurifier, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixAiur, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayShakuras, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierAiur, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockObserver, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockCenturion, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentinel, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicant, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockInstigator, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockSlayer, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryAiur, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizer, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockHavoc, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockSignifier, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockAscendant, // 19
        libABFE498B_gf_AP_Triggers_Protoss_unlockAvenger, // 20
        libABFE498B_gf_AP_Triggers_Protoss_unlockBloodHunter, // 21
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoon, //22
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchon, //23
        libABFE498B_gf_AP_Triggers_Protoss_unlockAdept, //24
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrism, //25
        libABFE498B_gf_AP_Triggers_Protoss_unlockAnnihilator, //26
        libABFE498B_gf_AP_Triggers_Protoss_unlockVanguard, //27
        libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalker, //28
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaver //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossUnits2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptor, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockMirage, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsair, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyer, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockScout, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempest, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockTaldarimMothership, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiter, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockOracle, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossBuildings (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhotonCannon, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockKhaydarinMonolith, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockShieldBattery, // 2
        ap_triggers_PlayerConsumer_sig, // 3
        ap_triggers_PlayerConsumer_sig, // 4
        ap_triggers_PlayerConsumer_sig, // 5
        ap_triggers_PlayerConsumer_sig, // 6
        ap_triggers_PlayerConsumer_sig, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossProgressiveUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockProgressiveProxyPylon, // 0
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 2
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 4
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 14
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 16
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 18
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 22
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 24
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 26
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 28
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossSpearOfAdun (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockChronoSurge, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockPylonOvercharge, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalStrike, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockTemporalField, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockSolarLance, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockMassRecall, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockShieldOvercharge, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockDeployFenix, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockPurifierBeam, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockTimeStop, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockSolarBombardment, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossForge (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockMatrixOverload, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockQuatro, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockNexusOvercharge, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalAssimilators, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpHarmonization, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockGuardianShell, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockReconstructionBeam, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockOverwatch, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockSuperiorWarpGates, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockGroundWeapons, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockGroundArmor, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockShields, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockAirWeapons, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockAirArmor, // 4
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 5
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 7
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 9
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 11
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 13
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 14
    );
}

bool libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock () {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_isBuild == true)) {
        if (((libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 2) || (libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 3))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if (((libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 1) || (libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 3))) {
            return true;
        }
        else {
            return false;
        }
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Marine", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedic (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasMedic[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasAdvancedMedicFacilities[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Medic", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Firebat", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasMarauder[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleMarauder", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Marauder", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Reaper", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Hellion", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVulture (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Vulture", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondback (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Diamondback", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasGoliath[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleGoliath", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Goliath", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasSiegeTank[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleSiegeTank", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_SiegeTank", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivac (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Medivac", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraith (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasWraith[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleWraith", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Wraith", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockViking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_VikingFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBanshee (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasBanshee[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleBanshee", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Banshee", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasBattlecruiser[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleBattlecruiser", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    TechTreeUnitAllow(lp_player, "AP_Battlecruiser", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_Ghost", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectre (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_Spectre", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Armory", true);
    TechTreeUnitAllow(lp_player, "AP_Thor", true);
    TechTreeUnitAllow(lp_player, "AP_ThorBuild", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRaven (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasRaven[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleRaven", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Raven", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVessel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_ScienceVessel", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Predator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHercules (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalFusionModuleHercules", c_techCountCompleteOnly) == 0)) {
        TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    }

    TechTreeUnitAllow(lp_player, "AP_Hercules", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Liberator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrie (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_ValkyrieSCBW", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_WidowMine", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCyclone (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasCyclone[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleCyclone", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Cyclone", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWarPigs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_WarPig", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevilDogs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DevilDog", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHammerSecurities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_HammerSecurity", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpartanCompany (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_SpartanCompany", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeBreakers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_SiegeBreaker", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHelsAngel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_HelsAngelFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDuskWings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DuskWing", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockJacksonsRevenge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DukesRevenge", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSkibisAngel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercMedic", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDeathHead (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercReaper", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWingedNightmare (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercWraith", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRaidLiberator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercLiberator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBrynhild (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_BrynhildFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockJotun (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercThor", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Bunker", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_MissileTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSensorTower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_SensorTower", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPerditionTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_PerditionTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPsiDisrupter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_PsiDisruptor", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHiveMindEmulator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_HiveMindEmulator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVAdvancedConstruction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedConstruction", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVDualFusionWelders (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DualFusionWelders", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVHostileEnvironmentAdaptation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HostileEnvironmentAdaptation", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineCombatShield (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CombatShield", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarineStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackMarine", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineMagRailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdvancedMedicFacilities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedMedicTraining", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasAdvancedMedicFacilities[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasMedic[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicStabilizerMedpacks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StabilizerMedPacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicRestoration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedicSCBWRestorationResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicOpticalFlare (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedicSCBWOpticFlareResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsMedic", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdaptiveMedpacks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdaptiveMedPacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicNanoProjectors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorMedicRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatIncineratorGauntlets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BearclawNozzles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatJuggernautPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatJuggernautPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackFirebat", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsFirebat", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatInfernalPreIgniter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatInfernalPreIgniter", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatNanoProjectors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorFirebatRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderConcussiveShells (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_JackhammerConcussionGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarauderLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarauderStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackMarauder", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemMarauder", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderMagRailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsMarauder", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleMarauder", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasMarauder[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderJuggernautPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_JuggernautPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperU238Rounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperU238Rounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperG4Clusterbomb (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ClusterBomb", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackReaper", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperAdvancedCloakingField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperCombatDrugs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CombatDrugs", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperJetPackOverdrive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHReaperFlight", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionTwinLinkedFlamethrower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TwinLinkedFlameThrowers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionThermiteFilaments (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellionCampaignInfernalPreIgniter", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionHellbatAspect (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatAspect", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosHellion", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildHellion", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellbatJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HoverHellbat", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TurboChargedEngines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellbatProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackHellbat", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionInfernalPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatHellArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureProgressiveReplenishableMagazine (int lp_player, int lp_level) {
    // Variable Declarations
    unit lv_unit;
    int lv_upgradeLevels;

    // Automatic Variable Declarations
    unitgroup auto1005B686_g;
    int auto1005B686_u;

    // Variable Initialization

    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NanoConstructor", 1);
        if ((lp_level >= 2)) {
            lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_ReplenishSpiderMineFree", c_techCountQueuedOrBetter);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReplenishSpiderMineFree", 1);
            if ((lv_upgradeLevels == 0)) {
                auto1005B686_g = UnitGroup("AP_Vulture", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto1005B686_u = UnitGroupCount(auto1005B686_g, c_unitCountAll);
                for (;; auto1005B686_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto1005B686_g, auto1005B686_u);
                    if (lv_unit == null) { break; }
                    UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("AP_MakeVultureSpiderMines", 0), true), c_orderQueueAddToFront);
                }
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureIonThrusters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VultureIonThrusters", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VultureAutoLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoRepair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VultureAutoRepair", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineCerberusMine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CerberusMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineHighExplosiveMunition (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SpiderMineDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathMultiLockWeaponsSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultilockTargetingSystems", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathAresClassTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AresClassWeaponsSystem", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_SwannCommanderVehicleWeaponRange", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BrynhildRangeDoubleUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GoliathJumpJet", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildGoliath", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GoliathShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyGoliath", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleGoliath", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasGoliath[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackTriLithiumPowerCell (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TriLithiumPowerCells", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackHyperfluxor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_Hyperfluxor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackBurstCapacitors (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoDFE61BDD_g;
    int autoDFE61BDD_u;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BurstCapacitors", 1);
    autoDFE61BDD_g = UnitGroup("AP_Diamondback", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFE61BDD_u = UnitGroupCount(autoDFE61BDD_g, c_unitCountAll);
    for (;; autoDFE61BDD_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoDFE61BDD_g, autoDFE61BDD_u);
        if (lv_currentUnit == null) { break; }
        UnitBehaviorAdd(lv_currentUnit, "AP_BurstCapacitorsDamageBuff", lv_currentUnit, 1);
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackResourceEfficinecy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsDiamondback", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankMaelstromRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MaelstromRounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedBlast (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankShapedBlast", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HoverSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankGraduatingRange (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_siegedTanks;

    // Automatic Variable Declarations
    unitgroup autoA89E46A4_g;
    int autoA89E46A4_u;

    // Variable Initialization
    lv_siegedTanks = UnitGroupEmpty();

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankSiegeModeProgressiveRangeIncease", 1);
    lv_siegedTanks = UnitGroup("AP_SiegeTankSieged", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_siegedTanks, UnitGroup("AP_SiegeBreakerSieged", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoA89E46A4_g = lv_siegedTanks;
    autoA89E46A4_u = UnitGroupCount(autoA89E46A4_g, c_unitCountAll);
    for (;; autoA89E46A4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA89E46A4_g, autoA89E46A4_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(EventUnit(), "AP_SiegeTankSiegeModeProgressiveRangeIncease") == false)) {
            UnitBehaviorAdd(lv_unit, "AP_SiegeTankSiegeModeProgressiveRangeIncease", lv_unit, 1);
        }

    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankAdvancedSiegeTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorImprovedSiegeMode", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleSiegeTank", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasSiegeTank[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencySiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsPredator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCloak (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoA2DC915D_g;
    int autoA2DC915D_u;
    unitgroup auto458755E3_g;
    int auto458755E3_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyPredator", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyPredator", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsPredator", 1);
        if ((lv_upgradeLevels == 0)) {
            auto458755E3_g = UnitGroup("AP_Predator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto458755E3_u = UnitGroupCount(auto458755E3_g, c_unitCountAll);
            for (;; auto458755E3_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto458755E3_g, auto458755E3_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 150.0);
            }
        }

    }
    else {
        if ((lv_upgradeLevels == 0)) {
            autoA2DC915D_g = UnitGroup("AP_Predator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA2DC915D_u = UnitGroupCount(autoA2DC915D_g, c_unitCountAll);
            for (;; autoA2DC915D_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoA2DC915D_g, autoA2DC915D_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
        }

    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PredatorCharge", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidDeploymentTube (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacRapidDeployment", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedHealingAI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedHealingAI", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacExpandedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ExpandedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAfterburners (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacScatterVeil (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacShield", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedCloakingField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacPermanentCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithProgressiveTomahawkPowerCells (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DynamicPowerRouting", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakWraith", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithDisplacementField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakDistortionField", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithAdvancedLaserTechnology (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WraithAdvancedLaserTechnology", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithTriggerOverride (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWraithFury", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleWraith", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasWraith[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyWraith", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingRipwaveMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HALORockets", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingPhobosClassWeaponsSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AresClassWeaponsSystemViking", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_SwannCommanderVehicleWeaponRange", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingRangeDoubleUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosViking", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingAntiMechanicalMunition (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingMagWeapon", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingShredderRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHVikingPiercingAttacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingWILDMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHVikingRockets", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShockwaveMissileBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ClusterWarheads", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeProgressiveCrossSpectrumDampeners (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CrossSpectrumDampeners", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakBanshee", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeHyperflightRotors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemBanshee", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleBanshee", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasBanshee[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeAdvancedTargetingOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeAdvancedOptics", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeDistortionBlasters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DistortionBlasters", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeRocketBarrage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeAirstrike", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserMissilePods (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HurricaneMissiles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserProgressiveDefensiveMatrix (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefensiveMatrix", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserAdvancedDefensiveMatrix", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserTacticalJump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TacticalJump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCloak (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserATXLaserBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedWeaponryBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleBattlecruiser", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasBattlecruiser[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostOcularImplants (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OcularImplants", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostCriusSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakGhost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostEMPRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_EMP", 0), true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostLockdown (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GhostSCBWLockdownResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyGhost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectrePsionicLash (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltrasonicPulse", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreNyxClassCloakingModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakSpectre", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreImpalerRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImpalerRounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencySpectre", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThor330mmBarrageCannon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_330mmBarrageCannons", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveImmortalityProtocol (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MechanicalRebirth", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorImmortalityFree", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveHighImpactPayload (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorMorph", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosThor", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorButtonWithASkullOnIt (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorNuke", 1);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorLaserTargetingSystems (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemThor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorLargeScaleFieldConstruction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BuildThorBySCV", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenBioMechanicalRepairDrone (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenBioMechanicalRepairDrone", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenRailgunTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenHunterSeekerWeapon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedWeaponryRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenInterferenceMatrix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenInterferenceMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenAntiArmorMissile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenAntiArmorMissile", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenDurableMaterials (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DurableMaterials", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselEMPShockwave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselSCBWEMPShockwaveResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselDefensiveMatrix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselDefensiveMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselImprovedNanoRepair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselFreeRepair", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselAdvancedAISystems (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselResearchAdditionalNano", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldAccelerators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneLockOnDamageUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagFieldLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneTargetingOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneLockOnRangeUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneRapidFireLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneRapidFireLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyCyclone", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleCyclone", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasCyclone[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorAdvancedBallistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorAGRangeUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorRaidArtillery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorSiegeProtocol", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCloak (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto3751A573_g;
    int auto3751A573_u;
    unitgroup autoDDCE3E73_g;
    int autoDDCE3E73_u;
    unitgroup auto71AE7102_g;
    int auto71AE7102_u;
    unitgroup auto605CC692_g;
    int auto605CC692_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyLiberator", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyLiberator", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsLiberator", 1);
        if ((lv_upgradeLevels == 0)) {
            auto71AE7102_g = UnitGroup("AP_Liberator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto71AE7102_u = UnitGroupCount(auto71AE7102_g, c_unitCountAll);
            for (;; auto71AE7102_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto71AE7102_g, auto71AE7102_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 150.0);
            }
            auto605CC692_g = UnitGroup("AP_LiberatorAG", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto605CC692_u = UnitGroupCount(auto605CC692_g, c_unitCountAll);
            for (;; auto605CC692_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto605CC692_g, auto605CC692_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 150.0);
            }
        }

    }
    else {
        if ((lv_upgradeLevels == 0)) {
            auto3751A573_g = UnitGroup("AP_Liberator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3751A573_u = UnitGroupCount(auto3751A573_g, c_unitCountAll);
            for (;; auto3751A573_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto3751A573_g, auto3751A573_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
            autoDDCE3E73_g = UnitGroup("AP_LiberatorAG", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDDCE3E73_u = UnitGroupCount(autoDDCE3E73_g, c_unitCountAll);
            for (;; autoDDCE3E73_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoDDCE3E73_g, autoDDCE3E73_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
        }

    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDrillingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DrillClaws", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineConcealment (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImprovedConcealment", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineBlackMarketLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWidowMineBurrowedRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineExecutionerMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWidowMineDeathBlossom", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieEnhancedCluserLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieEnhancedClusterLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieBurstLasers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieBurstLasers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieAfterburners (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHerculesInternalFusionModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalFusionModuleHercules", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHerculesTacticalJump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HerculesHyperjump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerProjectileAccelerator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProjectileAccelerators", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerNeosteelBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelFrame", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerShrikeTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShrikeTurret", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasShrikeTurret[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasFortifiedBunker[lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerFortifiedBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FortifiedBunkerCarapace", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasFortifiedBunker[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasShrikeTurret[lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretTitaniumHousing (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReinforcedSuperstructure", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretHellstormBatteries (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HailstormMissilePods", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterProgressiveOrbitalCommand (int lp_player, int lp_level) {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_upgradeLevels;
    int lv_upgradeLevelsPlanetary;

    // Automatic Variable Declarations
    unitgroup autoB50AEE22_g;
    int autoB50AEE22_u;
    unitgroup auto34307B28_g;
    int auto34307B28_u;
    unitgroup autoD643115F_g;
    int autoD643115F_u;
    unitgroup autoF6654E11_g;
    int autoF6654E11_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_OrbitalRelay", c_techCountQueuedOrBetter);
    lv_upgradeLevelsPlanetary = TechTreeUpgradeCount(lp_player, "AP_OrbitalRelayPlanetary", c_techCountQueuedOrBetter);
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalRelay", 1);
        if ((lv_upgradeLevels == 0)) {
            autoB50AEE22_g = UnitGroup("AP_CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB50AEE22_u = UnitGroupCount(autoB50AEE22_g, c_unitCountAll);
            for (;; autoB50AEE22_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoB50AEE22_g, autoB50AEE22_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
            auto34307B28_g = UnitGroup("AP_CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto34307B28_u = UnitGroupCount(auto34307B28_g, c_unitCountAll);
            for (;; auto34307B28_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto34307B28_g, auto34307B28_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
        }

        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalRelayPlanetary", 1);
            if ((lv_upgradeLevelsPlanetary == 0)) {
                autoD643115F_g = UnitGroup("AP_PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoD643115F_u = UnitGroupCount(autoD643115F_g, c_unitCountAll);
                for (;; autoD643115F_u -= 1) {
                    lv_currentUnit = UnitGroupUnitFromEnd(autoD643115F_g, autoD643115F_u);
                    if (lv_currentUnit == null) { break; }
                    UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
                }
                autoF6654E11_g = UnitGroup("AP_PlanetaryFortressFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF6654E11_u = UnitGroupCount(autoF6654E11_g, c_unitCountAll);
                for (;; autoF6654E11_u -= 1) {
                    lv_currentUnit = UnitGroupUnitFromEnd(autoF6654E11_g, autoF6654E11_u);
                    if (lv_currentUnit == null) { break; }
                    UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
                }
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CommandCenterReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterPlanetaryFortress (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToPlanetaryFortress", 0), true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressProgressiveAugumentedThrusters (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressLiftOff", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressWeapon", 1);
            if ((TechTreeUpgradeCount(lp_player, "AP_PlanetaryFortressAirAttack", c_techCountCompleteOnly) >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressAirAttackFlying", 1);
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressAdvancedTargeting (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressAirAttack", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_PlanetaryFortressWeapon", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressAirAttackFlying", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockInfantryArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranInfantryArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockInfantryWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranInfantryWeaponLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVehicleArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Factory", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranVehicleArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVehicleWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Factory", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranVehicleArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShipArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Starport", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranShipArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShipWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Starport", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranShipWeaponLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveFireSuppresionSystem (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FireSuppressionSystems", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FireSuppressionSystemsUpgraded", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockUltraCapacitors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltraCapacitors", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] = true;
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel1", "AP_TerranInfantryWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel2", "AP_TerranInfantryWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel3", "AP_TerranInfantryWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel1", "AP_TerranVehicleWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel2", "AP_TerranVehicleWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel3", "AP_TerranVehicleWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel1", "AP_TerranShipWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel2", "AP_TerranShipWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel3", "AP_TerranShipWeaponsUltraCapacitorsLevel3");
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVanadiumPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VanadiumPlating", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] = true;
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel1", "AP_TerranInfantryArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel2", "AP_TerranInfantryArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel3", "AP_TerranInfantryArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel1", "AP_TerranVehicleArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel2", "AP_TerranVehicleArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel3", "AP_TerranVehicleArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel1", "AP_TerranShipArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel2", "AP_TerranShipArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel3", "AP_TerranShipArmorsVanadiumPlatingLevel3");
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalDepots (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SupplyDepotDrop", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMicroFiletring (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MicroFiltering", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockAutomatedRefinery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AutoHarvester", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockTechReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TechReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCellularReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactors", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyLiberator", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsLiberator", 1);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyPredator", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsPredator", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveRegenerativeBioSteel (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteel", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteelLevel2", 1);
            if ((lp_level >= 3)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteelLevel3", 1);
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockStructureArmor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranBuildingArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHiSecAutoTracking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HiSecAutoTracking", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockAdvancedOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SwannCommanderVehicleWeaponRange", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_AresClassWeaponsSystemViking", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingRangeDoubleUpgrade", 1);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_AresClassWeaponsSystem", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BrynhildRangeDoubleUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockRogueForces (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RogueForces", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGhostVisor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetGhostVisor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaRangefinderOculus (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetRangefinderOculus", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaDomination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetDominationVisor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaProgressiveCloak (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaCloak", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorStealthSuit", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaBlink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorBlinkSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaApolloSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorApolloInfantrySuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaArmoredSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmoredSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaJumpSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorJumpSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponC20ACanisterRifle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponCanisterRifle", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponHellfireShotgun (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponHellfireShotgun", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponPlasmaRifle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponPlasmaRifle", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponMonomolecularBlade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponPsiBlade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponBlazefireBlade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponBlazefireBlade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetStimInfusion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackNova", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetPulseGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetPulseGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetFlashbangGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetFlashBangGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetIonicForceField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetPersonalDefensiveMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetHoloDecoy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetHolographicDecoy", 1);
}

void libABFE498B_gf_AP_Triggers_clearTerranTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Marine", false);
    TechTreeUnitAllow(lp_player, "AP_Medic", false);
    TechTreeUnitAllow(lp_player, "AP_Firebat", false);
    TechTreeUnitAllow(lp_player, "AP_Marauder", false);
    TechTreeUnitAllow(lp_player, "AP_Reaper", false);
    TechTreeUnitAllow(lp_player, "AP_Hellion", false);
    TechTreeUnitAllow(lp_player, "AP_Vulture", false);
    TechTreeUnitAllow(lp_player, "AP_Goliath", false);
    TechTreeUnitAllow(lp_player, "AP_Diamondback", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeTank", false);
    TechTreeUnitAllow(lp_player, "AP_Medivac", false);
    TechTreeUnitAllow(lp_player, "AP_Wraith", false);
    TechTreeUnitAllow(lp_player, "AP_VikingFighter", false);
    TechTreeUnitAllow(lp_player, "AP_Banshee", false);
    TechTreeUnitAllow(lp_player, "AP_Battlecruiser", false);
    TechTreeUnitAllow(lp_player, "AP_Ghost", false);
    TechTreeUnitAllow(lp_player, "AP_Spectre", false);
    TechTreeUnitAllow(lp_player, "AP_Thor", false);
    TechTreeUnitAllow(lp_player, "AP_ThorBuild", false);
    TechTreeUnitAllow(lp_player, "AP_Raven", false);
    TechTreeUnitAllow(lp_player, "AP_ScienceVessel", false);
    TechTreeUnitAllow(lp_player, "AP_Predator", false);
    TechTreeUnitAllow(lp_player, "AP_Hercules", false);
    TechTreeUnitAllow(lp_player, "AP_Liberator", false);
    TechTreeUnitAllow(lp_player, "AP_ValkyrieSCBW", false);
    TechTreeUnitAllow(lp_player, "AP_WidowMine", false);
    TechTreeUnitAllow(lp_player, "AP_Cyclone", false);
    TechTreeUnitAllow(lp_player, "AP_WarPig", false);
    TechTreeUnitAllow(lp_player, "AP_DevilDog", false);
    TechTreeUnitAllow(lp_player, "AP_HammerSecurity", false);
    TechTreeUnitAllow(lp_player, "AP_SpartanCompany", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeBreaker", false);
    TechTreeUnitAllow(lp_player, "AP_HelsAngelFighter", false);
    TechTreeUnitAllow(lp_player, "AP_DuskWing", false);
    TechTreeUnitAllow(lp_player, "AP_DukesRevenge", false);
    TechTreeUnitAllow(lp_player, "AP_MercMedic", false);
    TechTreeUnitAllow(lp_player, "AP_MercReaper", false);
    TechTreeUnitAllow(lp_player, "AP_MercWraith", false);
    TechTreeUnitAllow(lp_player, "AP_MercLiberator", false);
    TechTreeUnitAllow(lp_player, "AP_BrynhildFighter", false);
    TechTreeUnitAllow(lp_player, "AP_MercThor", false);
    TechTreeUnitAllow(lp_player, "AP_Barracks", false);
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", false);
    TechTreeUnitAllow(lp_player, "AP_PerditionTurret", false);
    TechTreeUnitAllow(lp_player, "AP_PsiDisruptor", false);
    TechTreeUnitAllow(lp_player, "AP_Bunker", false);
    TechTreeUnitAllow(lp_player, "AP_MissileTurret", false);
    TechTreeUnitAllow(lp_player, "AP_SensorTower", false);
    TechTreeUnitAllow(lp_player, "AP_HiveMindEmulator", false);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", false);
    TechTreeUnitAllow(lp_player, "AP_MercCompound", false);
    TechTreeUnitAllow(lp_player, "AP_Factory", false);
    TechTreeUnitAllow(lp_player, "AP_Armory", false);
    TechTreeUnitAllow(lp_player, "AP_Starport", false);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", false);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", false);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_EMP", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToPlanetaryFortress", 0), false);
}

void libABFE498B_gf_AP_Triggers_giveTerranDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WraithCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaBaseSuitEnhancements", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_setKerriganPrimal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganPostZerusSounds", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganInfestedCosmetic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganPostZerus", 1);
    lib5BD4895D_gf_AP_Core_SwitchKerriganSwarmToPrimalZerg();
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockZergling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_Zergling", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmQueen (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_Queen", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockRoach (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_RoachWarren", true);
    TechTreeUnitAllow(lp_player, "AP_Roach", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockHydralisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", true);
    TechTreeUnitAllow(lp_player, "AP_Hydralisk", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockAberration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveAberration", 1);
    TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
    TechTreeUnitAllow(lp_player, "AP_InfestedAbomination", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMutalisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    TechTreeUnitAllow(lp_player, "AP_Mutalisk", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmHost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHost", 1);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", true);
    TechTreeUnitAllow(lp_player, "AP_SwarmHost", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveInfestor", 1);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", true);
    TechTreeUnitAllow(lp_player, "AP_Infestor", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockUltralisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_UltraliskCavern", true);
    TechTreeUnitAllow(lp_player, "AP_Ultralisk", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMedic (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_InfestedMedic", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSiegeTank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_InfestedSiegeTank", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBanshee (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_InfestedBanshee", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSpineCrawler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_SpineCrawler", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSporeCrawler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
    TechTreeUnitAllow(lp_player, "AP_SporeCrawler", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingHardenedCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSZerglingHealth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingAdrenalOverload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSZerglingFrenzy", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingMetabolicBoost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMetabolicBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingRaptor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveRaptor", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveSwarmling", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveRaptorSwarmling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingSwarmling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmling", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveRaptor", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveRaptorSwarmling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingReconstitution (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5ZerglingRespawn", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachHydrioticBile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRoachDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachAdaptivePlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRoachShield", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachTunnelingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSTunnelingClaws", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachVile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachVile", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_RoachCorpser", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachVileCorpser", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_RoachCorpser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachCorpser", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_RoachVile", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachVileCorpser", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskFrenzy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHydraliskFrenzy", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskAncillaryCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHydraliskHealth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskGroovedSpines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSGroovedSpines", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingCorrosiveAcid (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSBanelingCorrosiveBile", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingRupture (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRupture", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingRegenerativeAcid (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSBanelingHeal", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingSplitter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSSplitter", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHunter", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHunterSplitter", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingHunter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHunter", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSSplitter", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHunterSplitter", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskViciousGlave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSViciousGlaive", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskRapidRegeneration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRapidRegeneration", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskSunderingGlave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSExplosiveGlaive", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostBurrow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSBurrowSwarmHost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostRapidIncubation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRapidIncubation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostPressurizedGlands (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSPressurizedGlands", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCarrion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitA", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveSwarmHostSplitB", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitAB", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCreeper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitB", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveSwarmHostSplitA", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitAB", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskBurrowCharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSUltraliskBurrowCharge", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskTissueAnimation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSTissueAssimilation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskMonarchBlades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMonarchBlades", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskNoxious (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSNoxious", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSTorrasque", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSNoxiousTorrasque", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskTorrasque (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSTorrasque", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSNoxious", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSNoxiousTorrasque", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordImprovedOverlord (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5ImprovedOverlords", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordVentralSacs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_overlordtransport", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockBaneling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_BanelingNest", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphZerglingToBaneling", 0), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockLurker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLurker", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSImpaler", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLurkerImpaler", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockImpaler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSImpaler", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSLurker", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLurkerImpaler", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockViper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskViper", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSMutaliskBroodlord", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskBroodlordViper", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockBroodLord (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskBroodlord", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSMutaliskViper", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskBroodlordViper", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMeleeAttacks (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
                TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMissileAttacks (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
                TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockGroundCarapace (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel1", true);
            if ((lp_level >= 2)) {
                libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
                TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerAttacks (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
            TechTreeUnitAllow(lp_player, "AP_Spire", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerCarapace (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
            TechTreeUnitAllow(lp_player, "AP_Spire", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_TwinDrones (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5TwoDrones", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AutomatedExtractor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5AutoExtractor", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_VespeneEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5GasBonuses", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MalignantCreep (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoF63B3C60_g;
    int autoF63B3C60_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_K5CreepBonuses", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5CreepBonuses", 1);
    if ((lv_upgradeLevels == 0)) {
        autoF63B3C60_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF63B3C60_u = UnitGroupCount(autoF63B3C60_g, c_unitCountAll);
        for (;; autoF63B3C60_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoF63B3C60_g, autoF63B3C60_u);
            if (lv_currentUnit == null) { break; }
            if ((UnitHasBehavior2(lv_currentUnit, "AP_MalignantCreepFix") == true) && (CreepIsPresent(UnitGetPosition(lv_currentUnit)) == true)) {
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropLifeRegen, (UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeRegen, c_unitPropCurrent) + 0.8202));
            }

        }
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganKinteticBlast (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5MindBolt", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganHeroicFortitude (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5HeroicFortitude", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganLeapingStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5PrimalSlash", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganCrushingGrip (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5CrushingGrip", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganChainReaction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5ChainLightning", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganPsionicShift (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5PsiStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganWildMutation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5WildMutation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnBanelings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5SpawnBanelings", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganMend (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Mend", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganInfestBroodlings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5InfestBroodlings", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganFury (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Fury", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganAbilityEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Cooldowns", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganApocalypse (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Apocalypse", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnLeviathan (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Leviathan", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganDropPods (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5DropPods", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockLair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToLair", 0), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockHive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToHive", 0), true);
}

void libABFE498B_gf_AP_Triggers_clearZergTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Zergling", false);
    TechTreeUnitAllow(lp_player, "AP_Roach", false);
    TechTreeUnitAllow(lp_player, "AP_Hydralisk", false);
    TechTreeUnitAllow(lp_player, "AP_Queen", false);
    TechTreeUnitAllow(lp_player, "AP_InfestedAbomination", false);
    TechTreeUnitAllow(lp_player, "AP_SwarmHost", false);
    TechTreeUnitAllow(lp_player, "AP_Ultralisk", false);
    TechTreeUnitAllow(lp_player, "AP_Infestor", false);
    TechTreeUnitAllow(lp_player, "AP_Mutalisk", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphZerglingToBaneling", 0), false);
    TechTreeUnitAllow(lp_player, "AP_InfestedMedic", false);
    TechTreeUnitAllow(lp_player, "AP_InfestedSiegeTank", false);
    TechTreeUnitAllow(lp_player, "AP_InfestedBanshee", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToLair", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToHive", 0), false);
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", false);
    TechTreeUnitAllow(lp_player, "AP_RoachWarren", false);
    TechTreeUnitAllow(lp_player, "AP_BanelingNest", false);
    TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", false);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", false);
    TechTreeUnitAllow(lp_player, "AP_Spire", false);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", false);
    TechTreeUnitAllow(lp_player, "AP_UltraliskCavern", false);
    TechTreeUnitAllow(lp_player, "AP_SpineCrawler", false);
    TechTreeUnitAllow(lp_player, "AP_SporeCrawler", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel3", false);
}

void libABFE498B_gf_AP_Triggers_giveZergDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSCampaignLarvaCount", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganPostLabSounds", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAiurZealot (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ZealotAiur", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCenturion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ZealotShakuras", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentinel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ZealotPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicant (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Supplicant", true);
    TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainDummy", true);
    TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainCreator", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerShakuras (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_StalkerShakuras", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockInstigator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_StalkerPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_Slayer", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_SentryAiur", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_SentryPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHavoc (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_Monitor", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
    TechTreeUnitAllow(lp_player, "AP_HighArchonTemplar", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSignifier (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
    TechTreeUnitAllow(lp_player, "AP_HighTemplarShakuras", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAscendant (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
    TechTreeUnitAllow(lp_player, "AP_HighTemplarTaldarim", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarShakuras (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_DarkShrine", true);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarShakuras", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAvenger (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_DarkShrine", true);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarAiur", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockBloodHunter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_DarkShrine", true);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarTaldarim", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_Dragoon", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
    TechTreeUnitAllow(lp_player, "AP_DarkArchon", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAdept (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "AP_Adept", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockObserver (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Observer", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrism (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_WarpPrism", true);
    TechTreeUnitAllow(lp_player, "AP_WarpPrismPhasing", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ImmortalAiur", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAnnihilator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ImmortalShakuras", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVanguard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ImmortalTaldarim", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockColossusPurifier (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_RoboticsBay", true);
    TechTreeUnitAllow(lp_player, "AP_ColossusPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_RoboticsBay", true);
    TechTreeUnitAllow(lp_player, "AP_ColossusTaldarim", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaver (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_RoboticsBay", true);
    TechTreeUnitAllow(lp_player, "AP_Reaver", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Disruptor", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_PhoenixAiur", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMirage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_PhoenixPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_CorsairMP", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayShakuras (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_VoidRayShakuras", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_VoidRayTaldarim", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
    TechTreeUnitAllow(lp_player, "AP_CarrierAiur", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScout (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ScoutMP", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempest (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
    TechTreeUnitAllow(lp_player, "AP_TempestPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionPurifier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTaldarimMothership (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
    TechTreeUnitAllow(lp_player, "AP_SOAMothershipv4", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionTaldarim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_ArbiterMP", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOracle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Oracle", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionNerazim", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhotonCannon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Forge", true);
    TechTreeUnitAllow(lp_player, "AP_PhotonCannon", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockKhaydarinMonolith (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Forge", true);
    TechTreeUnitAllow(lp_player, "AP_KhaydarinMonolith", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockShieldBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_ShieldBattery", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockChronoSurge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOASuperChrono", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockProgressiveProxyPylon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAProxyPylon", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAProxyPylon", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAWarpInReinforcements", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPylonOvercharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAPylonOvercharge", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAOrbitalStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTemporalField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAGravitonBomb", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSolarLance (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAThermalLance", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMassRecall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOARecall", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockShieldOvercharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SoASuperShield", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDeployFenix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAFenix", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPurifierBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAPurifierBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTimeStop (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOATimeFreeze", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSolarBombardment (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAStrafeAttack", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMatrixOverload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAMatrixOverload", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockQuatro (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsQuatro", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockNexusOvercharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOARadar", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalAssimilators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAAutoAssimilator", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpHarmonization (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAWarpTech", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGuardianShell (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAHeroicShield", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReconstructionBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOARepairBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOverwatch (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAOverWatch", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSuperiorWarpGates (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperiorWarpGates", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGroundWeapons (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Forge", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGroundArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Forge", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockShields (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Forge", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAirWeapons (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAirArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel3", 1);
                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel3", true);
                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGateway (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Gateway", true);
    TechTreeUnitAllow(lp_player, "AP_WarpGate", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacility", true);
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacilityWarp", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStargate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Stargate", true);
    TechTreeUnitAllow(lp_player, "AP_StargateWarp", true);
}

void libABFE498B_gf_AP_Triggers_clearProtossTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_ZealotAiur", false);
    TechTreeUnitAllow(lp_player, "AP_ZealotShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_ZealotPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_Supplicant", false);
    TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainDummy", false);
    TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainCreator", false);
    TechTreeUnitAllow(lp_player, "AP_StalkerShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_StalkerPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_Slayer", false);
    TechTreeUnitAllow(lp_player, "AP_SentryAiur", false);
    TechTreeUnitAllow(lp_player, "AP_SentryPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_Monitor", false);
    TechTreeUnitAllow(lp_player, "AP_HighArchonTemplar", false);
    TechTreeUnitAllow(lp_player, "AP_HighTemplarShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_HighTemplarTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarAiur", false);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_Dragoon", false);
    TechTreeUnitAllow(lp_player, "AP_DarkArchon", false);
    TechTreeUnitAllow(lp_player, "AP_Adept", false);
    TechTreeUnitAllow(lp_player, "AP_WarpPrism", false);
    TechTreeUnitAllow(lp_player, "AP_Observer", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalAiur", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_ColossusPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_ColossusTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_Reaver", false);
    TechTreeUnitAllow(lp_player, "AP_Disruptor", false);
    TechTreeUnitAllow(lp_player, "AP_PhoenixAiur", false);
    TechTreeUnitAllow(lp_player, "AP_PhoenixPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_CorsairMP", false);
    TechTreeUnitAllow(lp_player, "AP_VoidRayShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_VoidRayTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_CarrierAiur", false);
    TechTreeUnitAllow(lp_player, "AP_ScoutMP", false);
    TechTreeUnitAllow(lp_player, "AP_SOAMothershipv4", false);
    TechTreeUnitAllow(lp_player, "AP_TempestPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_ArbiterMP", false);
    TechTreeUnitAllow(lp_player, "AP_Oracle", false);
    TechTreeUnitAllow(lp_player, "AP_Gateway", false);
    TechTreeUnitAllow(lp_player, "AP_WarpGate", false);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", false);
    TechTreeUnitAllow(lp_player, "AP_TemplarArchive", false);
    TechTreeUnitAllow(lp_player, "AP_DarkShrine", false);
    TechTreeUnitAllow(lp_player, "AP_Forge", false);
    TechTreeUnitAllow(lp_player, "AP_PhotonCannon", false);
    TechTreeUnitAllow(lp_player, "AP_KhaydarinMonolith", false);
    TechTreeUnitAllow(lp_player, "AP_ShieldBattery", false);
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacility", false);
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacilityWarp", false);
    TechTreeUnitAllow(lp_player, "AP_RoboticsBay", false);
    TechTreeUnitAllow(lp_player, "AP_Stargate", false);
    TechTreeUnitAllow(lp_player, "AP_StargateWarp", false);
    TechTreeUnitAllow(lp_player, "AP_FleetBeacon", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel3", false);
}

void libABFE498B_gf_AP_Triggers_giveProtossDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidPhoenixGravitonCampaignVersion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidPhoenixDoubleGraviton", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SlayerConfig", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakStalkerPhasingArmor", 1);
}

void libABFE498B_gf_AP_Triggers_replaceUpgrade (int lp_player, string lp_oldUpgrade, string lp_newUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, lp_oldUpgrade, c_techCountQueuedOrBetter) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_oldUpgrade, 0);
        TechTreeUpgradeAllow(lp_player, lp_oldUpgrade, false);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_newUpgrade, 1);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_setOptions
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_setOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_skipCutscenes;
    string lv_disableForcedCamera;
    string lv_gameSpeed;
    string lv_difficulty;
    string lv_genericUpgradeResearch;
    string lv_allInVariant;
    string lv_kerriganOptions;
    string lv_storyTech;
    string lv_takeOverAIAllies;
    string lv_soaOptions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_skipCutscenes = "";
    lv_disableForcedCamera = "";
    lv_gameSpeed = "";
    lv_difficulty = "";
    lv_genericUpgradeResearch = "";
    lv_allInVariant = "";
    lv_kerriganOptions = "";
    lv_storyTech = "";
    lv_takeOverAIAllies = "";
    lv_soaOptions = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libABFE498B_gt_AP_Triggers_techTreeInit, true, false);
    lv_difficulty = StringWord(EventChatMessage(false), 2);
    lv_genericUpgradeResearch = StringWord(EventChatMessage(false), 3);
    lv_allInVariant = StringWord(EventChatMessage(false), 4);
    lv_gameSpeed = StringWord(EventChatMessage(false), 5);
    lv_disableForcedCamera = StringWord(EventChatMessage(false), 6);
    lv_skipCutscenes = StringWord(EventChatMessage(false), 7);
    lv_kerriganOptions = StringWord(EventChatMessage(false), 8);
    lv_storyTech = StringWord(EventChatMessage(false), 9);
    lv_takeOverAIAllies = StringWord(EventChatMessage(false), 10);
    lv_soaOptions = StringWord(EventChatMessage(false), 11);
    libABFE498B_gf_AP_Triggers_setDifficulty(lv_difficulty);
    libABFE498B_gf_AP_Triggers_setGameSpeed(lv_gameSpeed);
    libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch = StringToInt(lv_genericUpgradeResearch);
    libABFE498B_gv_aP_Triggers_Option_allInMissionVariant = StringToInt(lv_allInVariant);
    libABFE498B_gv_aP_Triggers_disableForcedCamera = StringEqual(lv_disableForcedCamera, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_skipCutscenes = StringEqual(lv_skipCutscenes, "1", c_stringCase);
    libABFE498B_gf_AP_Triggers_setKerriganOptions(StringToInt(lv_kerriganOptions));
    libABFE498B_gv_aP_Triggers_Option_grantStoryTech = StringEqual(lv_storyTech, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_Option_takeOverAIAllies = StringEqual(lv_takeOverAIAllies, "1", c_stringCase);
    libABFE498B_gf_AP_Triggers_setSoAOptions(StringToInt(lv_soaOptions));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_setOptions_Init () {
    libABFE498B_gt_AP_Triggers_setOptions = TriggerCreate("libABFE498B_gt_AP_Triggers_setOptions_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_setOptions, c_playerAny, "?SetOptions", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveTerranTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveTerranTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_unitValue;
    string lv_upgradeValue;
    string lv_armory1Value;
    string lv_armory2Value;
    string lv_armory3Value;
    string lv_armory4Value;
    string lv_armory5Value;
    string lv_armory6Value;
    string lv_buildingValue;
    string lv_mercenaryValue;
    string lv_laboratoryValue;
    string lv_progressiveUpgradeValue;

    // Automatic Variable Declarations
    playergroup auto3377504F_g;

    // Variable Initialization
    lv_unitValue = "";
    lv_upgradeValue = "";
    lv_armory1Value = "";
    lv_armory2Value = "";
    lv_armory3Value = "";
    lv_armory4Value = "";
    lv_armory5Value = "";
    lv_armory6Value = "";
    lv_buildingValue = "";
    lv_mercenaryValue = "";
    lv_laboratoryValue = "";
    lv_progressiveUpgradeValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armory1Value = StringWord(EventChatMessage(false), 2);
    lv_armory2Value = StringWord(EventChatMessage(false), 3);
    lv_armory3Value = StringWord(EventChatMessage(false), 4);
    lv_armory4Value = StringWord(EventChatMessage(false), 5);
    lv_armory5Value = StringWord(EventChatMessage(false), 6);
    lv_armory6Value = StringWord(EventChatMessage(false), 7);
    lv_progressiveUpgradeValue = StringWord(EventChatMessage(false), 8);
    lv_laboratoryValue = StringWord(EventChatMessage(false), 9);
    lv_upgradeValue = StringWord(EventChatMessage(false), 10);
    lv_unitValue = StringWord(EventChatMessage(false), 11);
    lv_buildingValue = StringWord(EventChatMessage(false), 12);
    lv_mercenaryValue = StringWord(EventChatMessage(false), 13);
    auto3377504F_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3377504F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_unlockTerranArmory1(lv_currentPlayer, StringToInt(lv_armory1Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory2(lv_currentPlayer, StringToInt(lv_armory2Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory3(lv_currentPlayer, StringToInt(lv_armory3Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory4(lv_currentPlayer, StringToInt(lv_armory4Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory5(lv_currentPlayer, StringToInt(lv_armory5Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory6(lv_currentPlayer, StringToInt(lv_armory6Value));
        libABFE498B_gf_AP_Triggers_unlockTerranProgressiveUpgrades(lv_currentPlayer, StringToInt(lv_progressiveUpgradeValue));
        libABFE498B_gf_AP_Triggers_unlockTerranLaboratory(lv_currentPlayer, StringToInt(lv_laboratoryValue));
        libABFE498B_gf_AP_Triggers_unlockTerranUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
        libABFE498B_gf_AP_Triggers_unlockTerranUnits(lv_currentPlayer, StringToInt(lv_unitValue));
        libABFE498B_gf_AP_Triggers_unlockTerranBuildings(lv_currentPlayer, StringToInt(lv_buildingValue));
        libABFE498B_gf_AP_Triggers_unlockTerranMercenaries(lv_currentPlayer, StringToInt(lv_mercenaryValue));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveTerranTech_Init () {
    libABFE498B_gt_AP_Triggers_giveTerranTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveTerranTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveTerranTech, c_playerAny, "?GiveTerranTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveZergTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveZergTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_kerriganLevelValue;
    string lv_kerriganPrimalValue;
    string lv_abilityValue;
    string lv_mutationValue;
    string lv_strainValue;
    string lv_upgradeValue;
    string lv_unitValue;
    string lv_armory1Value;
    string lv_armory2Value;
    string lv_armory3Value;
    string lv_armory4Value;
    string lv_armory5Value;
    string lv_armory6Value;
    string lv_buildingValue;
    string lv_mercenaryValue;
    string lv_laboratoryValue;
    string lv_progressiveUpgradeValue;

    // Automatic Variable Declarations
    playergroup auto6CA7C5BB_g;

    // Variable Initialization
    lv_kerriganLevelValue = "";
    lv_kerriganPrimalValue = "";
    lv_abilityValue = "";
    lv_mutationValue = "";
    lv_strainValue = "";
    lv_upgradeValue = "";
    lv_unitValue = "";
    lv_armory1Value = "";
    lv_armory2Value = "";
    lv_armory3Value = "";
    lv_armory4Value = "";
    lv_armory5Value = "";
    lv_armory6Value = "";
    lv_buildingValue = "";
    lv_mercenaryValue = "";
    lv_laboratoryValue = "";
    lv_progressiveUpgradeValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kerriganLevelValue = StringWord(EventChatMessage(false), 2);
    lv_kerriganPrimalValue = StringWord(EventChatMessage(false), 3);
    lv_abilityValue = StringWord(EventChatMessage(false), 4);
    lv_mutationValue = StringWord(EventChatMessage(false), 5);
    lv_strainValue = StringWord(EventChatMessage(false), 6);
    lv_upgradeValue = StringWord(EventChatMessage(false), 7);
    lv_mercenaryValue = StringWord(EventChatMessage(false), 8);
    lv_unitValue = StringWord(EventChatMessage(false), 9);
    auto6CA7C5BB_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto6CA7C5BB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((libABFE498B_gv_aP_Triggers_Option_KerriganPresence != 0)) {
            lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus(lv_currentPlayer, (libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_BonusLevels + StringToInt(lv_kerriganLevelValue)));
        }
        else {
            lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus(lv_currentPlayer, libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_BonusLevels);
        }
        if ((libABFE498B_gv_aP_Triggers_Option_KerriganPrimalStatusByMap == true)) {
            if ((libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_PrimalInVanilla == true)) {
                libABFE498B_gf_AP_Triggers_setKerriganPrimal(lv_currentPlayer);
            }

        }
        else {
            if ((StringToInt(lv_kerriganPrimalValue) == 1)) {
                libABFE498B_gf_AP_Triggers_setKerriganPrimal(lv_currentPlayer);
            }

        }
        libABFE498B_gf_AP_Triggers_unlockZergKerriganAbilities(lv_currentPlayer, StringToInt(lv_abilityValue));
        libABFE498B_gf_AP_Triggers_unlockZergMutation(lv_currentPlayer, StringToInt(lv_mutationValue));
        libABFE498B_gf_AP_Triggers_unlockZergStrain(lv_currentPlayer, StringToInt(lv_strainValue));
        libABFE498B_gf_AP_Triggers_unlockZergUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
        libABFE498B_gf_AP_Triggers_unlockZergMercenaries(lv_currentPlayer, StringToInt(lv_mercenaryValue));
        libABFE498B_gf_AP_Triggers_unlockZergUnits(lv_currentPlayer, StringToInt(lv_unitValue));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveZergTech_Init () {
    libABFE498B_gt_AP_Triggers_giveZergTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveZergTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveZergTech, c_playerAny, "?GiveZergTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveProtossTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveProtossTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_unitValue;
    string lv_unit2Value;
    string lv_upgradeValue;
    string lv_buildingValue;
    string lv_progressiveUpgradeValue;
    string lv_spearOfAdunValue;
    string lv_forgeValue;

    // Automatic Variable Declarations
    playergroup auto67EC4BC5_g;

    // Variable Initialization
    lv_unitValue = "";
    lv_unit2Value = "";
    lv_upgradeValue = "";
    lv_buildingValue = "";
    lv_progressiveUpgradeValue = "";
    lv_spearOfAdunValue = "";
    lv_forgeValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitValue = StringWord(EventChatMessage(false), 2);
    lv_unit2Value = StringWord(EventChatMessage(false), 3);
    lv_upgradeValue = StringWord(EventChatMessage(false), 4);
    lv_buildingValue = StringWord(EventChatMessage(false), 5);
    lv_progressiveUpgradeValue = StringWord(EventChatMessage(false), 6);
    lv_spearOfAdunValue = StringWord(EventChatMessage(false), 7);
    lv_forgeValue = StringWord(EventChatMessage(false), 8);
    auto67EC4BC5_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto67EC4BC5_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_unlockProtossUnits(lv_currentPlayer, StringToInt(lv_unitValue));
        libABFE498B_gf_AP_Triggers_unlockProtossUnits2(lv_currentPlayer, StringToInt(lv_unit2Value));
        libABFE498B_gf_AP_Triggers_unlockProtossBuildings(lv_currentPlayer, StringToInt(lv_buildingValue));
        libABFE498B_gf_AP_Triggers_unlockProtossProgressiveUpgrades(lv_currentPlayer, StringToInt(lv_progressiveUpgradeValue));
        libABFE498B_gf_AP_Triggers_unlockProtossSpearOfAdun(lv_currentPlayer, StringToInt(lv_spearOfAdunValue));
        libABFE498B_gf_AP_Triggers_unlockProtossForge(lv_currentPlayer, StringToInt(lv_forgeValue));
        libABFE498B_gf_AP_Triggers_unlockProtossUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveProtossTech_Init () {
    libABFE498B_gt_AP_Triggers_giveProtossTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveProtossTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveProtossTech, c_playerAny, "?GiveProtossTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_techTreeInit
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_techTreeInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto469AFECB_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto469AFECB_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto469AFECB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_clearTerranTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_clearZergTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_clearProtossTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveTerranDefaultTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveZergDefaultTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveProtossDefaultTech(lv_currentPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_techTreeInit_Init () {
    libABFE498B_gt_AP_Triggers_techTreeInit = TriggerCreate("libABFE498B_gt_AP_Triggers_techTreeInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_InitSoA
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_InitSoA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto93509108_g;
    playergroup autoABD2DABB_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libABFE498B_gv_aP_Triggers_Option_SoAPresence > 0) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresence == 3) || ((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_LOTV_PROTOSS) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresence == 1) || (libABFE498B_gv_aP_Triggers_Option_SoAPresence == 2))) || ((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_PROTOSS_NOT_LOTV_MAIN) && (libABFE498B_gv_aP_Triggers_Option_SoAPresence == 2))) && ((libABFE498B_gv_aP_Triggers_isBuild == true) || (libABFE498B_gv_aP_Triggers_Option_SoAPresenceNoBuild == true))) {
        auto93509108_g = libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers;
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto93509108_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lib15EF4C78_gf_AP_Player_CreateSoAUnit(lv_currentPlayer);
        }
    }

    if ((libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts > 0) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 3) || ((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_LOTV_PROTOSS) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 1) || (libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 2))) || ((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_PROTOSS_NOT_LOTV_MAIN) && (libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 2))) && ((libABFE498B_gv_aP_Triggers_isBuild == true) || (libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocastsNoBuild == true))) {
        autoABD2DABB_g = libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers;
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoABD2DABB_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lib15EF4C78_gf_AP_Player_CreateSoAAutonomousCasterUnit(lv_currentPlayer);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_InitSoA_Init () {
    libABFE498B_gt_AP_Triggers_InitSoA = TriggerCreate("libABFE498B_gt_AP_Triggers_InitSoA_Func");
}

void libABFE498B_InitTriggers () {
    libABFE498B_gt_AP_Triggers_setOptions_Init();
    libABFE498B_gt_AP_Triggers_giveTerranTech_Init();
    libABFE498B_gt_AP_Triggers_giveZergTech_Init();
    libABFE498B_gt_AP_Triggers_giveProtossTech_Init();
    libABFE498B_gt_AP_Triggers_techTreeInit_Init();
    libABFE498B_gt_AP_Triggers_InitSoA_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libABFE498B_InitLib_completed = false;

void libABFE498B_InitLib () {
    if (libABFE498B_InitLib_completed) {
        return;
    }

    libABFE498B_InitLib_completed = true;

    libABFE498B_InitLibraries();
    libABFE498B_InitVariables();
    libABFE498B_InitCustomScript();
    libABFE498B_InitTriggers();
}

