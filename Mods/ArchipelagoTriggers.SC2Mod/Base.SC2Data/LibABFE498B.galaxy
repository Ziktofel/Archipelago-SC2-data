include "TriggerLibs/NativeLib"
include "Lib5BD4895D"
include "Lib15EF4C78"
include "Lib6EE41A55"

include "LibABFE498B_h"

//--------------------------------------------------------------------------------------------------
// Library: Archipelago Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libABFE498B_InitLibraries () {
    libNtve_InitVariables();
    lib5BD4895D_InitVariables();
    lib15EF4C78_InitVariables();
}

// Variable Initialization
bool libABFE498B_InitVariables_completed = false;

void libABFE498B_InitVariables () {
    if (libABFE498B_InitVariables_completed) {
        return;
    }

    libABFE498B_InitVariables_completed = true;

    libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedNormal;
    libABFE498B_gv_aP_Triggers_Option_overridePlayerRace = "Neut";
    libABFE498B_gv_aP_Triggers_isBuild = true;
    libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss = libABFE498B_gv_aP_Triggers_MapConfig_MISSION_NOT_PROTOSS;
    libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers = PlayerGroupSingle(1);
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: AP_Triggers_GalaxyIncludes
//--------------------------------------------------------------------------------------------------
include "AP_Triggers_PlayerConsumer"
include "AP_Triggers_Util"

void libABFE498B_InitCustomScript () {
}

// Functions
void libABFE498B_gf_AP_Triggers_MapConfig_setMissionBuild (bool lp_build) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_isBuild = lp_build;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setDifficultySetup (trigger lp_onCasual, trigger lp_onNormal, trigger lp_onHard, trigger lp_onBrutal) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_onDifficultyCasual = lp_onCasual;
    libABFE498B_gv_aP_Triggers_onDifficultyNormal = lp_onNormal;
    libABFE498B_gv_aP_Triggers_onDifficultyHard = lp_onHard;
    libABFE498B_gv_aP_Triggers_onDifficultyBrutal = lp_onBrutal;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setKerriganOptions (bool lp_kerriganPrimalInVanilla, bool lp_kerriganHandledByMap) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_PrimalInVanilla = lp_kerriganPrimalInVanilla;
    libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_HandledByMap = lp_kerriganHandledByMap;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setKerriganStoryTechMinLevel (int lp_kerriganBonusLevels) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_StoryTechMinLevel = lp_kerriganBonusLevels;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setMissionProtoss (int lp_protossValue) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss = lp_protossValue;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setSoAControllingPlayers (playergroup lp_soAPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers = lp_soAPlayers;
}

void libABFE498B_gf_AP_Triggers_setRaceOverride (string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_race == "1")) {
        libABFE498B_gv_aP_Triggers_Option_overridePlayerRace = "Terr";
    }
    else if ((lp_race == "2")) {
        libABFE498B_gv_aP_Triggers_Option_overridePlayerRace = "Zerg";
    }
    else if ((lp_race == "3")) {
        libABFE498B_gv_aP_Triggers_Option_overridePlayerRace = "Prot";
    }
}

void libABFE498B_gf_AP_Triggers_setGameSpeed (string lp_gameSpeed) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_gameSpeed == "1")) {
        libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedSlower;
    }
    else if ((lp_gameSpeed == "2")) {
        libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedSlow;
    }
    else if ((lp_gameSpeed == "3")) {
        libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedNormal;
    }
    else if ((lp_gameSpeed == "4")) {
        libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedFast;
    }
    else if ((lp_gameSpeed == "5")) {
        libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedFaster;
    }
    GameSetSpeedValue(libABFE498B_gv_aP_Triggers_Option_gameSpeed);
}

void libABFE498B_gf_AP_Triggers_setDifficulty (string lp_difficultyChar) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_difficulty;

    // Automatic Variable Declarations
    playergroup auto7AEE654A_g;
    playergroup autoD592ED61_g;

    // Variable Initialization
    lv_difficulty = 1;

    // Implementation
    if ((lp_difficultyChar == "C")) {
        TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyCasual, true, false);
        lv_difficulty = 1;
        libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedNormal;
    }
    else {
        if ((lp_difficultyChar == "N")) {
            TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyNormal, true, false);
            lv_difficulty = 2;
            libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedNormal;
        }
        else {
            if ((lp_difficultyChar == "H")) {
                TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyHard, true, false);
                GameSetSpeedValue(c_gameSpeedFast);
                lv_difficulty = 3;
                libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedFast;
            }
            else {
                if ((lp_difficultyChar == "B")) {
                    TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyBrutal, true, false);
                    lv_difficulty = 4;
                    libABFE498B_gv_aP_Triggers_Option_gameSpeed = c_gameSpeedFaster;
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_ABFE498B_43BB9F5E") + StringToText(lp_difficultyChar)));
                }
            }
        }
    }
    auto7AEE654A_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto7AEE654A_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        PlayerSetDifficulty(lv_currentPlayer, lv_difficulty);
    }
    autoD592ED61_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoD592ED61_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if (((lv_difficulty == 3) || (lv_difficulty == 4))) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "AP_HotSCampaignLarvaCountHard", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "AP_HotSCampaignLarvaCount", 1);
        }
    }
    GameSetSpeedValue(libABFE498B_gv_aP_Triggers_Option_gameSpeed);
    TriggerSendEvent(libABFE498B_gv_aP_Triggers_DIFFICULTY_SET_EVENT);
}

void libABFE498B_gf_AP_Triggers_setKerriganOptions (int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Option_KerriganPresence = ModI(lp_bitArrayValue, 4);
    libABFE498B_gv_aP_Triggers_Option_KerriganPrimalStatusByMap = (ModI((lp_bitArrayValue / 4), 2) == 1);
}

void libABFE498B_gf_AP_Triggers_setSoAOptions (int lp_bitArrayValue) {
    // Variable Declarations
    int lv_currentValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libABFE498B_gv_aP_Triggers_Option_SoAPresence = ModI(lp_bitArrayValue, 4);
    lv_currentValue = (lp_bitArrayValue / 4);
    libABFE498B_gv_aP_Triggers_Option_SoAPresenceNoBuild = (ModI(lv_currentValue, 2) == 1);
    lv_currentValue = (lv_currentValue / 2);
    libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts = ModI(lv_currentValue, 4);
    lv_currentValue = (lv_currentValue / 4);
    libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocastsNoBuild = (ModI(lv_currentValue, 2) == 1);
    TriggerExecute(libABFE498B_gt_AP_Triggers_InitSoA, true, false);
}

void libABFE498B_gf_AP_Triggers_unlockTradeStructure (int lp_player, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == 1)) {
        TechTreeUnitAllow(lp_player, "AP_TradeStructure", true);
        lib5BD4895D_gv_aP_Core_tradeSendUnitType = "AP_TradeStructureSendDummy";
        lib5BD4895D_gv_aP_Core_tradeReceiveUnitType = "AP_TradeStructureReceiveDummy";
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_TradeStructure", false);
    }
}

void libABFE498B_gf_AP_Triggers_unlockTerranUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMarine, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMedic, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebat, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauder, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockReaper, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHellion, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockVulture, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliath, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondback, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTank, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivac, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockWraith, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockViking, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockBanshee, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiser, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockGhost, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectre, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockThor, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberator, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrie, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMine, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockCyclone, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockRaven, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVessel, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockPredator, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockHercules, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockHERC, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockWarhound, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockPrideOfAugustgrad, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockSkyFury //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranUnits2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockShockDivision, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBlackhammer, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockAegisGuard, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockEmperorsShadow, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooper, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSonOfKorhal, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockBulwarkCompany, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockFieldResponseTheta, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockEmperorsGuardian, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockNightHawk, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockNightWolf, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory1 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerProjectileAccelerator, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerNeosteelBunker, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretTitaniumHousing, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretHellstormBatteries, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVAdvancedConstruction, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVDualFusionWelders, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerShrikeTurret, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerFortifiedBunker, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineLaserTargetingSystem, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineCombatShield, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdvancedMedicFacilities, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicStabilizerMedpacks, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatIncineratorGauntlets, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatJuggernautPlating, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderConcussiveShells, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderKineticFoam, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperU238Rounds, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperG4Clusterbomb, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldAccelerators, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldLaunchers, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineMagRailMunitions, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineOptimizedLogistics, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicRestoration, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicOpticalFlare, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicResourceEfficiency, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatResourceEfficiency, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderLaserTargetingSystem, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderMagRailMunitions, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderInternalTechModule, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVHostileEnvironmentAdaptation //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdaptiveMedpacks, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicNanoProjectors, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatInfernalPreIgniter, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatKineticFoam, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatNanoProjectors, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderJuggernautPlating, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperJetPackOverdrive, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionInfernalPlating, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoRepair, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathShapedHull, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathResourceEfficiency, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathInternalTechModule, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedHull, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankResourceEfficiency, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCloak, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCharge, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacScatterVeil, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperLaserTargetingSystem, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperAdvancedCloakingField, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperSpiderMines, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperCombatDrugs, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionHellbatAspect, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionSmartServos, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionOptimizedLogistics, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockHellbatJumpJets, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureIonThrusters, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoLaunchers, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineHighExplosiveMunition, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathJumpJets, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathOptimizedLogistics //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory3 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackHyperfluxor, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackBurstCapacitors, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackResourceEfficinecy, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankJumpJets, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSpiderMines, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSmartServos, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankGraduatingRange, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankLaserTargetingSystem, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankAdvancedSiegeTech, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankInternalTechModule, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorResourceEfficiency, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacExpandedHull, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAfterburners, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithAdvancedLaserTechnology, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingSmartServos, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingAntiMechanicalMunition, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionTwinLinkedFlamethrower, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionThermiteFilaments, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineCerberusMine, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathMultiLockWeaponsSystem, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathAresClassTargetingSystem, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackIonThrusters, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackShapedHull, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankMaelstromRounds, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedBlast, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidDeploymentTube, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedHealingAI, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithDisplacementField, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingRipwaveMissiles, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingPhobosClassWeaponsSystem //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory4 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShockwaveMissileBattery, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressOrbitalModule, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostOcularImplants, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostCriusSuit, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectrePsionicLash, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreNyxClassCloakingModule, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockThor330mmBarrageCannon, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorAdvancedBallistics, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorRaidArtillery, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDrillingClaws, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineConcealment, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedCloakingField, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithTriggerOverride, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithInternalTechModule, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithResourceEfficiency, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingShredderRounds, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingWILDMissiles, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShapedHull, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeAdvancedTargetingOptics, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeDistortionBlasters, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeRocketBarrage, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostResourceEfficiency, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreResourceEfficiency, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockThorButtonWithASkullOnIt, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockThorLaserTargetingSystems, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockThorLargeScaleFieldConstruction, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenResourceEfficiency, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenDurableMaterials, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselImprovedNanoRepair, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselAdvancedAISystems //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory5 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneResourceEfficiency, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeHyperflightRotors, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeLaserTargetingSystem, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeInternalTechModule, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserTacticalJump, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCloak, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserATXLaserBattery, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserOptimizedLogistics, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserInternalTechModule, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostEMPRounds, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostLockdown, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreImpalerRounds, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenBioMechanicalRepairDrone, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenSpiderMines, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenRailgunTurret, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenHunterSeekerWeapon, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenInterferenceMatrix, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenAntiArmorMissile, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockRavenInternalTechModule, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselEMPShockwave, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselDefensiveMatrix, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneTargetingOptics, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneRapidFireLaunchers, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCloak, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorLaserTargetingSystem, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorOptimizedLogistics, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineBlackMarketLaunchers, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineExecutionerMissiles, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieEnhancedCluserLaunchers, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieShapedHull //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory6 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieFlechetteMissiles, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieAfterburners, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneInternalTechModule, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSmartServos, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorResourceEfficiency, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHerculesInternalFusionModule, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockHerculesTacticalJump, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressAdvancedTargeting, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieLaunchingVectorCompensator, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieResourceEfficiency, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorVespeneSynthesis, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserBehemothPlating, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCovertOpsEngines, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockWarhoundResourceEfficiency, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockWarhoundReinforcedPlating, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockHERCResourceEfficiency, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockHERCJuggernautPlating, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockHERCKineticFoam, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperResorceEfficiency, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperKineticFoam, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankEnhancedCombustionEngines, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidReignitionSystems, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserBehemothReactor, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockThorRapidReload, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorGuerillaMissiles, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineResourceEfficiency, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockHERCGrapplePull, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterScannerSweep, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterMULE, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterExtraSupplies //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory7 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurretSlow, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurretPunisherGrenades, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurretResourceEfficency, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretResourceEfficency, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselTacticalJump, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCompressedRocketFuel, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserFieldAssistTargetingSystem, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockPredatorAdaptiveDefenses, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingAesirTurbines, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacResourceEfficiency, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockEmperorsShadowSovereignTacticalMissiles, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperB2HighCalLMG, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperHailstormLauncher, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperCPO7SalamanderFlamethrower, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperAdvancedAlloys, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperOptimizedLogistics, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVConstructionJumpJets, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDemolitionArmaments, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranLaboratory (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockUltraCapacitors, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockVanadiumPlating, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalDepots, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMicroFiletring, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockAutomatedRefinery, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterReactor, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockTechReactor, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalStrike, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockCellularReactor, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockStructureArmor, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockHiSecAutoTracking, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockAdvancedOptics, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockRogueForces, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockMechanicalKnowHow, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockMercenaryMunitions, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockFastDelivery, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockRapidReinforcement, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockFusionCoreFusionReactor, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranMercenaries (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockWarPigs, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockDevilDogs, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockHammerSecurities, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockSpartanCompany, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeBreakers, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHelsAngel, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockDuskWings, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockJacksonsRevenge, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockSkibisAngel, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockDeathHead, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockWingedNightmare, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockRaidLiberator, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockBrynhild, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockJotun, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranBuildings (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBunker, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurret, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockSensorTower, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterPlanetaryFortress, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockPerditionTurret, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHiveMindEmulator, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockPsiDisrupter, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurret, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processWeaponArmorUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockInfantryWeapon, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockInfantryArmor, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockVehicleWeapon, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockVehicleArmor, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockShipWeapon, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockShipArmor, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 24
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranProgressiveUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineProgressiveStimpack, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeProgressiveCrossSpectrumDampeners, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveRegenerativeBioSteel, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatProgressiveStimpack, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderProgressiveStimpack, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperProgressiveStimpack, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockHellbatProgressiveStimpack, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveHighImpactPayload, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureProgressiveReplenishableMagazine, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithProgressiveTomahawkPowerCells, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserProgressiveDefensiveMatrix, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveImmortalityProtocol, // 22
        libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveFireSuppresionSystem, // 24
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 26
        libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressProgressiveAugumentedThrusters // 28
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranProgressiveUpgrades2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaProgressiveCloak, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserProgressiveMissilePods, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackProgressiveTriLithiumPowerCell, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankProgressiveTransportHook, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 14
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 16
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 18
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 22
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 24
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 26
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 28
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranNovaGear (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaGhostVisor, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaRangefinderOculus, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaDomination, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaBlink, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaApolloSuit, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaArmoredSuit, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaJumpSuit, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponC20ACanisterRifle, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponHellfireShotgun, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponPlasmaRifle, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponMonomolecularBlade, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponBlazefireBlade, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetStimInfusion, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetPulseGrenades, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetFlashbangGrenades, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetIonicForceField, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetHoloDecoy, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockNovaNuke, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockZergling, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmQueen, // 1
        libABFE498B_gf_AP_Triggers_Zerg_unlockRoach, // 2
        libABFE498B_gf_AP_Triggers_Zerg_unlockHydralisk, // 3
        libABFE498B_gf_AP_Triggers_Zerg_unlockBroodQueen, // 4
        libABFE498B_gf_AP_Triggers_Zerg_unlockAberration, // 5
        libABFE498B_gf_AP_Triggers_Zerg_unlockMutalisk, // 6
        libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmHost, // 7
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestor, // 8
        libABFE498B_gf_AP_Triggers_Zerg_unlockUltralisk, // 9
        libABFE498B_gf_AP_Triggers_Zerg_unlockSporeCrawler, // 10
        libABFE498B_gf_AP_Triggers_Zerg_unlockSpineCrawler, // 11
        libABFE498B_gf_AP_Triggers_Zerg_unlockCorruptor, // 12
        libABFE498B_gf_AP_Triggers_Zerg_unlockScourge, // 13
        libABFE498B_gf_AP_Triggers_Zerg_unlockDefiler, // 14
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMarine, // 15
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBunker, // 16
        libABFE498B_gf_AP_Triggers_Zerg_unlockNydusWorm, // 17
        libABFE498B_gf_AP_Triggers_Zerg_unlockEchidnaWorm, // 18
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSiegeTank, // 19
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedDiamondBack, // 20
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBanshee, // 21
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedLiberator, //22
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMissileTurret, // 23
        libABFE498B_gf_AP_Triggers_Zerg_unlockPygalisk, //24
        libABFE498B_gf_AP_Triggers_Zerg_unlockBileLauncher, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processWeaponArmorUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockMeleeAttacks, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockMissileAttacks, // 4
        libABFE498B_gf_AP_Triggers_Zerg_unlockGroundCarapace, // 8
        libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerAttacks, // 12
        libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerCarapace, // 16
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 24
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMutation1 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingHardenedCarapace, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingAdrenalOverload, // 1
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingMetabolicBoost, // 2
        libABFE498B_gf_AP_Triggers_Zerg_RoachHydrioticBile, // 3
        libABFE498B_gf_AP_Triggers_Zerg_RoachAdaptivePlating, // 4
        libABFE498B_gf_AP_Triggers_Zerg_RoachTunnelingClaws, // 5
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskFrenzy, // 6
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskAncillaryCarapace, // 7
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskGroovedSpines, // 8
        libABFE498B_gf_AP_Triggers_Zerg_BanelingCorrosiveAcid, // 9
        libABFE498B_gf_AP_Triggers_Zerg_BanelingRupture, // 10
        libABFE498B_gf_AP_Triggers_Zerg_BanelingRegenerativeAcid, // 11
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskViciousGlave, // 12
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskRapidRegeneration, // 13
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskSunderingGlave, // 14
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostBurrow, // 15
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostRapidIncubation, // 16
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostPressurizedGlands, // 17
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskBurrowCharge, // 18
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskTissueAnimation, // 19
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskMonarchBlades, // 20
        libABFE498B_gf_AP_Triggers_Zerg_CorruptorCausticSpray, // 21
        libABFE498B_gf_AP_Triggers_Zerg_CorruptorCorruption, //22
        libABFE498B_gf_AP_Triggers_Zerg_ScourgeVirulentSpores, //23
        libABFE498B_gf_AP_Triggers_Zerg_ScourgeResourceEfficiency, //24
        libABFE498B_gf_AP_Triggers_Zerg_ScourgeSwarmScourge, //25
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingShreddingClaws, //26
        libABFE498B_gf_AP_Triggers_Zerg_RoachGlialReconstitution, //27
        libABFE498B_gf_AP_Triggers_Zerg_RoachOrganicCarapace, //28
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskMuscularAugments //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMutation2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_HydraliskResourceEfficiency, // 0
        libABFE498B_gf_AP_Triggers_Zerg_BanelingCentrifugalHooks, // 1
        libABFE498B_gf_AP_Triggers_Zerg_BanelingTunnelingJaws, // 2
        libABFE498B_gf_AP_Triggers_Zerg_BanelingRapidMetamorph, // 3
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskSeveringGlave, // 4
        libABFE498B_gf_AP_Triggers_Zerg_MutaliskAerodynamicGlaveShape, // 5
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostLocustMetabolicBoost, // 6
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostEnduringLocusts, // 7
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostOrganicCarapace, // 8
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostResourceEfficiency, // 9
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskAnabolicSynthesis, // 10
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskChitinousPlating, // 11
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskOrganicCarapace, // 12
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskResourceEfficiency, // 13
        libABFE498B_gf_AP_Triggers_Zerg_DevourerCorrosiveSpray, // 14
        libABFE498B_gf_AP_Triggers_Zerg_DevourerGapingMaw, // 15
        libABFE498B_gf_AP_Triggers_Zerg_DevourerImprovedOsmosis, // 16
        libABFE498B_gf_AP_Triggers_Zerg_DevourerPrescientSpores, // 17
        libABFE498B_gf_AP_Triggers_Zerg_GuardianProlongedDispersion, // 18
        libABFE498B_gf_AP_Triggers_Zerg_GuardianPrimalAdaptation, // 19
        libABFE498B_gf_AP_Triggers_Zerg_GuardianSoronanAcid, // 20
        libABFE498B_gf_AP_Triggers_Zerg_ImpalerAdativeTalons, // 21
        libABFE498B_gf_AP_Triggers_Zerg_ImpalerSecretionGlands, //22
        libABFE498B_gf_AP_Triggers_Zerg_ImpalerHardenedTentacleSpines, //23
        libABFE498B_gf_AP_Triggers_Zerg_LurkerSeismicSpines, //24
        libABFE498B_gf_AP_Triggers_Zerg_LurkerAdaptedSpines, //25
        libABFE498B_gf_AP_Triggers_Zerg_RavagerPotentBile, //26
        libABFE498B_gf_AP_Triggers_Zerg_RavagerBloatedBileDucts, //27
        libABFE498B_gf_AP_Triggers_Zerg_RavagerDeepTunnel, //28
        libABFE498B_gf_AP_Triggers_Zerg_ViperParasiticBomb //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMutation3 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ViperParalyticBarbs, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ViperVirulentMicrobes, // 1
        libABFE498B_gf_AP_Triggers_Zerg_BroodLordPorousCartilage, // 2
        libABFE498B_gf_AP_Triggers_Zerg_BroodLordEvolvedCarapace, // 3
        libABFE498B_gf_AP_Triggers_Zerg_BroodLordSplitterMitosis, // 4
        libABFE498B_gf_AP_Triggers_Zerg_BroodLordResourceEfficiency, // 5
        libABFE498B_gf_AP_Triggers_Zerg_InfestorInfestedTerran, // 6
        libABFE498B_gf_AP_Triggers_Zerg_InfestorMicrobialShroud, // 7
        libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenSpawnLarvae, // 8
        libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenDeepTunnel, // 9
        libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenOrganicCarapace, // 10
        libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenBioMechanicalTransfusion, // 11
        libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenResourceEfficiency, // 12
        libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenIncubatorChamber, // 13
        libABFE498B_gf_AP_Triggers_Zerg_BroodQueenFungalGrowth, // 14
        libABFE498B_gf_AP_Triggers_Zerg_BroodQueenEnsnare, // 15
        libABFE498B_gf_AP_Triggers_Zerg_BroodQueenEnhancedMitochondria, // 16
        libABFE498B_gf_AP_Triggers_Zerg_DefilerPathogenProjectors, // 17
        libABFE498B_gf_AP_Triggers_Zerg_DefilerTrapdoorAdaptation, // 18
        libABFE498B_gf_AP_Triggers_Zerg_DefilerPredatoryConsumption, // 19
        libABFE498B_gf_AP_Triggers_Zerg_DefilerComorbidity, // 20
        libABFE498B_gf_AP_Triggers_Zerg_AberrationMonstrousResilience, // 21
        libABFE498B_gf_AP_Triggers_Zerg_AberrationConstructRegeneration, //22
        libABFE498B_gf_AP_Triggers_Zerg_AberrationBanelingIncubation, //23
        libABFE498B_gf_AP_Triggers_Zerg_AberrationProtectiveCover, //24
        libABFE498B_gf_AP_Triggers_Zerg_AberrationResourceEfficiency, //25
        libABFE498B_gf_AP_Triggers_Zerg_CorruptorMonstrousResilience, //26
        libABFE498B_gf_AP_Triggers_Zerg_CorruptorConstructRegeneration, //27
        libABFE498B_gf_AP_Triggers_Zerg_CorruptorScourgeIncubation, //28
        libABFE498B_gf_AP_Triggers_Zerg_CorruptorResourceEfficiency //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMutation4 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_PrimalIgniterFireBreath, // 0
        libABFE498B_gf_AP_Triggers_Zerg_PrimalIgniterToughness,  // 1
        libABFE498B_gf_AP_Triggers_Zerg_SISCVChargeCount,  // 2
        libABFE498B_gf_AP_Triggers_Zerg_SIPlaguedMunitions,  // 3
        libABFE498B_gf_AP_Triggers_Zerg_SIMarineRangeUpgrade,  // 4
        libABFE498B_gf_AP_Triggers_Zerg_SIBunkerRegen,  // 5
        libABFE498B_gf_AP_Triggers_Zerg_SIBunkerArmor,  // 6
        libABFE498B_gf_AP_Triggers_Zerg_SIBunkerCargo,  // 7
        libABFE498B_gf_AP_Triggers_Zerg_TyrannozorTyrantsProtection, // 8
        libABFE498B_gf_AP_Triggers_Zerg_TyrannozorBarrageofSpikes,   // 9
        libABFE498B_gf_AP_Triggers_Zerg_TyrannozorImpalingStrike,    // 10
        libABFE498B_gf_AP_Triggers_Zerg_TyrannozorHealingAdaptation,  // 11
        libABFE498B_gf_AP_Triggers_Zerg_NydusWormFamilySubterraneanScales, // 12
        libABFE498B_gf_AP_Triggers_Zerg_NydusWormFamilyJormungandrStrain, // 13
        libABFE498B_gf_AP_Triggers_Zerg_NydusWormFamilyResourceEfficiency, // 14
        libABFE498B_gf_AP_Triggers_Zerg_EchidnaWormOuroborosStrain, // 15
        libABFE498B_gf_AP_Triggers_Zerg_NydusWormRavenousAppetite, // 16
        libABFE498B_gf_AP_Triggers_Zerg_AcidicEnzymes, // 17
        libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankDeepTunnel, // 18
        libABFE498B_gf_AP_Triggers_Zerg_CausticMucus, // 19
        libABFE498B_gf_AP_Triggers_Zerg_ViolentEnzymes, // 20
        libABFE498B_gf_AP_Triggers_Zerg_Braced_Exoskeleton, //21
        libABFE498B_gf_AP_Triggers_Zerg_Rapid_Hibernation, //22
        libABFE498B_gf_AP_Triggers_Zerg_Cloud_Dispersal, //23
        libABFE498B_gf_AP_Triggers_Zerg_Viral_Contamination, //24
        libABFE498B_gf_AP_Triggers_Zerg_GuardianPropellantSacs, //25
        libABFE498B_gf_AP_Triggers_Zerg_GuardianExplosiveSpores, //26
        libABFE498B_gf_AP_Triggers_Zerg_GuardianPrimordialFury, //27
        libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankSeismicSonar, //28
        libABFE498B_gf_AP_Triggers_Zerg_AdvancedTargetingOptics  //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMutation5 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankBalancedRoots, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ConcentratedSpew, // 1
        libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankFrightfulFleshwelder, // 2
        libABFE498B_gf_AP_Triggers_Zerg_InfestedDiamondbackFrightfulFleshwelder, // 3
        libABFE498B_gf_AP_Triggers_Zerg_InfestedBansheeFrightfulFleshwelder, // 4
        libABFE498B_gf_AP_Triggers_Zerg_InfestedLiberatorFrightfulFleshwelder, // 5
        libABFE498B_gf_AP_Triggers_Zerg_BioelectricPayload, // 6
        libABFE498B_gf_AP_Triggers_Zerg_AcidSporeVents, // 7
        libABFE498B_gf_AP_Triggers_Zerg_InfestedLiberatorDefenderMode, // 8
        libABFE498B_gf_AP_Triggers_Zerg_PygaliskStim, // 9
        libABFE498B_gf_AP_Triggers_Zerg_PygaliskDucalBlades, // 10
        libABFE498B_gf_AP_Triggers_Zerg_PygaliskCombatCarapace, // 11
        libABFE498B_gf_AP_Triggers_Zerg_BileLauncherArtilleryDucts, // 12
        libABFE498B_gf_AP_Triggers_Zerg_BileLauncherRapidBombardment, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, // 22
        ap_triggers_PlayerConsumer_sig, // 23
        ap_triggers_PlayerConsumer_sig, // 24
        ap_triggers_PlayerConsumer_sig, // 25
        ap_triggers_PlayerConsumer_sig, // 26
        ap_triggers_PlayerConsumer_sig, // 27
        ap_triggers_PlayerConsumer_sig, // 28
        ap_triggers_PlayerConsumer_sig  // 29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergStrain (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingRaptor, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingSwarmling, // 1
        libABFE498B_gf_AP_Triggers_Zerg_RoachVile, // 2
        libABFE498B_gf_AP_Triggers_Zerg_RoachCorpser, // 3
        ap_triggers_PlayerConsumer_sig, // 4
        ap_triggers_PlayerConsumer_sig, // 5
        libABFE498B_gf_AP_Triggers_Zerg_BanelingSplitter, // 6
        libABFE498B_gf_AP_Triggers_Zerg_BanelingHunter, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCarrion, // 10
        libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCreeper, // 11
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskNoxious, // 12
        libABFE498B_gf_AP_Triggers_Zerg_UltraliskTorrasque, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMorph (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockImpaler, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockLurker, // 1
        libABFE498B_gf_AP_Triggers_Zerg_unlockBroodLord, // 2
        libABFE498B_gf_AP_Triggers_Zerg_unlockViper, // 3
        libABFE498B_gf_AP_Triggers_Zerg_unlockOverseer, // 4
        libABFE498B_gf_AP_Triggers_Zerg_unlockBaneling, // 5
        libABFE498B_gf_AP_Triggers_Zerg_unlockGuardian, // 6
        libABFE498B_gf_AP_Triggers_Zerg_unlockDevourer, // 7
        libABFE498B_gf_AP_Triggers_Zerg_unlockRavager, // 8
        libABFE498B_gf_AP_Triggers_Zerg_unlockPrimalIgniter, // 9
        libABFE498B_gf_AP_Triggers_Zerg_unlockTyrannozor, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergKerriganAbilities (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_KerriganKinteticBlast, // 0
        libABFE498B_gf_AP_Triggers_Zerg_KerriganHeroicFortitude, // 1
        libABFE498B_gf_AP_Triggers_Zerg_KerriganLeapingStrike, // 2
        libABFE498B_gf_AP_Triggers_Zerg_KerriganCrushingGrip, // 3
        libABFE498B_gf_AP_Triggers_Zerg_KerriganChainReaction, // 4
        libABFE498B_gf_AP_Triggers_Zerg_KerriganPsionicShift, // 5
        libABFE498B_gf_AP_Triggers_Zerg_KerriganWildMutation, // 6
        libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnBanelings, // 7
        libABFE498B_gf_AP_Triggers_Zerg_KerriganMend, // 8
        libABFE498B_gf_AP_Triggers_Zerg_KerriganInfestBroodlings, // 9
        libABFE498B_gf_AP_Triggers_Zerg_KerriganFury, // 10
        libABFE498B_gf_AP_Triggers_Zerg_KerriganAbilityEfficiency, // 11
        libABFE498B_gf_AP_Triggers_Zerg_KerriganApocalypse, // 12
        libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnLeviathan, // 13
        libABFE498B_gf_AP_Triggers_Zerg_KerriganDropPods, // 14
        libABFE498B_gf_AP_Triggers_Zerg_KerriganAssimilationAura, // 15
        libABFE498B_gf_AP_Triggers_Zerg_KerriganImmobilizationWave, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergMercenaries (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMedic, // 0
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSiegeBreaker, // 1
        libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedDuskWing, // 2
        libABFE498B_gf_AP_Triggers_Zerg_unlockDevouringOne, // 3
        libABFE498B_gf_AP_Triggers_Zerg_unlockHunterKiller, // 4
        libABFE498B_gf_AP_Triggers_Zerg_unlockTorrasque, // 5
        libABFE498B_gf_AP_Triggers_Zerg_unlockHunterling, // 6
        libABFE498B_gf_AP_Triggers_Zerg_unlockYggdrasil, // 7
        libABFE498B_gf_AP_Triggers_Zerg_unlockMercRoach, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergEvolutionPit (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ZerglingReconstitution, // 0
        libABFE498B_gf_AP_Triggers_Zerg_OverlordImprovedOverlord, // 1
        libABFE498B_gf_AP_Triggers_Zerg_AutomatedExtractor, // 2
        libABFE498B_gf_AP_Triggers_Zerg_TwinDrones, // 3
        libABFE498B_gf_AP_Triggers_Zerg_MalignantCreep, // 4
        libABFE498B_gf_AP_Triggers_Zerg_VespeneEfficiency, // 5
        libABFE498B_gf_AP_Triggers_Zerg_OverlordVentralSacs, // 6
        libABFE498B_gf_AP_Triggers_Zerg_OverlordGenerateCreep, // 7
        libABFE498B_gf_AP_Triggers_Zerg_OverlordAntennae, // 8
        libABFE498B_gf_AP_Triggers_Zerg_OverlordPneumatizedCarapace, // 9
        libABFE498B_gf_AP_Triggers_Zerg_CreepStomach, // 10
        libABFE498B_gf_AP_Triggers_Zerg_ExcavatingClaws, // 11
        libABFE498B_gf_AP_Triggers_Zerg_HiveClusterMaturation, // 12
        libABFE498B_gf_AP_Triggers_Zerg_MacroscopicRecuperation, // 13
        libABFE498B_gf_AP_Triggers_Zerg_BioMechanicalStockpiling, // 14
        libABFE498B_gf_AP_Triggers_Zerg_unlockZergBroodlingPacking, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockZergProgressiveUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Zerg_ProgressiveAutomatedMitosis, // 0
        libABFE498B_gf_AP_Triggers_Zerg_ProgressiveFungalSnare, // 2
        libABFE498B_gf_AP_Triggers_Zerg_AberrationProgressiveBanelingLaunch, // 4
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 14
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 16
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 18
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 22
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 24
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 26
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 28
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockAiurZealot, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerShakuras, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarAiur, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarShakuras, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalAiur, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockColossusPurifier, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixAiur, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayShakuras, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierAiur, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockObserver, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockCenturion, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentinel, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicant, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockInstigator, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockSlayer, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryAiur, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizer, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockHavoc, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockSignifier, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockAscendant, // 19
        libABFE498B_gf_AP_Triggers_Protoss_unlockAvenger, // 20
        libABFE498B_gf_AP_Triggers_Protoss_unlockBloodHunter, // 21
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoon, //22
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchon, //23
        libABFE498B_gf_AP_Triggers_Protoss_unlockAdept, //24
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrism, //25
        libABFE498B_gf_AP_Triggers_Protoss_unlockAnnihilator, //26
        libABFE498B_gf_AP_Triggers_Protoss_unlockVanguard, //27
        libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalker, //28
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaver //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossUnits2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptor, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockMirage, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsair, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyer, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockScout, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempest, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockTaldarimMothership, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiter, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockOracle, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalwart, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpRay, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringer, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockSkylord, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockPurger, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockSkirmisher, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockAiurMothership, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockPurifierMothership, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossBuildings (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhotonCannon, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockKhaydarinMonolith, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockShieldBattery, // 2
        ap_triggers_PlayerConsumer_sig, // 3
        ap_triggers_PlayerConsumer_sig, // 4
        ap_triggers_PlayerConsumer_sig, // 5
        ap_triggers_PlayerConsumer_sig, // 6
        ap_triggers_PlayerConsumer_sig, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossProgressiveUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockProgressiveProxyPylon, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockProgressiveWarpRelocate, // 2
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 4
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 6
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 8
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 10
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 12
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 14
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 16
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 18
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 22
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 24
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 26
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 28
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossSpearOfAdun (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockChronoSurge, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockPylonOvercharge, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalStrike, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockTemporalField, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockSolarLance, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockMassRecall, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockShieldOvercharge, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockDeployFenix, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockPurifierBeam, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockTimeStop, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockSolarBombardment, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossSolariteCore (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockMatrixOverload, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockQuatro, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockNexusOvercharge, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalAssimilators, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpHarmonization, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockGuardianShell, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockReconstructionBeam, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockOverwatch, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockSuperiorWarpGates, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockEnhancedTargeting, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockOptimizedOrdnance, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockKhalaiIngenuity, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockAmplifiedAssimilators, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processWeaponArmorUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockGroundWeapons, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockGroundArmor, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockShields, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockAirWeapons, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockAirArmor, // 16
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig, // 20
        ap_triggers_PlayerUpgradeLevelBiConsumer_sig // 24
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossForge1 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantBloodShields, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantSoulAugmentation, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantShieldRegeneration, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptShockwave, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptResonatingGlaives, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptPhaseBulwark, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerFamilyDisintegratingParticles, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerFamilyParticleReflection, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonHighImpactPhaseDisruptors, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonTrillicCompressionSystems, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonSingularityCharge, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonEnhancedStriderServos, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockScoutCombatSensorArray, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockScoutApialSensors, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockScoutGraviticThrusters, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockScoutAdvancedPhotonBlasters, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempestTectonicDestabilizers, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempestQuanticReactor, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempestGravitySling, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixMirageIonicWavelengthFlux, // 19
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixMirageAnionPulseCrystals, // 20
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairStealthDrive, // 21
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairArgusJewel, //22
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairSustainingDisruption, //23
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairNeutronShields, //24
        libABFE498B_gf_AP_Triggers_Protoss_unlockOracleStealthDrive, //25
        libABFE498B_gf_AP_Triggers_Protoss_unlockOracleStasisCalibration, //26
        libABFE498B_gf_AP_Triggers_Protoss_unlockOracleTemporalAccelerationBeam, //27
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterChronostaticReinforcement, //28
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterKhaydarinCore //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossForge2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterSpacetimeAnchor, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterResourceEfficiency, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterEnhancedCloakField, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierGravitonCatapult, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierHullOfPastGlories, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayFamilyFluxVanes, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyerResourceEfficiency, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismGraviticDrive, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismPhaseBlaster, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismWarConfiguration, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockObserverGraviticBoosters, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockObserverSensorArray, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaverScarabDamage, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaverSolaritePayload, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaverReaverCapacity, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaverResourceEfficiency, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardAgonyLaunchers, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardMatterDispersion, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalFamilySingularityCharge, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalFamilyAdvancedTargetingMechanics, // 19
        libABFE498B_gf_AP_Triggers_Protoss_unlockColossusPacificationProtocols, // 20
        libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalkerRapidPowerCycling, // 21
        libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalkerEyeOfWrath, //22
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyShroudOfAdun, //23
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyShadowGuardTraining, //24
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyBlink, //25
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyResourceEfficiency, //26
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarDarkArchonMeld, //27
        libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarSignifierUnshackledPisonicStorm, //28
        libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarSignifierHallucination //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossForge3 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarSignifierKhaydarinAmulet, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockArchonHighArchon, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonFeedback, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonMaelstrom, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonArgusTalisman, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantPowerOverwhelming, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantPowerChaoticAttunement, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantBloodAmulet, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryFamilyCloakingModule, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryFamilyShieldBatteryRapidRecharging, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryForceField, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryHallucination, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizerReclamation, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizerForgedChassis, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockHavocDetectWeakness, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockHavocBloodshardResonance, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockZealotFamilyLegEnhancements, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockZealotFamilyShieldCapacity, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockOracleBosonicCore, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockScoutResourceEfficency, // 19
        libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalFamilyDisruptorDispersion, // 20
        libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorPermanentCloak, //21,
        libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorPerfectedPower, //22
        libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorRestrainedDestruction, //23
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempestInterplanetaryRange, //24
        libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringerAntiSurfaceCountermeasures, //25
        libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringerEnhancedShieldGenerator, //26
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartHighVoltageCapacitors, //27
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartStrutEnhancements, //28
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartStabilizedElectrodes //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossForge4 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartLatticedShields, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockArchonFloat, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockArchonSiphon, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockArchonSuicide, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockArchonWeaponUpgrade, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantZenithPitch, // 5
<<<<<<< HEAD
        libABFE498B_gf_AP_Triggers_Protoss_unlockIntercessorChronoclysm, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockIntercessorEntropicReversal, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimSummonDeathFleet, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimHungerForSlaughter, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierPurifiedEmbers, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierPlanetCracker, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurAstralRestoration, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurRecursivePhotons, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTimeField, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipMassRecall, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipNexusRecall, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipFighterHangar, // 17
=======
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimSummonDeathFleet, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimHungerForSlaughter, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierPurifiedEmbers, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierPlanetCracker, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurAstralRestoration, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurRecursivePhotons, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTimeField, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipMassRecall, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipNexusRecall, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipFighterHangar, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
>>>>>>> 924b3a506 (forgot hangar item)
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, //21,
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossWarCouncil (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockZealotWhirlwind, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockCenturionResourceEfficiency, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentinelResourceEfficiency, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerPhaseReactor, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonPhalanxSuit, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockInstigatorResourceEfficiency, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptDisruptiveTransfer, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockSlayerPhaseBlink, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockAvengerKryhasCloak, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarLesserShadowFury, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarGreaterShadowFury, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockBloodHunterBrutalEfficiency, // 11
        libABFE498B_gf_AP_Triggers_Protoss_unlockSentryDoubleShieldRecharge, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizerMobileChronoBeam, // 13
        libABFE498B_gf_AP_Triggers_Protoss_unlockHavocEnduringSight, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarPlasmaSurge, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockSignifierFeedback, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantAbilityEfficiency, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonIndomitableWill, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalImprovedBarrier, // 19
        libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardRapidfireCannon, // 20
        libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardFusionMortars, // 21
        libABFE498B_gf_AP_Triggers_Protoss_unlockAnnihilatorAerialTracking, //22
        libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartArcInducers, //23
        libABFE498B_gf_AP_Triggers_Protoss_unlockColossusFireLance, //24
        libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalkerAerialTracking, //25
        libABFE498B_gf_AP_Triggers_Protoss_unlockReaverKhalaiReplicators, //26
        libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorRestructuredThrusters, //27
        libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismWarpRefraction, //28
        libABFE498B_gf_AP_Triggers_Protoss_unlockObserverScopophobia //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockProtossWarCouncil2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixDoubleGravitonBeam, // 0
        libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairNetworkDisruption, // 1
        libABFE498B_gf_AP_Triggers_Protoss_unlockMirageGravitonBeam, // 2
        libABFE498B_gf_AP_Triggers_Protoss_unlockSkirmisherPeerContempt, // 3
        libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayPrismaticRange, // 4
        libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyerReforgedBloodshardCore, // 5
        libABFE498B_gf_AP_Triggers_Protoss_unlockIntercessorLiminalMagnifiers, // 6
        libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringerSolariteLens, // 7
        libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierAiurRepairDrones, // 8
        libABFE498B_gf_AP_Triggers_Protoss_unlockSkylordHyperjump, // 9
        libABFE498B_gf_AP_Triggers_Protoss_unlockTriremeSolarBeam, // 10
        libABFE498B_gf_AP_Triggers_Protoss_unlockTempestDisintegration, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterAbilityEfficiency, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimIntegratedPower, // 15
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierMobilePowerField, // 16
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurTemporalDestabilization, // 17
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipCoreAiurAdvancedRepulsion, // 18
        libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipCorePurifierControlledBurn, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, // 22
        ap_triggers_PlayerConsumer_sig, // 23
        ap_triggers_PlayerConsumer_sig, // 24
        ap_triggers_PlayerConsumer_sig, // 25
        ap_triggers_PlayerConsumer_sig, // 26
        ap_triggers_PlayerConsumer_sig, // 27
        ap_triggers_PlayerConsumer_sig, // 28
        ap_triggers_PlayerConsumer_sig // 29
    );
}

bool libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock () {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_isBuild == true)) {
        if (((libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 2) || (libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 3))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if (((libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 1) || (libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 3))) {
            return true;
        }
        else {
            return false;
        }
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Marine", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedic (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasMedic[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasAdvancedMedicFacilities[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Medic", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Firebat", true);
    TechTreeUnitAllow(lp_player, "AP_FirebatOptimizedLogistics", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasMarauder[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleMarauder", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Marauder", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Reaper", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Hellion", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVulture (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Vulture", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondback (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Diamondback", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasGoliath[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleGoliath", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Goliath", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasSiegeTank[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleSiegeTank", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_SiegeTank", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivac (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Medivac", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraith (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasWraith[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleWraith", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Wraith", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockViking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_VikingFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBanshee (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasBanshee[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleBanshee", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Banshee", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasBattlecruiser[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleBattlecruiser", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    TechTreeUnitAllow(lp_player, "AP_Battlecruiser", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HaveGhostOrSpectreOrThorNuke", 1);
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_Ghost", true);
    TechTreeUnitAllow(lp_player, "AP_GhostResourceEfficiency", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectre (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HaveGhostOrSpectreOrThorNuke", 1);
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_Spectre", true);
    TechTreeUnitAllow(lp_player, "AP_SpectreResourceEfficiency", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Armory", true);
    TechTreeUnitAllow(lp_player, "AP_Thor", true);
    TechTreeUnitAllow(lp_player, "AP_ThorBuild", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRaven (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasRaven[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleRaven", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Raven", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVessel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_ScienceVessel", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Predator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHercules (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalFusionModuleHercules", c_techCountCompleteOnly) == 0)) {
        TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    }

    TechTreeUnitAllow(lp_player, "AP_Hercules", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Liberator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrie (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_ValkyrieSCBW", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_WidowMine", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCyclone (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasCyclone[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    if ((TechTreeUpgradeCount(lp_player, "AP_InternalizedTechModuleCyclone", c_techCountCompleteOnly) >= 1)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Cyclone", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHERC (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_HERC", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWarhound (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_WarHound", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    TechTreeUnitAllow(lp_player, "AP_TrooperMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPrideOfAugustgrad (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_StarportMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    TechTreeUnitAllow(lp_player, "AP_BattlecruiserMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSkyFury (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_StarportMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_VikingMengskFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShockDivision (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_FactoryMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_SiegeTankMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBlackhammer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_FactoryMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_Armory", true);
    TechTreeUnitAllow(lp_player, "AP_ThorMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockAegisGuard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_BarracksMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_MarauderMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockEmperorsShadow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HaveGhostMengsk", 1);
    TechTreeUnitAllow(lp_player, "AP_BarracksMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_GhostMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_GhostMengskResourceEfficiency", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSonOfKorhal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_BarracksMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_MarineMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBulwarkCompany (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_FactoryMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_GoliathMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFieldResponseTheta (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_BarracksMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_MedicMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockEmperorsGuardian (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_StarportMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_LiberatorMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNightHawk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_StarportMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_WraithMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNightWolf (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_StarportMengsk", true);
    TechTreeUnitAllow(lp_player, "AP_BansheeMengsk", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWarPigs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_WarPig", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantry", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevilDogs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DevilDog", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantry", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHammerSecurities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_HammerSecurity", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantry", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpartanCompany (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_SpartanCompany", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundVehicles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeBreakers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_SiegeBreaker", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundVehicles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHelsAngel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_HelsAngelFighter", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarships", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDuskWings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DuskWing", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarships", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockJacksonsRevenge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DukesRevenge", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarships", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSkibisAngel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercMedic", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantry", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDeathHead (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercReaper", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundInfantry", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWingedNightmare (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercWraith", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarships", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRaidLiberator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercLiberator", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarships", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBrynhild (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_BrynhildFighter", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundStarships", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockJotun (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_MercThor", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercCompoundVehicles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Bunker", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_MissileTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSensorTower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_SensorTower", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPerditionTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_PerditionTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPsiDisrupter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_PsiDisruptor", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHiveMindEmulator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_HiveMindEmulator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_DevastatorTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVAdvancedConstruction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedConstruction", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVDualFusionWelders (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DualFusionWelders", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVHostileEnvironmentAdaptation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HostileEnvironmentAdaptation", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVConstructionJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SCVCliffJump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineCombatShield (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CombatShield", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarineStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackMarine", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineMagRailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdvancedMedicFacilities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedMedicTraining", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasAdvancedMedicFacilities[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasMedic[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicStabilizerMedpacks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StabilizerMedPacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicRestoration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedicSCBWRestorationResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicOpticalFlare (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedicSCBWOpticFlareResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsMedic", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdaptiveMedpacks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdaptiveMedPacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicNanoProjectors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorMedicRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatIncineratorGauntlets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BearclawNozzles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatJuggernautPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatJuggernautPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackFirebat", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsFirebat", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatInfernalPreIgniter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatInfernalPreIgniter", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatNanoProjectors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorFirebatRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderConcussiveShells (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_JackhammerConcussionGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarauderLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarauderStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackMarauder", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemMarauder", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderMagRailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsMarauder", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleMarauder", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasMarauder[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderJuggernautPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_JuggernautPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperU238Rounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperU238Rounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperG4Clusterbomb (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ClusterBomb", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackReaper", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperAdvancedCloakingField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperCombatDrugs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CombatDrugs", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperJetPackOverdrive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHReaperFlight", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperResorceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionTwinLinkedFlamethrower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TwinLinkedFlameThrowers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionThermiteFilaments (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellionCampaignInfernalPreIgniter", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionHellbatAspect (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatAspect", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosHellion", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildHellion", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellbatJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HoverHellbat", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TurboChargedEngines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellbatProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackHellbat", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionInfernalPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatHellArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureProgressiveReplenishableMagazine (int lp_player, int lp_level) {
    // Variable Declarations
    unit lv_unit;
    int lv_upgradeLevels;

    // Automatic Variable Declarations
    unitgroup auto1005B686_g;
    int auto1005B686_u;

    // Variable Initialization

    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NanoConstructor", 1);
        if ((lp_level >= 2)) {
            lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_ReplenishSpiderMineFree", c_techCountQueuedOrBetter);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReplenishSpiderMineFree", 1);
            if ((lv_upgradeLevels == 0)) {
                auto1005B686_g = UnitGroup("AP_Vulture", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto1005B686_u = UnitGroupCount(auto1005B686_g, c_unitCountAll);
                for (;; auto1005B686_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto1005B686_g, auto1005B686_u);
                    if (lv_unit == null) { break; }
                    UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("AP_MakeVultureSpiderMines", 0), true), c_orderQueueAddToFront);
                }
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureIonThrusters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VultureIonThrusters", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VultureAutoLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureAutoRepair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VultureAutoRepair", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineCerberusMine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CerberusMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpiderMineHighExplosiveMunition (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SpiderMineDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathMultiLockWeaponsSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultilockTargetingSystems", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathAresClassTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AresClassWeaponsSystem", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_SwannCommanderVehicleWeaponRange", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BrynhildRangeDoubleUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GoliathJumpJet", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildGoliath", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GoliathShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyGoliath", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleGoliath", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasGoliath[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackIonThrusters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DiamondbackIonThrusters", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackProgressiveTriLithiumPowerCell (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TriLithiumPowerCells", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TungstenSpikes", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackHyperfluxor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_Hyperfluxor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackBurstCapacitors (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoDFE61BDD_g;
    int autoDFE61BDD_u;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BurstCapacitors", 1);
    autoDFE61BDD_g = UnitGroup("AP_Diamondback", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFE61BDD_u = UnitGroupCount(autoDFE61BDD_g, c_unitCountAll);
    for (;; autoDFE61BDD_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoDFE61BDD_g, autoDFE61BDD_u);
        if (lv_currentUnit == null) { break; }
        UnitBehaviorAdd(lv_currentUnit, "AP_BurstCapacitorsDamageBuff", lv_currentUnit, 1);
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackResourceEfficinecy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsDiamondback", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankMaelstromRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MaelstromRounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedBlast (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankShapedBlast", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HoverSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankGraduatingRange (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_siegedTanks;

    // Automatic Variable Declarations
    unitgroup autoA89E46A4_g;
    int autoA89E46A4_u;

    // Variable Initialization
    lv_siegedTanks = UnitGroupEmpty();

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankSiegeModeProgressiveRangeIncease", 1);
    lv_siegedTanks = UnitGroup("AP_SiegeTankSieged", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_siegedTanks, UnitGroup("AP_SiegeTankSiegedTransportable", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_siegedTanks, UnitGroup("AP_SiegeBreakerSieged", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_siegedTanks, UnitGroup("AP_SiegeBreakerSiegedTransportable", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_siegedTanks, UnitGroup("AP_InfestedSiegeBreakerSieged", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_siegedTanks, UnitGroup("AP_InfestedSiegeBreakerSiegedTransportable", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoA89E46A4_g = lv_siegedTanks;
    autoA89E46A4_u = UnitGroupCount(autoA89E46A4_g, c_unitCountAll);
    for (;; autoA89E46A4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA89E46A4_g, autoA89E46A4_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "AP_SiegeTankSiegeModeProgressiveRangeIncease") == false)) {
            UnitBehaviorAdd(lv_unit, "AP_SiegeTankSiegeModeProgressiveRangeIncease", lv_unit, 1);
        }

    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankAdvancedSiegeTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorImprovedSiegeMode", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleSiegeTank", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasSiegeTank[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencySiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankProgressiveTransportHook (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_medivac;
    unit lv_cargoUnit;

    // Automatic Variable Declarations
    unitgroup auto8E8C9BAC_g;
    int auto8E8C9BAC_u;
    unitgroup auto181876D5_g;
    int auto181876D5_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_MedivacSiegeTankAirlift", c_techCountQueuedOrBetter);
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankTransportHook", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacSiegeTankAirlift", 1);
            if ((lv_upgradeLevels == 0)) {
                auto8E8C9BAC_g = UnitGroup("AP_Medivac", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto8E8C9BAC_u = UnitGroupCount(auto8E8C9BAC_g, c_unitCountAll);
                for (;; auto8E8C9BAC_u -= 1) {
                    lv_medivac = UnitGroupUnitFromEnd(auto8E8C9BAC_g, auto8E8C9BAC_u);
                    if (lv_medivac == null) { break; }
                    auto181876D5_g = UnitCargoGroup(lv_medivac);
                    auto181876D5_u = UnitGroupCount(auto181876D5_g, c_unitCountAll);
                    for (;; auto181876D5_u -= 1) {
                        lv_cargoUnit = UnitGroupUnitFromEnd(auto181876D5_g, auto181876D5_u);
                        if (lv_cargoUnit == null) { break; }
                        if ((UnitGetType(lv_cargoUnit) == "AP_SiegeTankSiegedTransportable")) {
                            UnitBehaviorAdd(lv_medivac, "AP_MedivacSiegeTankAirlift", lv_cargoUnit, 1);
                        }
                        else if ((UnitGetType(lv_cargoUnit) == "AP_SiegeBreakerSiegedTransportable")) {
                            UnitBehaviorAdd(lv_medivac, "AP_MedivacMercSiegeTankAirlift", lv_cargoUnit, 1);
                        }
                        else if ((UnitGetType(lv_cargoUnit) == "AP_InfestedSiegeBreakerSiegedTransportable")) {
                            UnitBehaviorAdd(lv_medivac, "AP_MedivacInfestedSiegeBreakerAirlift", lv_cargoUnit, 1);
                        }
                        else if ((UnitGetType(lv_cargoUnit) == "AP_SiegeTankMengskSiegedTransportable")) {
                            UnitBehaviorAdd(lv_medivac, "AP_MedivacMengskSiegeTankAirlift", lv_cargoUnit, 1);
                        }
                    }
                }
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankEnhancedCombustionEngines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankEnhancedCombustionEngines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OptimizedLogisticsPredator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCloak (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyPredator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorCharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PredatorCharge", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorVespeneSynthesis (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PredatorVespeneSynthesis", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredatorAdaptiveDefenses (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PredatorAdaptiveDefenses", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusPredator", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus", c_techCountCompleteOnly));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusPredator100Stack", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus100Stack", c_techCountCompleteOnly));
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidDeploymentTube (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacRapidDeployment", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedHealingAI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedHealingAI", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacExpandedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ExpandedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAfterburners (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacScatterVeil (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusMedivac", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus", c_techCountCompleteOnly));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusMedivac100Stack", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus100Stack", c_techCountCompleteOnly));
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedCloakingField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacPermanentCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidReignitionSystems (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacIncreaseSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyMedivac", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithProgressiveTomahawkPowerCells (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DynamicPowerRouting", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakWraith", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithDisplacementField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakDistortionField", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithAdvancedLaserTechnology (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WraithAdvancedLaserTechnology", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithTriggerOverride (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWraithFury", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleWraith", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasWraith[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyWraith", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingRipwaveMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HALORockets", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingPhobosClassWeaponsSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AresClassWeaponsSystemViking", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_SwannCommanderVehicleWeaponRange", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingRangeDoubleUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosViking", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingAntiMechanicalMunition (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingMagWeapon", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingShredderRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHVikingPiercingAttacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingWILDMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHVikingRockets", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingAesirTurbines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingMengskSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShockwaveMissileBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ClusterWarheads", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeProgressiveCrossSpectrumDampeners (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CrossSpectrumDampeners", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakBanshee", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeHyperflightRotors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemBanshee", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleBanshee", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasBanshee[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeAdvancedTargetingOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeAdvancedOptics", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeDistortionBlasters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeCloakedDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeRocketBarrage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeAirstrike", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserProgressiveMissilePods (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HurricaneMissiles", 1);
        libABFE498B_gf_AP_Triggers_Terran_prideOfAugustgradSpellcasterSetup(lp_player);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserAdvancedMissilePods", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserProgressiveDefensiveMatrix (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefensiveMatrix", 1);
        libABFE498B_gf_AP_Triggers_Terran_prideOfAugustgradSpellcasterSetup(lp_player);
        if ((TechTreeUpgradeCount(lp_player, "AP_BattlecruiserMengskSpellcaster", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "AP_BattlecruiserMengskStatusBarES", 1);
        }

        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserAdvancedDefensiveMatrix", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusBattlecruiser", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus", c_techCountCompleteOnly));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusBattlecruiser100Stack", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus100Stack", c_techCountCompleteOnly));
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserTacticalJump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TacticalJump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCloak (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyBattlecruiser", 1);
    libABFE498B_gf_AP_Triggers_Terran_prideOfAugustgradSpellcasterSetup(lp_player);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserATXLaserBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedWeaponryBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleBattlecruiser", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasBattlecruiser[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserBehemothPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserBehemothPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCovertOpsEngines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserCovertOpsEngines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserBehemothReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserBehemothReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserFieldAssistTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserRangeAura", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_prideOfAugustgradSpellcasterSetup (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoC181F086_g;
    int autoC181F086_u;
    unitgroup autoD912B5C6_g;
    int autoD912B5C6_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_BattlecruiserMengskSpellcaster", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BattlecruiserMengskSpellcaster", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsBattlecruiserMengsk", 1);
        if ((lv_upgradeLevels == 0)) {
            autoD912B5C6_g = UnitGroup("AP_BattlecruiserMengsk", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD912B5C6_u = UnitGroupCount(autoD912B5C6_g, c_unitCountAll);
            for (;; autoD912B5C6_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoD912B5C6_g, autoD912B5C6_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 150.0);
            }
        }

    }
    else {
        if ((lv_upgradeLevels == 0)) {
            autoC181F086_g = UnitGroup("AP_BattlecruiserMengsk", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC181F086_u = UnitGroupCount(autoC181F086_g, c_unitCountAll);
            for (;; autoC181F086_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoC181F086_g, autoC181F086_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
        }

    }
    if ((TechTreeUpgradeCount(lp_player, "AP_DefensiveMatrix", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "AP_BattlecruiserMengskStatusBarES", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockEmperorsShadowSovereignTacticalMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GhostMengskGuidedStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostOcularImplants (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OcularImplants", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostCriusSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakGhost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostEMPRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_EMP", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_GhostMengskEMPBig", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_GhostMengskEMPLongStun", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_GhostMengskEMPShortStun", 0), true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostLockdown (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GhostSCBWLockdownResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyGhost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectrePsionicLash (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltrasonicPulse", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreNyxClassCloakingModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakSpectre", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreImpalerRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImpalerRounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencySpectre", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThor330mmBarrageCannon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_330mmBarrageCannons", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveImmortalityProtocol (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MechanicalRebirth", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorImmortalityFree", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorProgressiveHighImpactPayload (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorMorph", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosThor", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorButtonWithASkullOnIt (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HaveGhostOrSpectreOrThorNuke", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorNuke", 1);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorLaserTargetingSystems (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemThor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorLargeScaleFieldConstruction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BuildThorBySCV", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorRapidReload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorRapidReload", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenBioMechanicalRepairDrone (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenBioMechanicalRepairDrone", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenRailgunTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenHunterSeekerWeapon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedWeaponryRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenInterferenceMatrix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenInterferenceMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenAntiArmorMissile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenAntiArmorMissile", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenDurableMaterials (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DurableMaterials", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselEMPShockwave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselSCBWEMPShockwaveResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselDefensiveMatrix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselDefensiveMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselImprovedNanoRepair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselFreeRepair", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselAdvancedAISystems (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselResearchAdditionalNano", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVesselTacticalJump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScienceVesselTacticalJump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldAccelerators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneLockOnDamageUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagFieldLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneTargetingOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneLockOnRangeUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneRapidFireLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneRapidFireLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyCyclone", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneInternalTechModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalizedTechModuleCyclone", 1);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasCyclone[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorAdvancedBallistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorAGRangeUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorRaidArtillery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorSiegeProtocol", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCloak (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto3751A573_g;
    int auto3751A573_u;
    unitgroup autoDDCE3E73_g;
    int autoDDCE3E73_u;
    unitgroup auto71AE7102_g;
    int auto71AE7102_u;
    unitgroup auto605CC692_g;
    int auto605CC692_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyLiberator", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyLiberator", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsLiberator", 1);
        if ((lv_upgradeLevels == 0)) {
            auto71AE7102_g = UnitGroup("AP_Liberator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto71AE7102_u = UnitGroupCount(auto71AE7102_g, c_unitCountAll);
            for (;; auto71AE7102_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto71AE7102_g, auto71AE7102_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 150.0);
            }
            auto605CC692_g = UnitGroup("AP_LiberatorAG", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto605CC692_u = UnitGroupCount(auto605CC692_g, c_unitCountAll);
            for (;; auto605CC692_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto605CC692_g, auto605CC692_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 150.0);
            }
        }

    }
    else {
        if ((lv_upgradeLevels == 0)) {
            auto3751A573_g = UnitGroup("AP_Liberator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3751A573_u = UnitGroupCount(auto3751A573_g, c_unitCountAll);
            for (;; auto3751A573_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto3751A573_g, auto3751A573_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
            autoDDCE3E73_g = UnitGroup("AP_LiberatorAG", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDDCE3E73_u = UnitGroupCount(autoDDCE3E73_g, c_unitCountAll);
            for (;; autoDDCE3E73_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoDDCE3E73_g, autoDDCE3E73_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
        }

    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorGuerillaMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorGuerillaMissiles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCompressedRocketFuel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorImprovedAARange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDrillingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DrillClaws", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineConcealment (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImprovedConcealment", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineBlackMarketLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWidowMineBurrowedRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineExecutionerMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWidowMineDeathBlossom", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyWidowMine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDemolitionArmaments (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WidowMineDemolitionArmaments", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieEnhancedCluserLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieEnhancedClusterLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieFlechetteMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieATSRockets", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieAfterburners (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieLaunchingVectorCompensator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieAntiGravityDrive", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHerculesInternalFusionModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InternalFusionModuleHercules", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHerculesTacticalJump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HerculesHyperjump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWarhoundResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyWarhound", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWarhoundReinforcedPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WarhoundReinforcedPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHERCResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyHERC", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHERCJuggernautPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HERCJuggernautPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHERCKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HERCLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHERCGrapplePull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HERCGrapplePull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperB2HighCalLMG (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TrooperMengskImproved", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperHailstormLauncher (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TrooperMengskAA", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperCPO7SalamanderFlamethrower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TrooperMengskFlamethrower", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperAdvancedAlloys (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TrooperMengskWeaponDrop", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDominionTrooperOptimizedLogistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastBuildTrooper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerProjectileAccelerator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProjectileAccelerators", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerNeosteelBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelFrame", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerShrikeTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShrikeTurret", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasShrikeTurret[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasFortifiedBunker[lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerFortifiedBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FortifiedBunkerCarapace", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasFortifiedBunker[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasShrikeTurret[lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretTitaniumHousing (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReinforcedSuperstructure", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretHellstormBatteries (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HailstormMissilePods", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretResourceEfficency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MissileTurretResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CommandCenterReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterPlanetaryFortress (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToPlanetaryFortress", 0), true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterExtraSupplies (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalCommand(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SupplyDrop", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterScannerSweep (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalCommand(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScannerSweep", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterMULE (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalCommand(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MULE", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressProgressiveAugumentedThrusters (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressLiftOff", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressWeapon", 1);
            if ((TechTreeUpgradeCount(lp_player, "AP_PlanetaryFortressAirAttack", c_techCountCompleteOnly) >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressAirAttackFlying", 1);
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressAdvancedTargeting (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressAirAttack", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_PlanetaryFortressWeapon", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PlanetaryFortressAirAttackFlying", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockPlanetaryFortressOrbitalModule (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_upgradeLevelsPlanetary;

    // Automatic Variable Declarations
    unitgroup autoD186EDBE_g;
    int autoD186EDBE_u;
    unitgroup autoE29DD9EC_g;
    int autoE29DD9EC_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevelsPlanetary = TechTreeUpgradeCount(lp_player, "AP_OrbitalRelayPlanetary", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalRelayPlanetary", 1);
    if ((lv_upgradeLevelsPlanetary == 0)) {
        autoD186EDBE_g = UnitGroup("AP_PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD186EDBE_u = UnitGroupCount(autoD186EDBE_g, c_unitCountAll);
        for (;; autoD186EDBE_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoD186EDBE_g, autoD186EDBE_u);
            if (lv_currentUnit == null) { break; }
            UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
        }
        autoE29DD9EC_g = UnitGroup("AP_PlanetaryFortressFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE29DD9EC_u = UnitGroupCount(autoE29DD9EC_g, c_unitCountAll);
        for (;; autoE29DD9EC_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoE29DD9EC_g, autoE29DD9EC_u);
            if (lv_currentUnit == null) { break; }
            UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
        }
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurretSlow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DevastatorTurretSlow", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurretPunisherGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DevastatorTurretPunisherGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevastatorTurretResourceEfficency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DevastatorTurretResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFusionCoreFusionReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FusionCoreFusionReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockInfantryArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel4", true);
                        TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel5", true);
                            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranInfantryArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockInfantryWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel4", true);
                        TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel5", true);
                            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranInfantryWeaponLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVehicleArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Factory", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel4", true);
                        TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel5", true);
                            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranVehicleArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVehicleWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Factory", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel4", true);
                        TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel5", true);
                            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranVehicleArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShipArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Starport", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel4", true);
                        TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel5", true);
                            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranShipArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShipWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel3", 1);
                        if ((lp_level >= 4)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel4", 1);
                            if ((lp_level >= 5)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel5", 1);
                            }

                        }

                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Starport", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel4", true);
                        TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel5", true);
                            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranShipWeaponLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveFireSuppresionSystem (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FireSuppressionSystems", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FireSuppressionSystemsUpgraded", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockUltraCapacitors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltraCapacitors", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] = true;
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel1", "AP_TerranInfantryWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel2", "AP_TerranInfantryWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel3", "AP_TerranInfantryWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel4", "AP_TerranInfantryWeaponsUltraCapacitorsLevel4");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel5", "AP_TerranInfantryWeaponsUltraCapacitorsLevel5");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel1", "AP_TerranVehicleWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel2", "AP_TerranVehicleWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel3", "AP_TerranVehicleWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel4", "AP_TerranVehicleWeaponsUltraCapacitorsLevel4");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel5", "AP_TerranVehicleWeaponsUltraCapacitorsLevel5");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel1", "AP_TerranShipWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel2", "AP_TerranShipWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel3", "AP_TerranShipWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel4", "AP_TerranShipWeaponsUltraCapacitorsLevel4");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel5", "AP_TerranShipWeaponsUltraCapacitorsLevel5");
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVanadiumPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VanadiumPlating", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] = true;
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel1", "AP_TerranInfantryArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel2", "AP_TerranInfantryArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel3", "AP_TerranInfantryArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel4", "AP_TerranInfantryArmorsVanadiumPlatingLevel4");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel5", "AP_TerranInfantryArmorsVanadiumPlatingLevel5");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel1", "AP_TerranVehicleArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel2", "AP_TerranVehicleArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel3", "AP_TerranVehicleArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel4", "AP_TerranVehicleArmorsVanadiumPlatingLevel4");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel5", "AP_TerranVehicleArmorsVanadiumPlatingLevel5");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel1", "AP_TerranShipArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel2", "AP_TerranShipArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel3", "AP_TerranShipArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel4", "AP_TerranShipArmorsVanadiumPlatingLevel4");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel5", "AP_TerranShipArmorsVanadiumPlatingLevel5");
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalDepots (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SupplyDepotDrop", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMicroFiletring (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MicroFiltering", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockAutomatedRefinery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AutoHarvester", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockTechReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TechReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCellularReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactors", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyLiberator", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsLiberator", 1);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyPredator", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsPredator", 1);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_BattlecruiserMengskSpellcaster", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsBattlecruiserMengsk", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveRegenerativeBioSteel (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteel", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteelLevel2", 1);
            if ((lp_level >= 3)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteelLevel3", 1);
            }

        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockStructureArmor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranBuildingArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHiSecAutoTracking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HiSecAutoTracking", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockAdvancedOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SwannCommanderVehicleWeaponRange", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_AresClassWeaponsSystemViking", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingRangeDoubleUpgrade", 1);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_AresClassWeaponsSystem", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BrynhildRangeDoubleUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockRogueForces (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RogueForces", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMechanicalKnowHow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MechanicalKnowHow", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMercenaryMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MercenaryMunitions", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFastDelivery (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_upgradeLevels;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_FastDelivery", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FastDelivery", 1);
    if ((lv_upgradeLevels == 0)) {
        lib15EF4C78_gf_AP_Player_ClearMercenaryCooldowns(lp_player);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockRapidReinforcement (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_upgradeLevels;
    string lv_cooldownLink;

    // Automatic Variable Declarations
    const int auto270CB00B_ae = lib15EF4C78_gv_aP_Player_MERC_COOLDOWN_LINK_SIZE;
    const int auto270CB00B_ai = 1;

    // Variable Initialization
    lv_cooldownLink = "";

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_RapidReinforcement", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RapidReinforcement", 1);
    if ((lv_upgradeLevels == 0)) {
        lv_index = 0;
        for ( ; ( (auto270CB00B_ai >= 0 && lv_index <= auto270CB00B_ae) || (auto270CB00B_ai < 0 && lv_index >= auto270CB00B_ae) ) ; lv_index += auto270CB00B_ai ) {
            lv_cooldownLink = lib15EF4C78_gv_aP_Player_MercCooldownLinks[lv_index];
            PlayerAddCooldown(lp_player, lv_cooldownLink, -60.0);
        }
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGhostVisor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetGhostVisor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaRangefinderOculus (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetRangefinderOculus", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaDomination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetDominationVisor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaProgressiveCloak (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaCloak", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorStealthSuit", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaBlink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorBlinkSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaApolloSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorApolloInfantrySuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaArmoredSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmoredSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaJumpSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorJumpSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponC20ACanisterRifle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponCanisterRifle", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponHellfireShotgun (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponHellfireShotgun", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponPlasmaRifle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponPlasmaRifle", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponMonomolecularBlade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponPsiBlade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponBlazefireBlade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponBlazefireBlade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetStimInfusion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackNova", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetPulseGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetPulseGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetFlashbangGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetFlashBangGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetIonicForceField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetPersonalDefensiveMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetHoloDecoy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetHolographicDecoy", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaNuke (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaNuke", 1);
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalCommand (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_upgradeLevels;

    // Automatic Variable Declarations
    unitgroup autoA3639882_g;
    int autoA3639882_u;
    unitgroup auto27613456_g;
    int auto27613456_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_OrbitalRelay", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalRelay", 1);
    if ((lv_upgradeLevels == 0)) {
        autoA3639882_g = UnitGroup("AP_CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA3639882_u = UnitGroupCount(autoA3639882_g, c_unitCountAll);
        for (;; autoA3639882_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoA3639882_g, autoA3639882_u);
            if (lv_currentUnit == null) { break; }
            UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
        }
        auto27613456_g = UnitGroup("AP_CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto27613456_u = UnitGroupCount(auto27613456_g, c_unitCountAll);
        for (;; auto27613456_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto27613456_g, auto27613456_u);
            if (lv_currentUnit == null) { break; }
            UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
        }
    }

}

void libABFE498B_gf_AP_Triggers_clearTerranTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Marine", false);
    TechTreeUnitAllow(lp_player, "AP_Medic", false);
    TechTreeUnitAllow(lp_player, "AP_Firebat", false);
    TechTreeUnitAllow(lp_player, "AP_FirebatOptimizedLogistics", false);
    TechTreeUnitAllow(lp_player, "AP_Marauder", false);
    TechTreeUnitAllow(lp_player, "AP_Reaper", false);
    TechTreeUnitAllow(lp_player, "AP_Hellion", false);
    TechTreeUnitAllow(lp_player, "AP_Vulture", false);
    TechTreeUnitAllow(lp_player, "AP_Goliath", false);
    TechTreeUnitAllow(lp_player, "AP_Diamondback", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeTank", false);
    TechTreeUnitAllow(lp_player, "AP_Medivac", false);
    TechTreeUnitAllow(lp_player, "AP_Wraith", false);
    TechTreeUnitAllow(lp_player, "AP_VikingFighter", false);
    TechTreeUnitAllow(lp_player, "AP_Banshee", false);
    TechTreeUnitAllow(lp_player, "AP_Battlecruiser", false);
    TechTreeUnitAllow(lp_player, "AP_Ghost", false);
    TechTreeUnitAllow(lp_player, "AP_GhostResourceEfficiency", false);
    TechTreeUnitAllow(lp_player, "AP_Spectre", false);
    TechTreeUnitAllow(lp_player, "AP_SpectreResourceEfficiency", false);
    TechTreeUnitAllow(lp_player, "AP_Thor", false);
    TechTreeUnitAllow(lp_player, "AP_ThorBuild", false);
    TechTreeUnitAllow(lp_player, "AP_Raven", false);
    TechTreeUnitAllow(lp_player, "AP_ScienceVessel", false);
    TechTreeUnitAllow(lp_player, "AP_Predator", false);
    TechTreeUnitAllow(lp_player, "AP_Hercules", false);
    TechTreeUnitAllow(lp_player, "AP_Liberator", false);
    TechTreeUnitAllow(lp_player, "AP_ValkyrieSCBW", false);
    TechTreeUnitAllow(lp_player, "AP_WidowMine", false);
    TechTreeUnitAllow(lp_player, "AP_Cyclone", false);
    TechTreeUnitAllow(lp_player, "AP_HERC", false);
    TechTreeUnitAllow(lp_player, "AP_WarHound", false);
    TechTreeUnitAllow(lp_player, "AP_VikingMengskFighter", false);
    TechTreeUnitAllow(lp_player, "AP_BattlecruiserMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeTankMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_ThorMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_MarauderMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_GhostMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_GhostMengskResourceEfficiency", false);
    TechTreeUnitAllow(lp_player, "AP_TrooperMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_MarineMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_GoliathMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_MedicMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_LiberatorMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_WraithMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_BansheeMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_WarPig", false);
    TechTreeUnitAllow(lp_player, "AP_DevilDog", false);
    TechTreeUnitAllow(lp_player, "AP_HammerSecurity", false);
    TechTreeUnitAllow(lp_player, "AP_SpartanCompany", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeBreaker", false);
    TechTreeUnitAllow(lp_player, "AP_HelsAngelFighter", false);
    TechTreeUnitAllow(lp_player, "AP_DuskWing", false);
    TechTreeUnitAllow(lp_player, "AP_DukesRevenge", false);
    TechTreeUnitAllow(lp_player, "AP_MercMedic", false);
    TechTreeUnitAllow(lp_player, "AP_MercReaper", false);
    TechTreeUnitAllow(lp_player, "AP_MercWraith", false);
    TechTreeUnitAllow(lp_player, "AP_MercLiberator", false);
    TechTreeUnitAllow(lp_player, "AP_BrynhildFighter", false);
    TechTreeUnitAllow(lp_player, "AP_MercThor", false);
    TechTreeUnitAllow(lp_player, "AP_Barracks", false);
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", false);
    TechTreeUnitAllow(lp_player, "AP_PerditionTurret", false);
    TechTreeUnitAllow(lp_player, "AP_PsiDisruptor", false);
    TechTreeUnitAllow(lp_player, "AP_Bunker", false);
    TechTreeUnitAllow(lp_player, "AP_MissileTurret", false);
    TechTreeUnitAllow(lp_player, "AP_DevastatorTurret", false);
    TechTreeUnitAllow(lp_player, "AP_SensorTower", false);
    TechTreeUnitAllow(lp_player, "AP_HiveMindEmulator", false);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", false);
    TechTreeUnitAllow(lp_player, "AP_MercCompound", false);
    TechTreeUnitAllow(lp_player, "AP_Factory", false);
    TechTreeUnitAllow(lp_player, "AP_Armory", false);
    TechTreeUnitAllow(lp_player, "AP_Starport", false);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", false);
    TechTreeUnitAllow(lp_player, "AP_StarportMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksMengsk", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", false);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", false);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel5", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_EMP", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_GhostMengskEMPBig", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_GhostMengskEMPLongStun", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_GhostMengskEMPShortStun", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToPlanetaryFortress", 0), false);
}

void libABFE498B_gf_AP_Triggers_giveTerranDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WraithCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaBaseSuitEnhancements", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_setKerriganPrimal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganPostZerusSounds", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganInfestedCosmetic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganPostZerus", 1);
    lib5BD4895D_gf_AP_Core_SwitchKerriganSwarmToPrimalZerg();
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockZergling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_Zergling", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmQueen (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_Queen", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockRoach (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_RoachWarren", true);
    TechTreeUnitAllow(lp_player, "AP_Roach", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockHydralisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", true);
    TechTreeUnitAllow(lp_player, "AP_Hydralisk", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockAberration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveAberration", 1);
    TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
    TechTreeUnitAllow(lp_player, "AP_InfestedAbomination", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMutalisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    TechTreeUnitAllow(lp_player, "AP_Mutalisk", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockCorruptor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    TechTreeUnitAllow(lp_player, "AP_Corruptor", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockScourge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    TechTreeUnitAllow(lp_player, "AP_Scourge", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSwarmHost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHost", 1);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", true);
    TechTreeUnitAllow(lp_player, "AP_SwarmHost", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveInfestor", 1);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", true);
    TechTreeUnitAllow(lp_player, "AP_Infestor", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockUltralisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_UltraliskCavern", true);
    TechTreeUnitAllow(lp_player, "AP_Ultralisk", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockPygalisk (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Pygalisk", true);
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockBroodQueen (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    TechTreeUnitAllow(lp_player, "AP_SIQueen", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockDefiler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", true);
    TechTreeUnitAllow(lp_player, "AP_DefilerSCBW", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMarine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBarracks(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIBarracksTrain", 0), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSiegeTank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedFactory(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIFactoryTrain", 1), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedDiamondBack (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedFactory(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIFactoryTrain", 2), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBanshee (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedStarport(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIStarportTrain", 0), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedLiberator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedStarport(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIStarportTrain", 1), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMedic (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_InfestedMedic", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundInfested", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSiegeBreaker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_InfestedSiegeBreaker", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundInfested", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedDuskWing (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_InfestedDuskWing", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundInfested", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockDevouringOne (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercZergling", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWar", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockHunterKiller (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_HunterKiller", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWar", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockTorrasque (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercUltralisk", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWar", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockHunterling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Hunterling", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundSC2", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockYggdrasil (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Yggdrasil", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundBroodWar", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMercRoach (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercRoach", true);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMercCompoundSC2", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSpineCrawler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_SpineCrawler", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockSporeCrawler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
    TechTreeUnitAllow(lp_player, "AP_SporeCrawler", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockBileLauncher (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", true);
    TechTreeUnitAllow(lp_player, "AP_BileLauncher", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockNydusWorm (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_NydusWorm", true);
    TechTreeUnitAllow(lp_player, "AP_Lair", true);
    TechTreeUnitAllow(lp_player, "AP_NydusNetwork", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockEchidnaWorm (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EchidnaWorm", true);
    TechTreeUnitAllow(lp_player, "AP_Lair", true);
    TechTreeUnitAllow(lp_player, "AP_NydusNetwork", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBarracks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSCV(lp_player);
    TechTreeUnitAllow(lp_player, "AP_SIBarracks", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSCV(lp_player);
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBarracks(lp_player);
    TechTreeUnitAllow(lp_player, "AP_SIInfestedBunker", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedFactory (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSCV(lp_player);
    TechTreeUnitAllow(lp_player, "AP_SIFactory", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedStarport (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSCV(lp_player);
    TechTreeUnitAllow(lp_player, "AP_SIStarport", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedMissileTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSCV(lp_player);
    libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedBarracks(lp_player);
    TechTreeUnitAllow(lp_player, "AP_SIMissileTurret", true);
}

void libABFE498B_gf_AP_Triggers_Zerg_TyrannozorHealingAdaptation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HealingAdaptation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_TyrannozorTyrantsProtection (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TyrannozorTyrantsProtection", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_TyrannozorBarrageofSpikes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TyrannozorBarrageOfSpikes", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_TyrannozorImpalingStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImpalingStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_NydusWormFamilyResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NydusWormResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_NydusWormFamilyJormungandrStrain (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NydusWormJormungandrStrain", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_NydusWormFamilySubterraneanScales (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NydusWormSubterraneanScales", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_NydusWormRavenousAppetite (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NydusWormRavenousAppetite", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_EchidnaWormOuroborosStrain (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EchidnaWormOuroborosStrain", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingHardenedCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSZerglingHealth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingAdrenalOverload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSZerglingFrenzy", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingMetabolicBoost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMetabolicBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingRaptor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveRaptor", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveSwarmling", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveRaptorSwarmling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingSwarmling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmling", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveRaptor", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveRaptorSwarmling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingReconstitution (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5ZerglingRespawn", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ZerglingShreddingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZerglingArmorShred", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachHydrioticBile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRoachDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachAdaptivePlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRoachShield", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RoachTunnelingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSTunnelingClaws", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSRoachSpeed", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GlialReconstitutionTunnelingClaws", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_RoachVile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachVile", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_RoachCorpser", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachVileCorpser", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_RoachCorpser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachCorpser", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_RoachVile", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoachVileCorpser", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_RoachGlialReconstitution (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRoachSpeed", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSTunnelingClaws", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GlialReconstitutionTunnelingClaws", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_RoachOrganicCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRoachHealth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskFrenzy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHydraliskFrenzy", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskAncillaryCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHydraliskHealth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskGroovedSpines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSGroovedSpines", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskMuscularAugments (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MuscularAugments", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HydraliskResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyHydralisk", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingCorrosiveAcid (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSBanelingCorrosiveBile", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingRupture (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRupture", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingRegenerativeAcid (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSBanelingHeal", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingSplitter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSSplitter", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHunter", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHunterSplitter", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingHunter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHunter", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSSplitter", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHunterSplitter", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingCentrifugalHooks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CentrificalHooks", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingTunnelingJaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BanelingBurrowMove", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BanelingRapidMetamorph (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRapidMetamorph", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskViciousGlave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSViciousGlaive", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskRapidRegeneration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRapidRegeneration", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskSunderingGlave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSExplosiveGlaive", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskSeveringGlave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MutaliskSeveringGlave", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MutaliskAerodynamicGlaveShape (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MutaliskRange", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostBurrow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSBurrowSwarmHost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostRapidIncubation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRapidIncubation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostPressurizedGlands (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSPressurizedGlands", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCarrion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitA", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveSwarmHostSplitB", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitAB", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostCreeper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitB", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSHaveSwarmHostSplitA", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSHaveSwarmHostSplitAB", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostLocustMetabolicBoost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLocustSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostEnduringLocusts (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LocustLifetimeIncrease", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostOrganicCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SwarmHostOrganicCarapace", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmHostResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencySwarmHost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskBurrowCharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSUltraliskBurrowCharge", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskTissueAnimation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSTissueAssimilation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskMonarchBlades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMonarchBlades", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskNoxious (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSNoxious", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSTorrasque", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSNoxiousTorrasque", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskTorrasque (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSTorrasque", 1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_TorrasqueChrysalis", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_TorrasqueCorpse", 0), true);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSNoxious", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSNoxiousTorrasque", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskAnabolicSynthesis (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AnabolicSynthesis", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskChitinousPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ChitinousPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskOrganicCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltraliskOrganicCarapace", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_UltraliskResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyUltralisk", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_PygaliskStim (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PygaliskStim", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_PygaliskDucalBlades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PygaliskDucalBlades", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_PygaliskCombatCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PygaliskCombatCarapace", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordImprovedOverlord (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5ImprovedOverlords", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordVentralSacs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_overlordtransport", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordGenerateCreep (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OverlordGenerateCreep", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordAntennae (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OverlordSightUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_OverlordPneumatizedCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OverlordSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CorruptorCausticSpray (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSCorruptorCausticSpray", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CorruptorCorruption (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSCorruptorCorruption", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CorruptorMonstrousResilience (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorruptorMonstrousResilience", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CorruptorConstructRegeneration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorruptorConstructRegeneration", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CorruptorScourgeIncubation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorruptorScourgeIncubation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CorruptorResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorruptorResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ScourgeVirulentSpores (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSScourgeSplash", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ScourgeResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSScourgeCost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ScourgeSwarmScourge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSScourgeAmount", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DevourerCorrosiveSpray (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DevourerCorrosiveSpray", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DevourerGapingMaw (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSGapingMaw", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DevourerImprovedOsmosis (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSImprovedOsmosis", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DevourerPrescientSpores (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSImprovedSporeTracking", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_GuardianProlongedDispersion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianAttackRangeIncrease", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_GuardianPrimalAdaptation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianAirAttack", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_GuardianSoronanAcid (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianAttackDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_GuardianPropellantSacs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianPropellantSacs", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_GuardianExplosiveSpores (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianExplosiveSpores", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_GuardianPrimordialFury (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianPrimordialFury", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ImpalerAdativeTalons (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DiggingClaws", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ImpalerSecretionGlands (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImpalerGenerateCreep", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ImpalerHardenedTentacleSpines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImpalerDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_LurkerSeismicSpines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LurkerRange", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_LurkerAdaptedSpines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LurkerNormalDamage", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RavagerPotentBile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRavagerPotentBile", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RavagerBloatedBileDucts (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSRavagerBloatedBileDucts", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_RavagerDeepTunnel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DeepTunnel", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ViperParasiticBomb (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ViperParasiticBomb", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ViperParalyticBarbs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ViperAbductImprovedStun", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ViperVirulentMicrobes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ViperImprovedCastRange", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodLordPorousCartilage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganVoidCoopBroodlordSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodLordEvolvedCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BroodLordHealth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodLordSplitterMitosis (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotsKeneticMitosis", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodLordResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganVoidCoopBroodlordCost", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestorInfestedTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestorInfestedTerran", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestorMicrobialShroud (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestorMicrobialShroud", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenSpawnLarvae (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_QueenSpawnLarva", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenDeepTunnel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_QueenDeepTunnel", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenOrganicCarapace (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_QueenOrganicCarapace", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenBioMechanicalTransfusion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AbathurBioMechanicalTransfusion", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyQueen", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SwarmQueenIncubatorChamber (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AbathurHatcheryDoubleQueue", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodQueenFungalGrowth (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIQueenFungalGrowth", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodQueenEnsnare (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BroodQueenEnsnare", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BroodQueenEnhancedMitochondria (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIQueenEnergy", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DefilerPathogenProjectors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefilerImprovedCastRange", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DefilerComorbidity (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefilerImprovedPlague", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DefilerTrapdoorAdaptation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefilerBurrowCast", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_DefilerPredatoryConsumption (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefilerPredatoryConsumption", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AberrationMonstrousResilience (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationMonstrousResilience", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AberrationConstructRegeneration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationConstructRegeneration", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AberrationBanelingIncubation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationBanelingIncubation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AberrationProtectiveCover (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationArmorAura", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AberrationResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AberrationProgressiveBanelingLaunch (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationBanelingLaunch", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AberrationBanelingLaunchLevel2", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Zerg_PrimalIgniterFireBreath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PrimalIgniterFireBreath", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_PrimalIgniterToughness (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PrimalIgniterToughness", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BileLauncherRapidBombardment (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BileLauncherRapidBombardment", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BileLauncherArtilleryDucts (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BileLauncherArtilleryDucts", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SISCVChargeCount (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SISCVBuildChargeCount", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SIPlaguedMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIMarinePlaguedMunitions", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SIMarineRangeUpgrade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIMarineTrooperRange", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SIBunkerRegen (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIBunkerLifeRegen", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SIBunkerArmor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIBunkerArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_SIBunkerCargo (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIInfestedBunkerImprovedCargo", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BioelectricPayload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BioelectricPayload", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AcidSporeVents (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AcidSporeVents", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ProgressiveAutomatedMitosis (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AutomatedMitosis", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AutomatedMitosisTierTwo", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Zerg_AcidicEnzymes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AcidicEnzymes", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankDeepTunnel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SISiegeTankDeepTunnel", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankSeismicSonar (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestedSiegeTankSeismicSonar", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankBalancedRoots (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestedSiegeTankBalancedRoots", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedSiegeTankFrightfulFleshwelder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FrightfulFleshwelderInfestedSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_CausticMucus (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIDiamondbackSnailTrail", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ViolentEnzymes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestedDiamondbackViolentEnzymes", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ConcentratedSpew (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestedDiamondbackConcentratedSpew", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ProgressiveFungalSnare (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestedDiamondbackBasicEnsnare", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SIDiamondbackImprovedEnsnare", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedDiamondbackFrightfulFleshwelder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FrightfulFleshwelderInfestedDiamondBack", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_Braced_Exoskeleton (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StukovInfestedBansheeInfestedLife", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_Rapid_Hibernation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StukovInfestedBansheeBurrowRegeneration", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AdvancedTargetingOptics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InfestedBansheeAdvancedOptics", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedBansheeFrightfulFleshwelder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FrightfulFleshwelderInfestedBanshee", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_Cloud_Dispersal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorInfestedBecomeSwarm", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_Viral_Contamination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SILiberatorImprovedAoeAttack", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedLiberatorFrightfulFleshwelder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FrightfulFleshwelderInfestedLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_InfestedLiberatorDefenderMode (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SILiberatorDefenderMode", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockTyrannozor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_UltraliskCavern", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_TyrannozorMerge", 0), true);
    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToTyrannozorMerge", 0), true);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockBaneling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_BanelingNest", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphZerglingToBaneling", 0), true);
    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToBaneling", 0), true);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockLurker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLurker", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSImpaler", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLurkerImpaler", 1);
    }

    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToLurker", 0), true);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockImpaler (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSImpaler", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSLurker", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSLurkerImpaler", 1);
    }

    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToImpaler", 0), true);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockViper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskViper", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSMutaliskBroodlord", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskBroodlordViper", 1);
    }

    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockBroodLord (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskBroodlord", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HotSMutaliskViper", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HotSMutaliskBroodlordViper", 1);
    }

    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockRavager (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeUnitAllow(lp_player, "AP_RoachWarren", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphToRavager", 0), true);
    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToRavager", 0), true);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockGuardian (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GuardianAspect", 1);
    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockDevourer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
    TechTreeUnitAllow(lp_player, "AP_Spire", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DevourerAspect", 1);
    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockOverseer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OverlordMorphOverseer", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockPrimalIgniter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_RoachWarren", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_PrimalIgniterMerge", 0), true);
    if ((libABFE498B_gv_aP_Triggers_Option_enableMorphling == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnableMorphling", 1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToPrimalIgniterMerge", 0), true);
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMeleeAttacks (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeWeaponsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
                TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeAttackTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMeleeAttackTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockMissileAttacks (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileWeaponsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
                TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileAttackTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergMissileAttackTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockGroundCarapace (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel1", true);
            if ((lp_level >= 2)) {
                libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
                TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergGroundArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerAttacks (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerWeaponsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
            TechTreeUnitAllow(lp_player, "AP_Spire", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerAttackTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerAttackTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockFlyerCarapace (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
            TechTreeUnitAllow(lp_player, "AP_Spire", true);
            TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    libABFE498B_gf_AP_Triggers_Zerg_unlockHive(lp_player);
                    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergFlyerArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Zerg_TwinDrones (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5TwoDrones", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_AutomatedExtractor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5AutoExtractor", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_VespeneEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5GasBonuses", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MalignantCreep (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoF63B3C60_g;
    int autoF63B3C60_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_K5CreepBonuses", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5CreepBonuses", 1);
    if ((lv_upgradeLevels == 0)) {
        autoF63B3C60_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoF63B3C60_u = UnitGroupCount(autoF63B3C60_g, c_unitCountAll);
        for (;; autoF63B3C60_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoF63B3C60_g, autoF63B3C60_u);
            if (lv_currentUnit == null) { break; }
            lib15EF4C78_gf_AP_Player_applyMalignantCreepFix(lv_currentUnit);
        }
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_CreepStomach (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergCreepStomach", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_ExcavatingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergExcavatingClaws", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_HiveClusterMaturation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HiveClusterMaturation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_MacroscopicRecuperation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergStructureRapidRegen", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_BioMechanicalStockpiling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BioMechanicalStockpiling", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockZergBroodlingPacking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZergBroodlingPacking", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganKinteticBlast (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5MindBolt", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganHeroicFortitude (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5HeroicFortitude", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganLeapingStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5PrimalSlash", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganCrushingGrip (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5CrushingGrip", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganChainReaction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5ChainLightning", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganPsionicShift (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5PsiStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganWildMutation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5WildMutation", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnBanelings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5SpawnBanelings", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganMend (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Mend", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganInfestBroodlings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5InfestBroodlings", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganFury (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Fury", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganAbilityEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Cooldowns", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganApocalypse (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Apocalypse", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganSpawnLeviathan (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5Leviathan", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganDropPods (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_K5DropPods", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganAssimilationAura (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganAssimilationAura", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_KerriganImmobilizationWave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganImmobilizationWave", 1);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockLair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToLair", 0), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockHive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gf_AP_Triggers_Zerg_unlockLair(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToHive", 0), true);
}

void libABFE498B_gf_AP_Triggers_Zerg_unlockOverlordEnergy (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_upgradeLevels;

    // Automatic Variable Declarations
    unitgroup auto6027F01E_g;
    int auto6027F01E_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_OverlordSpellcaster", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OverlordSpellcaster", 1);
    if ((lv_upgradeLevels == 0)) {
        auto6027F01E_g = UnitGroup("AP_Overlord", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6027F01E_u = UnitGroupCount(auto6027F01E_g, c_unitCountAll);
        for (;; auto6027F01E_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto6027F01E_g, auto6027F01E_u);
            if (lv_currentUnit == null) { break; }
            UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
        }
    }

}

void libABFE498B_gf_AP_Triggers_Zerg_unlockInfestedSCV (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SICommandCenterTrain", 0), true);
}

void libABFE498B_gf_AP_Triggers_clearZergTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Zergling", false);
    TechTreeUnitAllow(lp_player, "AP_Roach", false);
    TechTreeUnitAllow(lp_player, "AP_Hydralisk", false);
    TechTreeUnitAllow(lp_player, "AP_Queen", false);
    TechTreeUnitAllow(lp_player, "AP_InfestedAbomination", false);
    TechTreeUnitAllow(lp_player, "AP_SwarmHost", false);
    TechTreeUnitAllow(lp_player, "AP_Ultralisk", false);
    TechTreeUnitAllow(lp_player, "AP_Pygalisk", false);
    TechTreeUnitAllow(lp_player, "AP_Infestor", false);
    TechTreeUnitAllow(lp_player, "AP_Mutalisk", false);
    TechTreeUnitAllow(lp_player, "AP_Corruptor", false);
    TechTreeUnitAllow(lp_player, "AP_Scourge", false);
    TechTreeUnitAllow(lp_player, "AP_SIQueen", false);
    TechTreeUnitAllow(lp_player, "AP_DefilerSCBW", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_PrimalIgniterMerge", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphZerglingToBaneling", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphToRavager", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToBaneling", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToRavager", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToPrimalIgniterMerge", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SICommandCenterTrain", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIBarracksTrain", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToTyrannozorMerge", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_TyrannozorMerge", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToImpaler", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_MorphlingToLurker", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIFactoryTrain", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIFactoryTrain", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIStarportTrain", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_SIStarportTrain", 1), false);
    TechTreeUnitAllow(lp_player, "AP_InfestedMedic", false);
    TechTreeUnitAllow(lp_player, "AP_InfestedSiegeBreaker", false);
    TechTreeUnitAllow(lp_player, "AP_InfestedDuskWing", false);
    TechTreeUnitAllow(lp_player, "AP_MercZergling", false);
    TechTreeUnitAllow(lp_player, "AP_HunterKiller", false);
    TechTreeUnitAllow(lp_player, "AP_MercUltralisk", false);
    TechTreeUnitAllow(lp_player, "AP_Hunterling", false);
    TechTreeUnitAllow(lp_player, "AP_Yggdrasil", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToLair", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToHive", 0), false);
    TechTreeUnitAllow(lp_player, "AP_SpawningPool", false);
    TechTreeUnitAllow(lp_player, "AP_RoachWarren", false);
    TechTreeUnitAllow(lp_player, "AP_BanelingNest", false);
    TechTreeUnitAllow(lp_player, "AP_EvolutionChamber", false);
    TechTreeUnitAllow(lp_player, "AP_HydraliskDen", false);
    TechTreeUnitAllow(lp_player, "AP_Spire", false);
    TechTreeUnitAllow(lp_player, "AP_InfestationPit", false);
    TechTreeUnitAllow(lp_player, "AP_UltraliskCavern", false);
    TechTreeUnitAllow(lp_player, "AP_SpineCrawler", false);
    TechTreeUnitAllow(lp_player, "AP_SporeCrawler", false);
    TechTreeUnitAllow(lp_player, "AP_BileLauncher", false);
    TechTreeUnitAllow(lp_player, "AP_EchidnaWorm", false);
    TechTreeUnitAllow(lp_player, "AP_NydusNetwork", false);
    TechTreeUnitAllow(lp_player, "AP_NydusWorm", false);
    TechTreeUnitAllow(lp_player, "AP_SIBarracks", false);
    TechTreeUnitAllow(lp_player, "AP_SIInfestedBunker", false);
    TechTreeUnitAllow(lp_player, "AP_ZergMercenaryCompound", false);
    TechTreeUnitAllow(lp_player, "AP_SIStarport", false);
    TechTreeUnitAllow(lp_player, "AP_SIFactory", false);
    TechTreeUnitAllow(lp_player, "AP_SIMissileTurret", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMeleeWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergMissileWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergGroundArmorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ZergFlyerArmorsLevel5", false);
}

void libABFE498B_gf_AP_Triggers_giveZergDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganPostLabSounds", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OverlordContaminate", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAiurZealot (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_AiurZealot[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_AiurZealot[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ZealotAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCenturion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Centurion[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Centurion[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ZealotShakuras", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentinel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Sentinel[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Sentinel[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ZealotPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicant (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Supplicant[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Supplicant[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_Supplicant", true);
        TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainDummy", true);
        TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainCreator", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerShakuras (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_StalkerShakuras[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_StalkerShakuras[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_StalkerShakuras", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockInstigator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Instigator[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Instigator[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_StalkerPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Slayer[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Slayer[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_Slayer", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_SentryAiur[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_SentryAiur[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_SentryAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Energizer[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Energizer[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_SentryPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHavoc (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Havoc[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Havoc[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_Monitor", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_HighTemplarAiur[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_HighTemplarAiur[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
        TechTreeUnitAllow(lp_player, "AP_HighArchonTemplar", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSignifier (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Signifier[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Signifier[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
        TechTreeUnitAllow(lp_player, "AP_HighTemplarShakuras", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAscendant (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Ascendant[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Ascendant[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
        TechTreeUnitAllow(lp_player, "AP_HighTemplarTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarShakuras (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_DarkTemplarShakuras[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_DarkTemplarShakuras[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_DarkShrine", true);
        TechTreeUnitAllow(lp_player, "AP_DarkTemplarShakuras", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAvenger (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Avenger[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Avenger[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_DarkShrine", true);
        TechTreeUnitAllow(lp_player, "AP_DarkTemplarAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockBloodHunter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_BloodHunter[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_BloodHunter[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_DarkShrine", true);
        TechTreeUnitAllow(lp_player, "AP_DarkTemplarTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Dragoon[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Dragoon[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_Dragoon", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_DarkArchon[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_DarkArchon[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_TemplarArchive", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkArchonTrain", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAdept (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Adept[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Adept[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockGateway(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_Adept", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GatewayFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockObserver (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Observer[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Observer[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_Observer", true);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrism (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_WarpPrism[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_WarpPrism[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_WarpPrism", true);
        TechTreeUnitAllow(lp_player, "AP_WarpPrismPhasing", true);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_ImmortalAiur[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_ImmortalAiur[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ImmortalAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAnnihilator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Annihilator[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Annihilator[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ImmortalShakuras", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVanguard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Vanguard[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Vanguard[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ImmortalTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalwart (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Stalwart[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Stalwart[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ImmortalPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockColossusPurifier (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_ColossusPurifier[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_ColossusPurifier[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_RoboticsBay", true);
        TechTreeUnitAllow(lp_player, "AP_ColossusPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Wrathwalker[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Wrathwalker[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_RoboticsBay", true);
        TechTreeUnitAllow(lp_player, "AP_ColossusTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaver (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Reaver[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Reaver[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_RoboticsBay", true);
        TechTreeUnitAllow(lp_player, "AP_Reaver", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Disruptor[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Disruptor[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility(lp_player);
        TechTreeUnitAllow(lp_player, "AP_Disruptor", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RoboFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_PhoenixAiur[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_PhoenixAiur[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_PhoenixAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMirage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Mirage[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Mirage[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_PhoenixPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSkirmisher (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Skirmisher[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Skirmisher[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_PhoenixTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsair (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Corsair[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Corsair[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_CorsairMP", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayShakuras (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_VoidRayShakuras[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_VoidRayShakuras[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_VoidRayShakuras", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Destroyer[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Destroyer[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_VoidRayTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpRay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Intercessor[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Intercessor[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_VoidRayAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Dawnbringer[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Dawnbringer[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_VoidRayPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierAiur (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_CarrierAiur[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_CarrierAiur[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_CarrierAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSkylord (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Skylord[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Skylord[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_CarrierTaldarim", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPurger (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Purger[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Purger[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_CarrierPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScout (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Scout[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Scout[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ScoutMP", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempest (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Tempest[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Tempest[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_TempestPurifier", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionPurifier", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTaldarimMothership (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_TaldarimMothership[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_TaldarimMothership[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_SOAMothershipv4", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionTaldarim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAiurMothership (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_AiurMothership[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_AiurMothership[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_MothershipCoreAiur", true);
        TechTreeUnitAllow(lp_player, "AP_MothershipAiur", true);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPurifierMothership (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_PurifierMothership[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_PurifierMothership[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_FleetBeacon", true);
        TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
        TechTreeUnitAllow(lp_player, "AP_MothershipCorePurifier", true);
        TechTreeUnitAllow(lp_player, "AP_MothershipPurifier", true);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Arbiter[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Arbiter[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_ArbiterMP", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionAiur", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOracle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_Protoss_has_Oracle[lp_player] == false)) {
        libABFE498B_gv_aP_Triggers_Protoss_has_Oracle[lp_player] = true;
        libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
        TechTreeUnitAllow(lp_player, "AP_Oracle", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StargateFactionNerazim", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhotonCannon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Forge", true);
    TechTreeUnitAllow(lp_player, "AP_PhotonCannon", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockKhaydarinMonolith (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Forge", true);
    TechTreeUnitAllow(lp_player, "AP_KhaydarinMonolith", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockShieldBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_ShieldBattery", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantBloodShields (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakSupplicantShieldArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantSoulAugmentation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakSupplicantMaxShields", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantShieldRegeneration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakSupplicantShieldRegen", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusSupplicantBoosted", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus", c_techCountCompleteOnly));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusSupplicantBoosted100Stack", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus100Stack", c_techCountCompleteOnly));
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSupplicantZenithPitch (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SupplicantZenithPitch", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptShockwave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdeptKillBounce", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptResonatingGlaives (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdeptPiercingAttack", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptPhaseBulwark (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdeptShieldUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAdeptDisruptiveTransfer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdeptDisruptiveTransfer", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerFamilyDisintegratingParticles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HighImpactParticleDisruptors", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerFamilyParticleReflection (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidStalkerMultishot", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockInstigatorResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_InstigatorResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonHighImpactPhaseDisruptors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HighImpactPhaseDisruptors", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonTrillicCompressionSystems (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DragoonHealth", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusDragoonTrillic", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus", c_techCountCompleteOnly));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusDragoonTrillic100Stack", TechTreeUpgradeCount(lp_player, "AP_ShieldRegenBonus100Stack", c_techCountCompleteOnly));
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonSingularityCharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DragoonRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonEnhancedStriderServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DragoonEnhancedStriderServos", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDragoonPhalanxSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DragoonPhalanxSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScoutCombatSensorArray (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScoutWeaponRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScoutApialSensors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScoutSCBWSightUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScoutGraviticThrusters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScoutSCBWSpeedUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScoutAdvancedPhotonBlasters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScoutAdvancedPhotonBlasters", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockScoutResourceEfficency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScoutResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempestTectonicDestabilizers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TempestTectonicDestabilizers", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempestQuanticReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TempestQuanticReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempestGravitySling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TempestGravitySling", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempestInterplanetaryRange (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TempestInterplanetaryRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTempestDisintegration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TempestDisintegration", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixMirageIonicWavelengthFlux (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImprovedIonCannons", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixMirageAnionPulseCrystals (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AnionPulseCrystals", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPhoenixDoubleGravitonBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidPhoenixDoubleGraviton", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMirageGravitonBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MirageGravitonBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSkirmisherPeerContempt (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SkirmisherPeerContempt", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairStealthDrive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorsairPermanentCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairArgusJewel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorsairArgusJewel", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairSustainingDisruption (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorsairSustainingDisruption", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairNeutronShields (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorsairShieldUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCorsairNetworkDisruption (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CorsairNetworkDisruption", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOracleStealthDrive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OraclePermanentCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOracleStasisCalibration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OracleStasisWardUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOracleTemporalAccelerationBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OracleSustainablePulsarBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOracleBosonicCore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OracleEnergyUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterChronostaticReinforcement (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArbiterReinforcedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterKhaydarinCore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArbiterEnergyUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterSpacetimeAnchor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArbiterSustainingStasisField", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyArbiter", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterEnhancedCloakField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArbiterCloakFieldRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArbiterAbilityEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArbiterAbilityEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierGravitonCatapult (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CarrierAiurLaunchSpeedUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierHullOfPastGlories (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CarrierStructuralIntegrityReinforcements", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCarrierAiurRepairDrones (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CarrierAiurRepairDrones", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTriremeSolarBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TriremeSolarBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSkylordHyperjump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SkylordHyperjump", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayFamilyFluxVanes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRaySpeedUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVoidRayPrismaticRange (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayPrismaticRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockIntercessorLiminalMagnifiers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayAiurStructureSlow", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockIntercessorEntropicReversal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayAiurAutoRepair", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockIntercessorChronoclysm (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayAiurChronoclysm", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringerSolariteLens (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayPurifierRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringerAntiSurfaceCountermeasures (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayPurifierAntiGroundArmor", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDawnbringerEnhancedShieldGenerator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayPurifierShieldCapacity", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyerReforgedBloodshardCore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DestroyerChargingBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDestroyerResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DestroyerResourceEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismGraviticDrive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GraviticDrive", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismPhaseBlaster (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WarpPrismPhaseBlaster", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismWarConfiguration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WarpPrismWarConfiguration", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpPrismWarpRefraction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WarpPrismWarpRefraction", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockObserverGraviticBoosters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ObserverGraviticBooster", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockObserverSensorArray (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ObserverSightUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockObserverScopophobia (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ObserverScopophobia", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaverScarabDamage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ScarabDamageUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaverSolaritePayload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaverIncreasedScarabSplashRadius", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaverReaverCapacity (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaverHangarIncreaseUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaverResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyReaver", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReaverKhalaiReplicators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaverKhalaiReplicators", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardAgonyLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakVanguardLongshot", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardMatterDispersion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakVanguardIncreaseSplashArea", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardRapidfireCannon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VanguardRapidfireCannon", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockVanguardFusionMortars (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VanguardFusionMortars", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalFamilySingularityCharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImmortalIncreasedRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalFamilyAdvancedTargetingMechanics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImmortalAirAttack", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalFamilyDisruptorDispersion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidImmortalWeaponSplash", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockImmortalImprovedBarrier (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImmortalImprovedBarrier", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAnnihilatorAerialTracking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AnnihilatorAerialTracking", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartStrutEnhancements (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StalwartStrutEnhancements", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartArcInducers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StalwartArcInducers", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartStabilizedElectrodes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StalwartStabilizedElectrodes", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartHighVoltageCapacitors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StalwartHighVoltageCapacitors", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalwartLatticedShields (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StalwartLatticedShields", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockColossusPacificationProtocols (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ColossusRapidIgnition", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockColossusFireLance (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ColossusFireLance", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalkerRapidPowerCycling (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakColossusChargedBlastChargeTime", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalkerEyeOfWrath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WrathwalkerLongRangeChargedBlast", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWrathwalkerAerialTracking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WrathwalkerAerialTracking", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAvengerKryhasCloak (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AvengerCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarLesserShadowFury (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkTemplarShadowFuryLesser", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_DarkTemplarShadowFuryGreater", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkTemplarShadowFuryAll", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarGreaterShadowFury (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkTemplarShadowFuryGreater", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_DarkTemplarShadowFuryLesser", c_techCountCompleteOnly) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkTemplarShadowFuryAll", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockBloodHunterBrutalEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BloodHunterBrutalEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyShroudOfAdun (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShroudOfAdun", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyShadowGuardTraining (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkTemplarShadowGuardTraining", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyBlink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkTemplarResearchShadowDash", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarFamilyResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyDarkTemplar", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkTemplarDarkArchonMeld (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkArchonMeld", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarSignifierUnshackledPisonicStorm (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HighImpactPsionicStorm", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarSignifierHallucination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HighTemplarHallucination", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarSignifierKhaydarinAmulet (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KhaydarinAmulet", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_HighArchon", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KhaydarinAmuletArchon", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHighTemplarPlasmaSurge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HighTemplarPlasmaSurge", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArchonHighArchon (int lp_player) {
    // Variable Declarations
    int lv_upgradeLevels;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto12743E91_g;
    int auto12743E91_u;
    unitgroup autoBDDD4057_g;
    int autoBDDD4057_u;

    // Variable Initialization

    // Implementation
    lv_upgradeLevels = TechTreeUpgradeCount(lp_player, "AP_HighArchon", c_techCountQueuedOrBetter);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HighArchon", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_KhaydarinAmulet", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KhaydarinAmuletArchon", 1);
        if ((lv_upgradeLevels == 0)) {
            autoBDDD4057_g = UnitGroup("AP_Archon", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBDDD4057_u = UnitGroupCount(autoBDDD4057_g, c_unitCountAll);
            for (;; autoBDDD4057_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoBDDD4057_g, autoBDDD4057_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 200.0);
            }
        }

    }
    else {
        if ((lv_upgradeLevels == 0)) {
            auto12743E91_g = UnitGroup("AP_Archon", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto12743E91_u = UnitGroupCount(auto12743E91_g, c_unitCountAll);
            for (;; auto12743E91_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto12743E91_g, auto12743E91_u);
                if (lv_currentUnit == null) { break; }
                UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
            }
        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArchonFloat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArchonFloat", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArchonSiphon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArchonSiphon", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArchonSuicide (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArchonSuicide", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockArchonWeaponUpgrade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArchonWeaponUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSignifierFeedback (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SignifierFeedback", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonFeedback (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkArchonFeedback", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonMaelstrom (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkArchonMaelstrom", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonArgusTalisman (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ArgusTalisman", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDarkArchonIndomitableWill (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DarkArchonIndomitableWill", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantPowerOverwhelming (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakHighTemplarImprovedSacrifice", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantPowerChaoticAttunement (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakHighTemplarPsionicOrbTravelDistance", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantBloodAmulet (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BloodAmulet", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAscendantAbilityEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AscendantAbilityEfficiency", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryFamilyCloakingModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SentryCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryFamilyShieldBatteryRapidRecharging (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KaraxEnergyRegenUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryForceField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SentryForceField", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryHallucination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SentryHallucination", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentryDoubleShieldRecharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SentryDoubleShieldRecharge", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizerReclamation (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnergizerReclamation", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizerForgedChassis (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnergizerForgedChassis", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockEnergizerMobileChronoBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_EnergizerMobileChronoBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHavocDetectWeakness (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakHavocTargetLockBuff", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHavocBloodshardResonance (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakHavocAbilityRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockHavocEnduringSight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HavocEnduringSight", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockZealotFamilyLegEnhancements (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZealotSCBWSpeedUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockZealotFamilyShieldCapacity (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ZealotShieldCapacity", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockZealotWhirlwind (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidZealotWhirlwind", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockCenturionResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencyCenturion", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSentinelResourceEfficiency (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ResourceEfficiencySentinel", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStalkerPhaseReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StalkerPhaseReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSlayerPhaseBlink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SlayerBlink", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorPermanentCloak (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DisruptorPermanentCloak", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorPerfectedPower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DisruptorPerfectedPower", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorRestrainedDestruction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DisruptorRestrainedDestruction", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDisruptorRestructuredThrusters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DisruptorRestructuredThrusters", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimIntegratedPower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MothershipTaldarimIntegratedPower", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimSummonDeathFleet (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallSummonDeathFleet", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTaldarimHungerForSlaughter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallHungerForSlaughter", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurAstralRestoration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallAstralRestoration", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurTemporalDestabilization (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MothershipAiurAttackSlow", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipAiurRecursivePhotons (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallRecursivePhotons", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierPlanetCracker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallPlanetCracker", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierMobilePowerField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MothershipPurifierPowerSource", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipPurifierPurifiedEmbers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallPurifiedEmbers", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipTimeField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallTimeField", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipMassRecall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallMassRecall", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipNexusRecall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CanInstallNexusRecall", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipCoreAiurAdvancedRepulsion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MothershipCoreAiurAdvancedRepulsion", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipCorePurifierControlledBurn (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MothershipCorePurifierControlledBurn", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMothershipFighterHangar (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MothershipHangarInstallation", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockChronoSurge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOASuperChrono", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockProgressiveProxyPylon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAProxyPylon", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAProxyPylon", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAWarpInReinforcements", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPylonOvercharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAPylonOvercharge", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAOrbitalStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTemporalField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAGravitonBomb", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSolarLance (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAThermalLance", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMassRecall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOARecall", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockShieldOvercharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SoASuperShield", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockDeployFenix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAFenix", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockPurifierBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAPurifierBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockTimeStop (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOATimeFreeze", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSolarBombardment (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAStrafeAttack", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockMatrixOverload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAMatrixOverload", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockQuatro (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsQuatro", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsQuatro", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockNexusOvercharge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOARadar", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOrbitalAssimilators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAAutoAssimilator", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockWarpHarmonization (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAWarpTech", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGuardianShell (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAHeroicShield", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockReconstructionBeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOARepairBeam", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOverwatch (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SOAOverWatch", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockSuperiorWarpGates (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperiorWarpGates", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockEnhancedTargeting (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KaraxTurretRange", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockOptimizedOrdnance (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KaraxTurretAttackSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockKhalaiIngenuity (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KaraxInstantStructureWarp", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAmplifiedAssimilators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AmplifiedAssimilators", 1);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockProgressiveWarpRelocate (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 10), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 11), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 13), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 12), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 14), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 21), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 24), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 25), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 26), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 27), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocate", 9), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocateAssimilator", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_WarpRelocateAssimilator", 23), true);
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WarpRelocateLevel1", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WarpRelocateLevel2", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGroundWeapons (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Forge", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundWeaponTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGroundArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Forge", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossGroundArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockShields (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Forge", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossShieldTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAirWeapons (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
            TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirWeaponTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockAirArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((lp_level >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel1", 1);
            if ((lp_level >= 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel2", 1);
                if ((lp_level >= 3)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel3", 1);
                    if ((lp_level >= 4)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel4", 1);
                        if ((lp_level >= 5)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorsLevel5", 1);
                        }

                    }

                }

            }

        }

    }
    else {
        if ((lp_level >= 1)) {
            libABFE498B_gf_AP_Triggers_Protoss_unlockStargate(lp_player);
            TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", true);
            TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel3", true);
                    if ((lp_level >= 4)) {
                        TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel4", true);
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorTimeReductionL4", 1);
                        if ((lp_level >= 5)) {
                            TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel5", true);
                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProtossAirArmorTimeReductionL5", 1);
                        }

                    }

                }

            }

        }

    }
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockGateway (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Gateway", true);
    TechTreeUnitAllow(lp_player, "AP_WarpGate", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockRoboticsFacility (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacility", true);
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacilityWarp", true);
}

void libABFE498B_gf_AP_Triggers_Protoss_unlockStargate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Stargate", true);
    TechTreeUnitAllow(lp_player, "AP_StargateWarp", true);
}

void libABFE498B_gf_AP_Triggers_giveShieldRegeneration (int lp_player, int lp_stacks) {
    // Variable Declarations
    int lv__1stacks;
    int lv__100stacks;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__1stacks = ModI(lp_stacks, 100);
    lv__100stacks = (lp_stacks / 100);

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonus", lv__1stacks);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonus100Stack", lv__100stacks);
    if ((TechTreeUpgradeCount(lp_player, "AP_DragoonHealth", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusDragoonTrillic", lv__1stacks);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusDragoonTrillic100Stack", lv__100stacks);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_AlarakSupplicantShieldRegen", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusSupplicantBoosted", lv__1stacks);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusSupplicantBoosted100Stack", lv__100stacks);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_MedivacShield", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusMedivac", lv__1stacks);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusMedivac100Stack", lv__100stacks);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_BattlecruiserAdvancedDefensiveMatrix", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusBattlecruiser", lv__1stacks);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusBattlecruiser100Stack", lv__100stacks);
    }

    if ((TechTreeUpgradeCount(lp_player, "AP_PredatorAdaptiveDefenses", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusPredator", lv__1stacks);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShieldRegenBonusPredator100Stack", lv__100stacks);
    }

}

void libABFE498B_gf_AP_Triggers_clearProtossTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_ZealotAiur", false);
    TechTreeUnitAllow(lp_player, "AP_ZealotShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_ZealotPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_Supplicant", false);
    TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainDummy", false);
    TechTreeUnitAllow(lp_player, "AP_AlarakSupplicantWarpTrainCreator", false);
    TechTreeUnitAllow(lp_player, "AP_StalkerShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_StalkerPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_Slayer", false);
    TechTreeUnitAllow(lp_player, "AP_SentryAiur", false);
    TechTreeUnitAllow(lp_player, "AP_SentryPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_Monitor", false);
    TechTreeUnitAllow(lp_player, "AP_HighArchonTemplar", false);
    TechTreeUnitAllow(lp_player, "AP_HighTemplarShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_HighTemplarTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarAiur", false);
    TechTreeUnitAllow(lp_player, "AP_DarkTemplarTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_Dragoon", false);
    TechTreeUnitAllow(lp_player, "AP_Adept", false);
    TechTreeUnitAllow(lp_player, "AP_WarpPrism", false);
    TechTreeUnitAllow(lp_player, "AP_Observer", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalAiur", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_ImmortalPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_ColossusPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_ColossusTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_Reaver", false);
    TechTreeUnitAllow(lp_player, "AP_Disruptor", false);
    TechTreeUnitAllow(lp_player, "AP_PhoenixAiur", false);
    TechTreeUnitAllow(lp_player, "AP_PhoenixPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_PhoenixTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_CorsairMP", false);
    TechTreeUnitAllow(lp_player, "AP_VoidRayShakuras", false);
    TechTreeUnitAllow(lp_player, "AP_VoidRayTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_VoidRayAiur", false);
    TechTreeUnitAllow(lp_player, "AP_VoidRayPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_CarrierAiur", false);
    TechTreeUnitAllow(lp_player, "AP_CarrierTaldarim", false);
    TechTreeUnitAllow(lp_player, "AP_CarrierPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_ScoutMP", false);
    TechTreeUnitAllow(lp_player, "AP_SOAMothershipv4", false);
    TechTreeUnitAllow(lp_player, "AP_MothershipCoreAiur", false);
    TechTreeUnitAllow(lp_player, "AP_MothershipCorePurifier", false);
    TechTreeUnitAllow(lp_player, "AP_MothershipAiur", false);
    TechTreeUnitAllow(lp_player, "AP_MothershipPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_TempestPurifier", false);
    TechTreeUnitAllow(lp_player, "AP_ArbiterMP", false);
    TechTreeUnitAllow(lp_player, "AP_Oracle", false);
    TechTreeUnitAllow(lp_player, "AP_Gateway", false);
    TechTreeUnitAllow(lp_player, "AP_WarpGate", false);
    TechTreeUnitAllow(lp_player, "AP_CyberneticsCore", false);
    TechTreeUnitAllow(lp_player, "AP_TemplarArchive", false);
    TechTreeUnitAllow(lp_player, "AP_DarkShrine", false);
    TechTreeUnitAllow(lp_player, "AP_Forge", false);
    TechTreeUnitAllow(lp_player, "AP_PhotonCannon", false);
    TechTreeUnitAllow(lp_player, "AP_KhaydarinMonolith", false);
    TechTreeUnitAllow(lp_player, "AP_ShieldBattery", false);
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacility", false);
    TechTreeUnitAllow(lp_player, "AP_RoboticsFacilityWarp", false);
    TechTreeUnitAllow(lp_player, "AP_RoboticsBay", false);
    TechTreeUnitAllow(lp_player, "AP_Stargate", false);
    TechTreeUnitAllow(lp_player, "AP_StargateWarp", false);
    TechTreeUnitAllow(lp_player, "AP_FleetBeacon", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossGroundArmorsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossShieldsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirWeaponsLevel5", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel4", false);
    TechTreeUpgradeAllow(lp_player, "AP_ProtossAirArmorsLevel5", false);
}

void libABFE498B_gf_AP_Triggers_giveProtossDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SlayerConfig", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AlarakStalkerPhasingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VoidRayBeamCanCharge", 1);
}

void libABFE498B_gf_AP_Triggers_giveBuildingSpeed (int lp_player, int lp_level) {
    // Variable Declarations
    int lv__1stacks;
    int lv__100stacks;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__1stacks = ModI(lp_level, 100);
    lv__100stacks = (lp_level / 100);

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BuildingFastBuild", lv__1stacks);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BuildingFastBuild100Stack", lv__100stacks);
}

void libABFE498B_gf_AP_Triggers_replaceUpgrade (int lp_player, string lp_oldUpgrade, string lp_newUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, lp_oldUpgrade, c_techCountQueuedOrBetter) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_oldUpgrade, 0);
        TechTreeUpgradeAllow(lp_player, lp_oldUpgrade, false);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_newUpgrade, 1);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_PatchesInit
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_PatchesInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib6EE41A55_InitLib();
    TriggerExecute(lib6EE41A55_gt_AP_Patches_Constructor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_PatchesInit_Init () {
    libABFE498B_gt_AP_Triggers_PatchesInit = TriggerCreate("libABFE498B_gt_AP_Triggers_PatchesInit_Func");
    TriggerAddEventMapInit(libABFE498B_gt_AP_Triggers_PatchesInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_setOptions
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_setOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_skipCutscenes;
    string lv_disableForcedCamera;
    string lv_gameSpeed;
    string lv_difficulty;
    string lv_genericUpgradeResearch;
    string lv_allInVariant;
    string lv_kerriganOptions;
    string lv_storyTech;
    string lv_takeOverAIAllies;
    string lv_soaOptions;
    string lv_missionOrder;
    string lv_ncoOnlyRun;
    string lv_storyLevels;
    string lv_enableMorphling;
    string lv_overrideRace;
    string lv_enableTrade;
    string lv_difficultyDamageModifier;
    string lv_difficultyDamageModifierEvent;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto03CC9166_g;

    // Variable Initialization
    lv_skipCutscenes = "";
    lv_disableForcedCamera = "";
    lv_gameSpeed = "";
    lv_difficulty = "";
    lv_genericUpgradeResearch = "";
    lv_allInVariant = "";
    lv_kerriganOptions = "";
    lv_storyTech = "";
    lv_takeOverAIAllies = "";
    lv_soaOptions = "";
    lv_missionOrder = "";
    lv_ncoOnlyRun = "";
    lv_storyLevels = "";
    lv_enableMorphling = "";
    lv_overrideRace = "";
    lv_enableTrade = "";
    lv_difficultyDamageModifier = "";
    lv_difficultyDamageModifierEvent = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libABFE498B_gt_AP_Triggers_techTreeInit, true, false);
    lv_difficulty = StringWord(EventChatMessage(false), 2);
    lv_genericUpgradeResearch = StringWord(EventChatMessage(false), 3);
    lv_allInVariant = StringWord(EventChatMessage(false), 4);
    lv_gameSpeed = StringWord(EventChatMessage(false), 5);
    lv_disableForcedCamera = StringWord(EventChatMessage(false), 6);
    lv_skipCutscenes = StringWord(EventChatMessage(false), 7);
    lv_kerriganOptions = StringWord(EventChatMessage(false), 8);
    lv_storyTech = StringWord(EventChatMessage(false), 9);
    lv_takeOverAIAllies = StringWord(EventChatMessage(false), 10);
    lv_soaOptions = StringWord(EventChatMessage(false), 11);
    lv_missionOrder = StringWord(EventChatMessage(false), 12);
    lv_ncoOnlyRun = StringWord(EventChatMessage(false), 13);
    lv_storyLevels = StringWord(EventChatMessage(false), 14);
    lv_enableMorphling = StringWord(EventChatMessage(false), 15);
    lv_overrideRace = StringWord(EventChatMessage(false), 16);
    lv_enableTrade = StringWord(EventChatMessage(false), 17);
    lv_difficultyDamageModifier = StringWord(EventChatMessage(false), 18);
    libABFE498B_gf_AP_Triggers_setDifficulty(lv_difficulty);
    libABFE498B_gf_AP_Triggers_setGameSpeed(lv_gameSpeed);
    libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch = StringToInt(lv_genericUpgradeResearch);
    libABFE498B_gv_aP_Triggers_Option_allInMissionVariant = StringToInt(lv_allInVariant);
    libABFE498B_gv_aP_Triggers_disableForcedCamera = StringEqual(lv_disableForcedCamera, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_skipCutscenes = StringEqual(lv_skipCutscenes, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_Option_enableMorphling = StringEqual(lv_enableMorphling, "1", c_stringCase);
    libABFE498B_gf_AP_Triggers_setKerriganOptions(StringToInt(lv_kerriganOptions));
    libABFE498B_gv_aP_Triggers_Option_grantStoryTech = StringEqual(lv_storyTech, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_Option_takeOverAIAllies = StringEqual(lv_takeOverAIAllies, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_Option_missionOrder = StringToInt(lv_missionOrder);
    libABFE498B_gv_aP_Triggers_Option_ncoOnlyRun = StringEqual(lv_ncoOnlyRun, "1", c_stringCase);
    libABFE498B_gv_aP_Triggers_Option_grantStoryLevels = StringToInt(lv_storyLevels);
    libABFE498B_gf_AP_Triggers_setRaceOverride(lv_overrideRace);
    libABFE498B_gf_AP_Triggers_setSoAOptions(StringToInt(lv_soaOptions));
    if ((StringEqual(lv_difficultyDamageModifier, "1", c_stringCase) == true)) {
        lv_difficultyDamageModifierEvent = libABFE498B_gv_aP_Triggers_DIFFICULTY_DAMAGE_MODIFIER_ENABLED_EVENT;
    }
    else {
        lv_difficultyDamageModifierEvent = libABFE498B_gv_aP_Triggers_DIFFICULTY_DAMAGE_MODIFIER_DISABLED_EVENT;
    }
    TriggerSendEvent(lv_difficultyDamageModifierEvent);
    auto03CC9166_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto03CC9166_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_unlockTradeStructure(lv_currentPlayer, StringToInt(lv_enableTrade));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_setOptions_Init () {
    libABFE498B_gt_AP_Triggers_setOptions = TriggerCreate("libABFE498B_gt_AP_Triggers_setOptions_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_setOptions, c_playerAny, "?SetOptions", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveTerranTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveTerranTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_unitValue;
    string lv_unit2Value;
    string lv_upgradeValue;
    string lv_armory1Value;
    string lv_armory2Value;
    string lv_armory3Value;
    string lv_armory4Value;
    string lv_armory5Value;
    string lv_armory6Value;
    string lv_armory7Value;
    string lv_buildingValue;
    string lv_mercenaryValue;
    string lv_laboratoryValue;
    string lv_progressiveUpgradeValue;
    string lv_progressiveUpgrade2Value;
    string lv_novaGearValue;

    // Automatic Variable Declarations
    playergroup auto3377504F_g;

    // Variable Initialization
    lv_unitValue = "";
    lv_unit2Value = "";
    lv_upgradeValue = "";
    lv_armory1Value = "";
    lv_armory2Value = "";
    lv_armory3Value = "";
    lv_armory4Value = "";
    lv_armory5Value = "";
    lv_armory6Value = "";
    lv_armory7Value = "";
    lv_buildingValue = "";
    lv_mercenaryValue = "";
    lv_laboratoryValue = "";
    lv_progressiveUpgradeValue = "";
    lv_progressiveUpgrade2Value = "";
    lv_novaGearValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armory1Value = StringWord(EventChatMessage(false), 2);
    lv_armory2Value = StringWord(EventChatMessage(false), 3);
    lv_armory3Value = StringWord(EventChatMessage(false), 4);
    lv_armory4Value = StringWord(EventChatMessage(false), 5);
    lv_armory5Value = StringWord(EventChatMessage(false), 6);
    lv_armory6Value = StringWord(EventChatMessage(false), 7);
    lv_armory7Value = StringWord(EventChatMessage(false), 8);
    lv_progressiveUpgradeValue = StringWord(EventChatMessage(false), 9);
    lv_laboratoryValue = StringWord(EventChatMessage(false), 10);
    lv_upgradeValue = StringWord(EventChatMessage(false), 11);
    lv_unitValue = StringWord(EventChatMessage(false), 12);
    lv_buildingValue = StringWord(EventChatMessage(false), 13);
    lv_mercenaryValue = StringWord(EventChatMessage(false), 14);
    lv_novaGearValue = StringWord(EventChatMessage(false), 15);
    lv_progressiveUpgrade2Value = StringWord(EventChatMessage(false), 16);
    lv_unit2Value = StringWord(EventChatMessage(false), 17);
    auto3377504F_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3377504F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_unlockTerranArmory1(lv_currentPlayer, StringToInt(lv_armory1Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory2(lv_currentPlayer, StringToInt(lv_armory2Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory3(lv_currentPlayer, StringToInt(lv_armory3Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory4(lv_currentPlayer, StringToInt(lv_armory4Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory5(lv_currentPlayer, StringToInt(lv_armory5Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory6(lv_currentPlayer, StringToInt(lv_armory6Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory7(lv_currentPlayer, StringToInt(lv_armory7Value));
        libABFE498B_gf_AP_Triggers_unlockTerranProgressiveUpgrades(lv_currentPlayer, StringToInt(lv_progressiveUpgradeValue));
        libABFE498B_gf_AP_Triggers_unlockTerranLaboratory(lv_currentPlayer, StringToInt(lv_laboratoryValue));
        libABFE498B_gf_AP_Triggers_unlockTerranUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
        libABFE498B_gf_AP_Triggers_unlockTerranUnits(lv_currentPlayer, StringToInt(lv_unitValue));
        libABFE498B_gf_AP_Triggers_unlockTerranBuildings(lv_currentPlayer, StringToInt(lv_buildingValue));
        libABFE498B_gf_AP_Triggers_unlockTerranMercenaries(lv_currentPlayer, StringToInt(lv_mercenaryValue));
        libABFE498B_gf_AP_Triggers_unlockTerranNovaGear(lv_currentPlayer, StringToInt(lv_novaGearValue));
        libABFE498B_gf_AP_Triggers_unlockTerranProgressiveUpgrades2(lv_currentPlayer, StringToInt(lv_progressiveUpgrade2Value));
        libABFE498B_gf_AP_Triggers_unlockTerranUnits2(lv_currentPlayer, StringToInt(lv_unit2Value));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveTerranTech_Init () {
    libABFE498B_gt_AP_Triggers_giveTerranTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveTerranTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveTerranTech, c_playerAny, "?GiveTerranTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveZergTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveZergTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_kerriganLevelValue;
    string lv_kerriganPrimalValue;
    string lv_abilityValue;
    string lv_mutation1Value;
    string lv_mutation2Value;
    string lv_mutation3Value;
    string lv_mutation4Value;
    string lv_mutation5Value;
    string lv_strainValue;
    string lv_morphValue;
    string lv_upgradeValue;
    string lv_unitValue;
    string lv_mercenaryValue;
    string lv_evolutionPitValue;
    string lv_progressiveValue;

    // Automatic Variable Declarations
    playergroup auto6CA7C5BB_g;
    int autoD140C5A0_val;

    // Variable Initialization
    lv_kerriganLevelValue = "";
    lv_kerriganPrimalValue = "";
    lv_abilityValue = "";
    lv_mutation1Value = "";
    lv_mutation2Value = "";
    lv_mutation3Value = "";
    lv_mutation4Value = "";
    lv_mutation5Value = "";
    lv_strainValue = "";
    lv_morphValue = "";
    lv_upgradeValue = "";
    lv_unitValue = "";
    lv_mercenaryValue = "";
    lv_evolutionPitValue = "";
    lv_progressiveValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kerriganLevelValue = StringWord(EventChatMessage(false), 2);
    lv_kerriganPrimalValue = StringWord(EventChatMessage(false), 3);
    lv_abilityValue = StringWord(EventChatMessage(false), 4);
    lv_mutation1Value = StringWord(EventChatMessage(false), 5);
    lv_strainValue = StringWord(EventChatMessage(false), 6);
    lv_morphValue = StringWord(EventChatMessage(false), 7);
    lv_upgradeValue = StringWord(EventChatMessage(false), 8);
    lv_mercenaryValue = StringWord(EventChatMessage(false), 9);
    lv_unitValue = StringWord(EventChatMessage(false), 10);
    lv_evolutionPitValue = StringWord(EventChatMessage(false), 11);
    lv_mutation2Value = StringWord(EventChatMessage(false), 12);
    lv_mutation3Value = StringWord(EventChatMessage(false), 13);
    lv_mutation4Value = StringWord(EventChatMessage(false), 14);
    lv_progressiveValue = StringWord(EventChatMessage(false), 15);
    lv_mutation5Value = StringWord(EventChatMessage(false), 16);
    auto6CA7C5BB_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto6CA7C5BB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((libABFE498B_gv_aP_Triggers_Option_KerriganPresence != 0)) {
            autoD140C5A0_val = libABFE498B_gv_aP_Triggers_Option_grantStoryLevels;
            if (autoD140C5A0_val == 1) {
                lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus(lv_currentPlayer, (libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_StoryTechMinLevel + StringToInt(lv_kerriganLevelValue)));
            }
            else if (autoD140C5A0_val == 2) {
                lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus(lv_currentPlayer, MaxI(libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_StoryTechMinLevel, StringToInt(lv_kerriganLevelValue)));
            }
            else {
                lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus(lv_currentPlayer, StringToInt(lv_kerriganLevelValue));
            }
        }
        else {
            lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus(lv_currentPlayer, libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_StoryTechMinLevel);
        }
        if ((libABFE498B_gv_aP_Triggers_Option_KerriganPrimalStatusByMap == true)) {
            if ((libABFE498B_gv_aP_Triggers_MapConfig_Kerrigan_PrimalInVanilla == true)) {
                libABFE498B_gf_AP_Triggers_setKerriganPrimal(lv_currentPlayer);
            }

        }
        else {
            if ((StringToInt(lv_kerriganPrimalValue) == 1)) {
                libABFE498B_gf_AP_Triggers_setKerriganPrimal(lv_currentPlayer);
            }

        }
        libABFE498B_gf_AP_Triggers_unlockZergKerriganAbilities(lv_currentPlayer, StringToInt(lv_abilityValue));
        libABFE498B_gf_AP_Triggers_unlockZergMutation1(lv_currentPlayer, StringToInt(lv_mutation1Value));
        libABFE498B_gf_AP_Triggers_unlockZergStrain(lv_currentPlayer, StringToInt(lv_strainValue));
        libABFE498B_gf_AP_Triggers_unlockZergMorph(lv_currentPlayer, StringToInt(lv_morphValue));
        libABFE498B_gf_AP_Triggers_unlockZergUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
        libABFE498B_gf_AP_Triggers_unlockZergMercenaries(lv_currentPlayer, StringToInt(lv_mercenaryValue));
        libABFE498B_gf_AP_Triggers_unlockZergUnits(lv_currentPlayer, StringToInt(lv_unitValue));
        libABFE498B_gf_AP_Triggers_unlockZergEvolutionPit(lv_currentPlayer, StringToInt(lv_evolutionPitValue));
        libABFE498B_gf_AP_Triggers_unlockZergMutation2(lv_currentPlayer, StringToInt(lv_mutation2Value));
        libABFE498B_gf_AP_Triggers_unlockZergMutation3(lv_currentPlayer, StringToInt(lv_mutation3Value));
        libABFE498B_gf_AP_Triggers_unlockZergMutation4(lv_currentPlayer, StringToInt(lv_mutation4Value));
        libABFE498B_gf_AP_Triggers_unlockZergProgressiveUpgrades(lv_currentPlayer, StringToInt(lv_progressiveValue));
        libABFE498B_gf_AP_Triggers_unlockZergMutation5(lv_currentPlayer, StringToInt(lv_mutation5Value));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveZergTech_Init () {
    libABFE498B_gt_AP_Triggers_giveZergTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveZergTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveZergTech, c_playerAny, "?GiveZergTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveProtossTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveProtossTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_unitValue;
    string lv_unit2Value;
    string lv_upgradeValue;
    string lv_buildingValue;
    string lv_progressiveUpgradeValue;
    string lv_spearOfAdunValue;
    string lv_solariteCoreValue;
    string lv_forge1Value;
    string lv_forge2Value;
    string lv_forge3Value;
    string lv_forge4Value;
    string lv_warCouncilValue;
    string lv_warCouncil2Value;
    string lv_shieldRegenValue;

    // Automatic Variable Declarations
    playergroup auto67EC4BC5_g;

    // Variable Initialization
    lv_unitValue = "";
    lv_unit2Value = "";
    lv_upgradeValue = "";
    lv_buildingValue = "";
    lv_progressiveUpgradeValue = "";
    lv_spearOfAdunValue = "";
    lv_solariteCoreValue = "";
    lv_forge1Value = "";
    lv_forge2Value = "";
    lv_forge3Value = "";
    lv_forge4Value = "";
    lv_warCouncilValue = "";
    lv_warCouncil2Value = "";
    lv_shieldRegenValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitValue = StringWord(EventChatMessage(false), 2);
    lv_unit2Value = StringWord(EventChatMessage(false), 3);
    lv_upgradeValue = StringWord(EventChatMessage(false), 4);
    lv_buildingValue = StringWord(EventChatMessage(false), 5);
    lv_progressiveUpgradeValue = StringWord(EventChatMessage(false), 6);
    lv_spearOfAdunValue = StringWord(EventChatMessage(false), 7);
    lv_solariteCoreValue = StringWord(EventChatMessage(false), 8);
    lv_forge1Value = StringWord(EventChatMessage(false), 9);
    lv_forge2Value = StringWord(EventChatMessage(false), 10);
    lv_forge3Value = StringWord(EventChatMessage(false), 11);
    lv_forge4Value = StringWord(EventChatMessage(false), 12);
    lv_warCouncilValue = StringWord(EventChatMessage(false), 13);
    lv_warCouncil2Value = StringWord(EventChatMessage(false), 14);
    lv_shieldRegenValue = StringWord(EventChatMessage(false), 15);
    auto67EC4BC5_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto67EC4BC5_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_unlockProtossUnits(lv_currentPlayer, StringToInt(lv_unitValue));
        libABFE498B_gf_AP_Triggers_unlockProtossUnits2(lv_currentPlayer, StringToInt(lv_unit2Value));
        libABFE498B_gf_AP_Triggers_unlockProtossBuildings(lv_currentPlayer, StringToInt(lv_buildingValue));
        libABFE498B_gf_AP_Triggers_unlockProtossProgressiveUpgrades(lv_currentPlayer, StringToInt(lv_progressiveUpgradeValue));
        libABFE498B_gf_AP_Triggers_unlockProtossSpearOfAdun(lv_currentPlayer, StringToInt(lv_spearOfAdunValue));
        libABFE498B_gf_AP_Triggers_unlockProtossSolariteCore(lv_currentPlayer, StringToInt(lv_solariteCoreValue));
        libABFE498B_gf_AP_Triggers_unlockProtossUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
        libABFE498B_gf_AP_Triggers_unlockProtossForge1(lv_currentPlayer, StringToInt(lv_forge1Value));
        libABFE498B_gf_AP_Triggers_unlockProtossForge2(lv_currentPlayer, StringToInt(lv_forge2Value));
        libABFE498B_gf_AP_Triggers_unlockProtossForge3(lv_currentPlayer, StringToInt(lv_forge3Value));
        libABFE498B_gf_AP_Triggers_unlockProtossForge4(lv_currentPlayer, StringToInt(lv_forge4Value));
        libABFE498B_gf_AP_Triggers_unlockProtossWarCouncil(lv_currentPlayer, StringToInt(lv_warCouncilValue));
        libABFE498B_gf_AP_Triggers_unlockProtossWarCouncil2(lv_currentPlayer, StringToInt(lv_warCouncil2Value));
        libABFE498B_gf_AP_Triggers_giveShieldRegeneration(lv_currentPlayer, StringToInt(lv_shieldRegenValue));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveProtossTech_Init () {
    libABFE498B_gt_AP_Triggers_giveProtossTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveProtossTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveProtossTech, c_playerAny, "?GiveProtossTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveMiscTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveMiscTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_buildingSpeedValue;

    // Automatic Variable Declarations
    playergroup autoA7A687E2_g;

    // Variable Initialization
    lv_buildingSpeedValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buildingSpeedValue = StringWord(EventChatMessage(false), 2);
    autoA7A687E2_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA7A687E2_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_giveBuildingSpeed(lv_currentPlayer, StringToInt(lv_buildingSpeedValue));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveMiscTech_Init () {
    libABFE498B_gt_AP_Triggers_giveMiscTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveMiscTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveMiscTech, c_playerAny, "?GiveMiscTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_techTreeInit
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_techTreeInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto469AFECB_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto469AFECB_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto469AFECB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_clearTerranTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_clearZergTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_clearProtossTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveTerranDefaultTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveZergDefaultTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveProtossDefaultTech(lv_currentPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_techTreeInit_Init () {
    libABFE498B_gt_AP_Triggers_techTreeInit = TriggerCreate("libABFE498B_gt_AP_Triggers_techTreeInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradeProtossStructures
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_UpgradeProtossStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup auto2B1456A6_g;
    unitgroup autoEFDDACFB_g;
    int autoEFDDACFB_u;
    unitgroup autoFF6A7150_g;
    int autoFF6A7150_u;
    unitgroup auto93ACC6C8_g;
    int auto93ACC6C8_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2B1456A6_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto2B1456A6_g, lv_player);
        if (lv_player < 0) { break; }
        autoEFDDACFB_g = UnitGroup("AP_Gateway", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoEFDDACFB_u = UnitGroupCount(autoEFDDACFB_g, c_unitCountAll);
        for (;; autoEFDDACFB_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoEFDDACFB_g, autoEFDDACFB_u);
            if (lv_unit == null) { break; }
            UnitIssueOrder(lv_unit, Order(AbilityCommand("AP_UpgradeToWarpGateInstant", 0)), c_orderQueueAddToFront);
        }
        if ((TechTreeUpgradeCount(lv_player, "AP_SOAWarpTech", c_techCountCompleteOnly) >= 1)) {
            autoFF6A7150_g = UnitGroup("AP_RoboticsFacility", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoFF6A7150_u = UnitGroupCount(autoFF6A7150_g, c_unitCountAll);
            for (;; autoFF6A7150_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoFF6A7150_g, autoFF6A7150_u);
                if (lv_unit == null) { break; }
                UnitIssueOrder(lv_unit, Order(AbilityCommand("AP_UpgradeToRoboticsFacilityWarpInstant", 0)), c_orderQueueAddToFront);
            }
            auto93ACC6C8_g = UnitGroup("AP_Stargate", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto93ACC6C8_u = UnitGroupCount(auto93ACC6C8_g, c_unitCountAll);
            for (;; auto93ACC6C8_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto93ACC6C8_g, auto93ACC6C8_u);
                if (lv_unit == null) { break; }
                UnitIssueOrder(lv_unit, Order(AbilityCommand("AP_UpgradeToStargateWarpInstant", 0)), c_orderQueueAddToFront);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_UpgradeProtossStructures_Init () {
    libABFE498B_gt_UpgradeProtossStructures = TriggerCreate("libABFE498B_gt_UpgradeProtossStructures_Func");
    TriggerAddEventGeneric(libABFE498B_gt_UpgradeProtossStructures, lib5BD4895D_gv_aP_Core_LOAD_FINISHED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_tradeNydusBuilt
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_tradeNydusBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "AP_TradeStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib5BD4895D_gv_aP_Core_tradeUnit = EventUnitProgressUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_tradeNydusBuilt_Init () {
    libABFE498B_gt_AP_Triggers_tradeNydusBuilt = TriggerCreate("libABFE498B_gt_AP_Triggers_tradeNydusBuilt_Func");
    TriggerAddEventUnitConstructProgress(libABFE498B_gt_AP_Triggers_tradeNydusBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_InitSoA
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_InitSoA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto93509108_g;
    playergroup autoABD2DABB_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libABFE498B_gv_aP_Triggers_Option_SoAPresence > 0) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresence == 3) || ((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_LOTV_PROTOSS) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresence == 1) || (libABFE498B_gv_aP_Triggers_Option_SoAPresence == 2)) && ((libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Neut") || (libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Prot"))) || ((((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_PROTOSS_NOT_LOTV_MAIN) && (libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Neut")) || (libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Prot")) && (libABFE498B_gv_aP_Triggers_Option_SoAPresence == 2))) && ((libABFE498B_gv_aP_Triggers_isBuild == true) || (libABFE498B_gv_aP_Triggers_Option_SoAPresenceNoBuild == true))) {
        auto93509108_g = libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers;
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto93509108_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lib15EF4C78_gf_AP_Player_CreateSoAUnit(lv_currentPlayer);
        }
    }

    if ((libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts > 0) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 3) || ((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_LOTV_PROTOSS) && ((libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 1) || (libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 2)) && ((libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Neut") || (libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Prot"))) || ((((libABFE498B_gv_aP_Triggers_MapConfig_Mission_Protoss == libABFE498B_gv_aP_Triggers_MapConfig_MISSION_PROTOSS_NOT_LOTV_MAIN) && (libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Neut")) || (libABFE498B_gv_aP_Triggers_Option_overridePlayerRace == "Prot")) && (libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocasts == 2))) && ((libABFE498B_gv_aP_Triggers_isBuild == true) || (libABFE498B_gv_aP_Triggers_Option_SoAPresenceAutocastsNoBuild == true))) {
        autoABD2DABB_g = libABFE498B_gv_aP_Triggers_MapConfig_SoAControllingPlayers;
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoABD2DABB_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lib15EF4C78_gf_AP_Player_CreateSoAAutonomousCasterUnit(lv_currentPlayer);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_InitSoA_Init () {
    libABFE498B_gt_AP_Triggers_InitSoA = TriggerCreate("libABFE498B_gt_AP_Triggers_InitSoA_Func");
}

void libABFE498B_InitTriggers () {
    libABFE498B_gt_AP_Triggers_PatchesInit_Init();
    libABFE498B_gt_AP_Triggers_setOptions_Init();
    libABFE498B_gt_AP_Triggers_giveTerranTech_Init();
    libABFE498B_gt_AP_Triggers_giveZergTech_Init();
    libABFE498B_gt_AP_Triggers_giveProtossTech_Init();
    libABFE498B_gt_AP_Triggers_giveMiscTech_Init();
    libABFE498B_gt_AP_Triggers_techTreeInit_Init();
    libABFE498B_gt_UpgradeProtossStructures_Init();
    libABFE498B_gt_AP_Triggers_tradeNydusBuilt_Init();
    libABFE498B_gt_AP_Triggers_InitSoA_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libABFE498B_InitLib_completed = false;

void libABFE498B_InitLib () {
    if (libABFE498B_InitLib_completed) {
        return;
    }

    libABFE498B_InitLib_completed = true;

    libABFE498B_InitLibraries();
    libABFE498B_InitVariables();
    libABFE498B_InitCustomScript();
    libABFE498B_InitTriggers();
}

